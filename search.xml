<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>First to NeXT</title>
    <url>/2018/02/14/First-to-NeXT/</url>
    <content><![CDATA[<blockquote>
<p>Maybe it is the first.<br>But in my view, that may be the NeXT.</p>
</blockquote>
<p>名字不重要，形式也不重要，重要的是内容。<br>这里将会陆续发布一些技术工作的经验谈，然而仅仅是经验谈而已。</p>
<a id="more"></a>
<p>更多的都是需要读者自己去探索，<br>这一方天地下，比我们的视野更远的地方。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"First to NeXT"</span></span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是本站第一篇正式发文，感谢阅读！</p>
</blockquote>
]]></content>
      <tags>
        <tag>intro</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes About Recent Projects 1</title>
    <url>/2018/02/15/Notes-About-Recent-Projects-1/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password here.">
    <label for="pass">Enter password here.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Environment Configuration for Yolo-darknet</title>
    <url>/2018/02/20/Environment-Configuration-for-Yolo-darknet/</url>
    <content><![CDATA[<blockquote>
<p>Just do it.<br>Just do something new and do it yourself.</p>
</blockquote>
<p>记录一些关于yolo-darknet环境配置踩过的坑。<br>能力有限，但求指点，欢迎交流。</p>
<a id="more"></a>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul>
<li>OS: Ubuntu 16.04 LTS</li>
<li>PC: ASUS K550J (EFI enable)</li>
<li>GPU: GTX950M</li>
<li>CPU: i5-4200H</li>
<li>RAM: 4G</li>
<li>DISK: 1T HDD (no SSD) </li>
</ul>
<h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h3><ol>
<li>用UltraISO把iso文件烧到你的U盘，<strong>进BIOS打开EFI引导，并选择EFI模式下的U盘为第一引导项</strong></li>
<li>安装Ubuntu到一个空白分区（可以通过分区压缩获得，如果是全新电脑就直接开始分区了）：<ul>
<li><strong>注意根据提示划分那块bios efi的小分区，几十K即可</strong>；</li>
<li><strong>划分swap交换分区，一般是你内存大小的3倍大，划在主分区后面</strong>；</li>
<li>剩下的划给主分区；</li>
<li>选择安装启动器到<strong>Windows使用的那个EFI启动分区</strong>。</li>
</ul>
</li>
<li>进入分区界面前有几个选项要注意：<ul>
<li>让你顺带安装更新的那个，<strong>不要勾选</strong>，更新的源大多自动匹配到了国外的，网速你懂的；</li>
<li>让你安装第三方闭源驱动和软件的，<strong>必须勾选</strong>，能解决很多开源驱动带来的问题。</li>
</ul>
</li>
<li>安装，然后回到BIOS里面你会惊奇的发现出现了Ubuntu的EFI模式引导项（准确来说是两个，估计是那次我多搞了一个/boot）选择它为第一个。</li>
<li>成功进入Ubuntu</li>
</ol>
<h3 id="安装OpenCV"><a href="#安装OpenCV" class="headerlink" title="安装OpenCV"></a>安装OpenCV</h3><p>安装OpenCV主要是为了使用外置摄像头进行图像采集。</p>
<p>GitHub上有自动安装版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/jayrambhia/Install-OpenCV/tree/master/Ubuntu</span><br></pre></td></tr></table></figure>
<p>进入安装目录下的/2.4，提升*.sh文件的权限并执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">chmod a+x *.sh</span><br><span class="line">./opencv2_4_10.sh</span><br></pre></td></tr></table></figure>
<p>然后就会开始<strong>极其漫长</strong>的安装过程。</p>
<blockquote>
<p>第一次安装到某个阶段的时候卡死，<br>硬盘灯不闪，鼠标键盘没反应，我还以为安装失败强行重启了。<br>然后又开始一遍，又卡死。<br>我绝望了，但是冷静了下来，想了想<br>——怕是自己电脑配置太渣。<br>然后在安装前关闭了所有无关程序，<br>唯独打开了系统监视器（即Windows下的任务管理器）。<br>之后就非常惊奇地看到卡死的时候：<br>内存+CPU，全部占用100%<br>然后过了大概一个多小时，又全部降回去了，<br>没过三分钟，又是内存飙到100%，CPU反倒正常了<br>目测过了三个多小时，还是这个样子，倒是命令行每隔十几分钟跳一次字，<br>系统时钟已经卡到了和实际时间存在了十分钟到半小时不等的时差，<br>只有某几次命令行跳字的时候，内存占用下来了一点，系统时间一秒刷新了十几分钟<br>最后一脸无奈地睡了。<br>第二天打开笔记本盖子一看，<br>装好了，老大一个success。</p>
</blockquote>
<h3 id="安装darknet"><a href="#安装darknet" class="headerlink" title="安装darknet"></a>安装darknet</h3><p>打开终端<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">git <span class="built_in">clone</span> http://github.com/pjreddie/darknet.git</span><br><span class="line"><span class="built_in">cd</span> darknet</span><br></pre></td></tr></table></figure></p>
<p>用gedit修改makefile文件<br><strong>令OPENCV=1</strong><br>然后在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<h3 id="安装NVIDIA官方GPU驱动"><a href="#安装NVIDIA官方GPU驱动" class="headerlink" title="安装NVIDIA官方GPU驱动"></a>安装NVIDIA官方GPU驱动</h3><p>首先<strong>禁用开源驱动</strong></p>
<p>新建一个.conf文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure>
<p>写入以下内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">blacklist lbm-nouveau</span><br><span class="line">options nouveau modeset=0</span><br><span class="line">alias nouveau off</span><br><span class="line">alias lbm-nouveau off</span><br></pre></td></tr></table></figure></p>
<p>保存，重启后再打开终端，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure></p>
<p>无输出即禁用成功</p>
<p>正式开始安装NVIDIA官方驱动了<br>我这里选择的是<strong>直接到系统的“软件和更新”里的“附加驱动”选择安装NVIDIA的专有驱动</strong><br>（不要管他是否显示tested，安装就是了）</p>
<p>等待安装成功后，重启打开终端，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure></p>
<p>正确显示你当前GPU的状况就OK了</p>
<h3 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA"></a>安装CUDA</h3><p>CUDA下载地址：<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a><br>选项顺序是Linux-x86_64-Ubuntu-16.04-deb(local)<br>1点多G，然后找个下载速度快的地方下了它，推荐<strong>迅雷等下载工具</strong>，<br>虽然并没有加速，但毕竟服务器在境外，<strong>浏览器没法断点续传</strong>，连接一断就得重新下载。</p>
<p>然后把下载好的文件包拷到“/home/用户名/”目录下，在终端里面输入<br><strong>（注意你的deb文件名不一定是这个，这个是旧版的了）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.deb</span><br><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get install cuda</span><br></pre></td></tr></table></figure>
<p>安装完成后输入<br><strong>（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda-7.5/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<h3 id="再次安装darknet"><a href="#再次安装darknet" class="headerlink" title="再次安装darknet"></a>再次安装darknet</h3><p>再次用gedit打开makefile<br><strong>（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）</strong><br>令开头GPU=1，同时令NVCC = /usr/local/cuda-7.5/bin/nvcc后保存退出<br>然后在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<h2 id="测试darknet"><a href="#测试darknet" class="headerlink" title="测试darknet"></a>测试darknet</h2><h3 id="下载模型-测试模型"><a href="#下载模型-测试模型" class="headerlink" title="下载模型+测试模型"></a>下载模型+测试模型</h3><p>到这儿下载*.weight格式的模型：<a href="http://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">http://pjreddie.com/darknet/yolo/</a></p>
<p>终端切换到darknet的安装目录下<br>示例命令如下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg</span><br><span class="line">./darknet yolo <span class="built_in">test</span> cfg/yolo-tiny.cfg yolo-tiny.weight</span><br></pre></td></tr></table></figure></p>
<h3 id="使用电脑-手机摄像头采集图像"><a href="#使用电脑-手机摄像头采集图像" class="headerlink" title="使用电脑/手机摄像头采集图像"></a>使用电脑/手机摄像头采集图像</h3><p>电脑摄像头：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights</span><br></pre></td></tr></table></figure></p>
<p>手机摄像头：</p>
<p>先在手机上安装好<strong>IP摄像头</strong>APP，配置好地址后，先用浏览器访问以确定视频源的路径<br><strong>(因此这里的地址是你配置并确定好视频源的地址)</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video</span><br></pre></td></tr></table></figure></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://blog.csdn.net/samylee/article/details/51684856" target="_blank" rel="noopener">http://blog.csdn.net/samylee/article/details/51684856</a></li>
<li><a href="http://blog.csdn.net/wjbwjbwjbwjb/article/details/52125475" target="_blank" rel="noopener">http://blog.csdn.net/wjbwjbwjbwjb/article/details/52125475</a></li>
<li><a href="http://blog.csdn.net/u014696921/article/details/65626751" target="_blank" rel="noopener">http://blog.csdn.net/u014696921/article/details/65626751</a></li>
<li><a href="http://blog.csdn.net/wuzuyu365/article/details/52469131" target="_blank" rel="noopener">http://blog.csdn.net/wuzuyu365/article/details/52469131</a></li>
<li><a href="http://blog.csdn.net/zafir_410/article/details/73188228" target="_blank" rel="noopener">http://blog.csdn.net/zafir_410/article/details/73188228</a></li>
<li><a href="http://blog.csdn.net/u013832707/article/details/53438574" target="_blank" rel="noopener">http://blog.csdn.net/u013832707/article/details/53438574</a></li>
<li><a href="https://www.cnblogs.com/jackchen-Net/p/7954138.html" target="_blank" rel="noopener">https://www.cnblogs.com/jackchen-Net/p/7954138.html</a></li>
</ol>
<blockquote>
<p>最后，这是本站的第六篇正式发文，感谢阅读。<br>如有意见和建议，欢迎通过首页的联系方式联系作者，<br>本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。</p>
</blockquote>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes About Recent Projects 2</title>
    <url>/2018/02/17/Notes-About-Recent-Projects-2/</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="Enter password here.">
    <label for="pass">Enter password here.</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
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
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Training Configuration for Yolo-darknet</title>
    <url>/2018/11/28/Training-Configuration-for-Yolo-darknet/</url>
    <content><![CDATA[<blockquote>
<p>Everything’s coming up roses.</p>
</blockquote>
<p>续上次的笔记<br>分享yolo-darknet神经网络训练全过程的配置经验</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于本文中描述的yolo-darknet训练配置流程来源较多，而且训练配置时间为今年暑期，距离本文完稿时间较远，因此本文不可避免地会存在一定的失误和错漏。恳请发现问题的读者不吝赐教，通过首页的联系方式向作者提出宝贵意见。</p>
<h2 id="数据集的标注、修改"><a href="#数据集的标注、修改" class="headerlink" title="数据集的标注、修改"></a>数据集的标注、修改</h2><p>数据集的采集来源以及采集方式属于项目内容，此处暂时不便叙述。对于采集得到的数据集，尤其是针对yolo-darknet的图片数据集，应当至少满足如下的要求：</p>
<ul>
<li>文件名称中不应当出现中文</li>
<li>多次采集得到的文件应当分开命名前缀，否则存在同名文件覆盖的问题</li>
<li>最好是同一种后缀格式，例如jpg格式。后缀大写JPG和小写jpg，darknet不会认为是同一种文件类型而报错。另外，png格式比较灵活，可以强行改成jpg后缀且内容仍可以读取</li>
</ul>
<p>本项目中除了采集了原始数据之外，也通过python脚本对图片素材进行翻转、随机颜色等基本变换来对数据集规模进行扩充。此为额外操作，不影响yolo-darknet训练过程。</p>
<p>数据集的标注采用的是基于python的ImageLabel，标注界面是可视化的，流程基本上是：</p>
<ul>
<li>设置你标注的物体对应的标签，例如dog，cat等，可以设置默认标签</li>
<li>打开素材文件夹到程序中，设置当前的标签，对图片进行逐个画框标注</li>
<li>标注后自动生成数个xml文件，xml文件的内容一般如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">annotation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">folder</span>&gt;</span>图片文件夹<span class="tag">&lt;/<span class="name">folder</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filename</span>&gt;</span>图片名称<span class="tag">&lt;/<span class="name">filename</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">path</span>&gt;</span>图片路径<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">database</span>&gt;</span>Unknown<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">size</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">width</span>&gt;</span>600<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">height</span>&gt;</span>338<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">depth</span>&gt;</span>3<span class="tag">&lt;/<span class="name">depth</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">size</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">segmented</span>&gt;</span>0<span class="tag">&lt;/<span class="name">segmented</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>标签名字<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">pose</span>&gt;</span>Unspecified<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">truncated</span>&gt;</span>0<span class="tag">&lt;/<span class="name">truncated</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">difficult</span>&gt;</span>0<span class="tag">&lt;/<span class="name">difficult</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bndbox</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xmin</span>&gt;</span>291<span class="tag">&lt;/<span class="name">xmin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ymin</span>&gt;</span>76<span class="tag">&lt;/<span class="name">ymin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xmax</span>&gt;</span>412<span class="tag">&lt;/<span class="name">xmax</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ymax</span>&gt;</span>192<span class="tag">&lt;/<span class="name">ymax</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bndbox</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">annotation</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本上就是对于标注的方框的位置和大小的记录。标注生成的是整个VOC数据集文件夹，一般有两个文件夹：图片文件夹Image和标记文件夹xml。标记文件夹中每一个xml文件的文件名基本上都对应了的图片文件夹中的图片文件。</p>
<p>应当注意的是，一旦移动了xml文件夹或整个数据集文件夹，必须将所有xml文件中的图片文件夹、图片路径改成对应的新文件夹、新路径，否则必然报错。</p>
<p>但问题是，一旦数据集规模像本项目一样巨大时，人工逐个更改xml就十分困难。所以需要python脚本进行批量文件处理。此处摘录一部分代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf8'</span>) </span><br><span class="line"></span><br><span class="line">path = <span class="string">"/home/blean/VOC/validateImage/"</span></span><br><span class="line">oldpath = <span class="string">"/home/blean/VOC/pos/"</span></span><br><span class="line">newpath = <span class="string">"/home/blean/VOC/Image/"</span></span><br><span class="line">filelist = os.listdir(path)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> files <span class="keyword">in</span> filelist:</span><br><span class="line">    <span class="keyword">if</span> os.path.splitext(files)[<span class="number">1</span>] != <span class="string">".jpg"</span> <span class="keyword">and</span> os.path.splitext(files)[<span class="number">1</span>] != <span class="string">".txt"</span>:</span><br><span class="line">        tmp = os.path.splitext(files)[<span class="number">0</span>]</span><br><span class="line">        os.rename(path+files, path+tmp+<span class="string">".jpg"</span>)</span><br><span class="line">        <span class="comment"># 强行将非jpg的后缀，例如JPG大写后缀或png后缀更改成jpg</span></span><br><span class="line">        <span class="keyword">print</span> path+files</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    tree = ET.parse(path+files)</span><br><span class="line">    root = tree.getroot()</span><br><span class="line">    filename = root.findall(<span class="string">'filename'</span>)[<span class="number">0</span>].text</span><br><span class="line">    tmp = os.path.splitext(filename)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 寻找xml文件中对应的文件名</span></span><br><span class="line">    <span class="keyword">print</span> path+tmp+<span class="string">".xml"</span></span><br><span class="line">    os.rename(path+files, path+tmp+<span class="string">".xml"</span>)</span><br><span class="line">    <span class="comment"># 同样地将xml文件名改成后缀修改后的图片文件名</span></span><br><span class="line">    root.findall(<span class="string">'path'</span>)[<span class="number">0</span>].text = tmp.replace(oldpath, newpath)</span><br><span class="line">    <span class="comment"># 修改路径</span></span><br><span class="line">    tmp = root.findall(<span class="string">'filename'</span>)[<span class="number">0</span>].text</span><br><span class="line">    <span class="keyword">if</span> tmp.find(<span class="string">"捕获"</span>) != <span class="number">-1</span>:</span><br><span class="line">        <span class="keyword">print</span> tmp</span><br><span class="line">        root.findall(<span class="string">'filename'</span>)[<span class="number">0</span>].text = tmp.replace(<span class="string">"捕获"</span>, <span class="string">"buhuo"</span>)</span><br><span class="line">        tree.write(path+files)</span><br><span class="line">    <span class="comment"># 修改某些中文文件名</span></span><br><span class="line">    root.findall(<span class="string">'folder'</span>)[<span class="number">0</span>].text = tmp.replace(<span class="string">"pos"</span>, <span class="string">"Image"</span>)</span><br><span class="line">    <span class="comment"># 修改图片文件夹名称</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line"><span class="comment"># 打印总数</span></span><br></pre></td></tr></table></figure>
<p>注：以上代码是本人为了修正数据集格式自行编写的，具有很强的临时性，是不同功能的python代码之间的整合，如果不需要某些功能，可以将对应代码手动注释掉</p>
<h2 id="训练数据集和验证数据集的拆分"><a href="#训练数据集和验证数据集的拆分" class="headerlink" title="训练数据集和验证数据集的拆分"></a>训练数据集和验证数据集的拆分</h2><p>数据集应当分成训练集和验证集，以便于对训练效果进行评估。<br>这里作者直接参考了这篇CSDN上的文章<a href="https://blog.csdn.net/qq_34484472/article/details/73135354" target="_blank" rel="noopener">《YOLO训练自己的数据集》</a>中的python脚本，内容摘录如下：</p>
<blockquote>
</blockquote>
<pre><code>下载链接：http://pan.baidu.com/s/1hs22I7U 密码：wdv0
运行traindata.py：生成trainImage文件夹，存放训练图片；生成trainImageXML文件夹，存放训练图片xml标签；生成validateImage文件夹，存放验证集图片；生成validateImageXML文件夹，存放验证集图片的xml标签。
运行trans.py，生成trainImageLabelTxt文件夹，存放训练图片通过xml标签转化得到的txt文件（若在训练过程提示txt文件找不到，则把此文件夹下的txt文件夹移动到trainImage文件夹）；生成validateImageLabelTxt文件夹，道理一样。
另外得到的trainImagePath.txt和validateImagePath.txt存放着训练图片和验证图片的路径。
</code></pre><blockquote>
</blockquote>
<p>下载好的python脚本一般不能立即用，根据运行python脚本出现的报错，应当对其进行相应的修改，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">classes = [<span class="string">"cat"</span>] <span class="comment">#把这个标签改成你自己的数据集中标记的标签</span></span><br><span class="line"><span class="comment">#那个sets看起来很奇怪，但是不用改也能用。python研究的少，暂时不知道具体原因</span></span><br></pre></td></tr></table></figure>
<h2 id="对darknet的配置和更改"><a href="#对darknet的配置和更改" class="headerlink" title="对darknet的配置和更改"></a>对darknet的配置和更改</h2><p>darknet本身并非完全开箱即用的图像识别训练框架，因此需要对它进行有针对性的配置和必要的更改。此处同样是根据<a href="https://blog.csdn.net/qq_34484472/article/details/73135354" target="_blank" rel="noopener">《YOLO训练自己的数据集》</a>以及其他几篇文章的指导和建议进行配置的，主要有以下几点：</p>
<p>首先，对darknet的cfg/voc.data进行配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classes= 标签类别总数</span><br><span class="line">train = 填之前脚本生成的训练集文件列表trainImageId.txt</span><br><span class="line">valid = 填之前脚本生成的验证集文件列表validateImagePath.txt</span><br><span class="line">names = data/xxx.names</span><br><span class="line">backup = 存放训练结果模型的路径</span><br></pre></td></tr></table></figure>
<p>在data文件夹下的names文件中，每行写一条标签名称</p>
<p>其次，对要使用的神经网络版本yolo2-voc对应的配置文件yolo2-voc.cfg，应当更改以下几处：</p>
<ul>
<li>将最后的[region]层神经网络的配置中的classes改为1（即标记类别的总数）</li>
<li>将最后一个[convolutional]卷积层中的filter改为30（filter的公式filters=(classes+ coords+ 1)<em> (NUM) ，我的是(1+4+1)</em> 5=30）</li>
</ul>
<p>注：这里coords可以认为是坐标，设置的标记是一个方框则取4。NUM是神经网络的层数。filter公式的来源请参见国外开发者们的讨论：<a href="https://groups.google.com/forum/#!topic/darknet/B4rSpOo84yg" target="_blank" rel="noopener">https://groups.google.com/forum/#!topic/darknet/B4rSpOo84yg</a></p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p>在yolo的官网下载预训练模型，地址：<a href="http://pjreddie.com/media/files/darknet53.conv.74" target="_blank" rel="noopener">http://pjreddie.com/media/files/darknet53.conv.74</a></p>
<p>并执行训练命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector train cfg/voc.data cfg/yolov2-voc.cfg darknet53.conv.74</span><br></pre></td></tr></table></figure>
<p>之后便开始了对神经网络的训练，在1000次训练之内，每100次就在backup文件夹中生成一次权重模型，在1000次训练以上，每10000次生成一次权重模型。本项目的最终训练次数达到了50000次。</p>
<p><img src="/2018/11/28/Training-Configuration-for-Yolo-darknet/training3.png" alt="训练过程截图"></p>
<p>上图为训练到500次左右时的结果截图</p>
<p><img src="/2018/11/28/Training-Configuration-for-Yolo-darknet/training4.png" alt="训练过程截图"></p>
<p>训练生成的模型文件</p>
<h2 id="批量测试、评估以及需要对darknet进行的相应修改"><a href="#批量测试、评估以及需要对darknet进行的相应修改" class="headerlink" title="批量测试、评估以及需要对darknet进行的相应修改"></a>批量测试、评估以及需要对darknet进行的相应修改</h2><p>本人<a href="https://lmy98129.github.io/2018/02/20/Environment-Configuration-for-Yolo-darknet">之前的笔记</a>中曾经提到了使用单张图片测试，以及连接计算机摄像头、网络视频推流进行实时识别的命令，命令内容大致如下：</p>
<p>单张图片：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg</span><br></pre></td></tr></table></figure></p>
<p>电脑摄像头：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights</span><br></pre></td></tr></table></figure></p>
<p>手机摄像头（通过网络视频实时推流，使用工具为IP摄像头APP）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video</span><br></pre></td></tr></table></figure>
<p>得到的效果大致如下：</p>
<p>实地场景：</p>
<p><img src="/2018/11/28/Training-Configuration-for-Yolo-darknet/testing7.png" alt="测试过程截图"></p>
<p>网络图片：</p>
<p><img src="/2018/11/28/Training-Configuration-for-Yolo-darknet/testing1.png" alt="测试过程截图"></p>
<p>但是，可以看出这样手动输入命令进行逐个测试的方法，在测试上文中提到的从标记数据集中拆分出来的有一定数量图片的验证集时十分地不友好。而且必须手工收集每次测试中得到的准确度信息、手工进行统计计算。</p>
<p>所以这里参考了CSDN上的另一篇文章<a href="https://blog.csdn.net/mieleizhi0522/article/details/79989754" target="_blank" rel="noopener">《YOLOv3批量测试图片并保存在自定义文件夹下》</a>以及简书上的一篇文章<a href="https://blog.csdn.net/mieleizhi0522/article/details/79989754" target="_blank" rel="noopener">《Darknet 评估训练好的网络的性能》</a>对darknet中的example文件夹下的detector.c文件中的代码进行更改，以便于进行批量测试、统计、评估模型在验证集上的准确度，并输出结果：</p>
<ol>
<li>修改validate_detector_recall函数定义和调用为：</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validate_detector_recall</span><span class="params">(<span class="keyword">char</span> *datacfg, <span class="keyword">char</span> *cfgfile, <span class="keyword">char</span> *weightfile)</span></span></span><br><span class="line"><span class="function"><span class="title">validate_detector_recall</span><span class="params">(datacfg, cfg, weights)</span></span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改validate_detector_recall的初始化代码</li>
</ol>
<p>修改前：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> *plist = get_paths(<span class="string">"data/voc.2007.test"</span>);</span><br><span class="line"><span class="keyword">char</span> **paths = (<span class="keyword">char</span> **)list_to_array(plist);</span><br></pre></td></tr></table></figure></p>
<p>修改后：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> *options = read_data_cfg(datacfg);</span><br><span class="line"><span class="keyword">char</span> *valid_images = option_find_str(options, <span class="string">"valid"</span>, <span class="string">"/home/blean/VOC/validateImagePath.txt"</span>);</span><br><span class="line"><span class="built_in">list</span> *plist = get_paths(valid_images);</span><br><span class="line"><span class="keyword">char</span> **paths = (<span class="keyword">char</span> **)list_to_array(plist);</span><br></pre></td></tr></table></figure></p>
<ol start="3">
<li>修改结束后需要重新编译darknet主程序，命令如下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>
<p>在完成上述修改后即可使用darknet的recall命令进行评估测试并输出结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./darknet detector recall cfg/voc.data cfg/yolov2-voc.cfg backup/yolov2-voc_50000.weights -out drowning_recall.txt</span><br></pre></td></tr></table></figure>
<p>输出的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Number Correct Total 	Rps/Img 	IOU 		Recall </span><br><span class="line"> 0     1     1	RPs/Img: 23.00	IOU: 71.42%	Recall:100.00%</span><br><span class="line"> 1     2     2	RPs/Img: 19.00	IOU: 66.04%	Recall:100.00%</span><br><span class="line"> 2     3     3	RPs/Img: 31.00	IOU: 65.52%	Recall:100.00%</span><br><span class="line"> 3     4     4	RPs/Img: 31.75	IOU: 65.22%	Recall:100.00%</span><br><span class="line"> 4     5     5	RPs/Img: 29.40	IOU: 65.55%	Recall:100.00%</span><br><span class="line"> 5     6     6	RPs/Img: 29.67	IOU: 67.34%	Recall:100.00%</span><br><span class="line"> 6     6     7	RPs/Img: 32.00	IOU: 60.25%	Recall:85.71%</span><br><span class="line"> 7     7     8	RPs/Img: 35.12	IOU: 59.75%	Recall:87.50%</span><br><span class="line"> 8     8     9	RPs/Img: 33.11	IOU: 60.55%	Recall:88.89%</span><br><span class="line"> 9     8    10	RPs/Img: 33.20	IOU: 59.48%	Recall:80.00%</span><br><span class="line">10     9    11	RPs/Img: 34.00	IOU: 59.27%	Recall:81.82%</span><br><span class="line">11    10    12	RPs/Img: 33.00	IOU: 59.65%	Recall:83.33%</span><br><span class="line">12    11    13	RPs/Img: 32.00	IOU: 60.33%	Recall:84.62%</span><br><span class="line">13    12    14	RPs/Img: 30.64	IOU: 60.85%	Recall:85.71%</span><br><span class="line">14    12    14	RPs/Img: 29.60	IOU: 60.85%	Recall:85.71%</span><br><span class="line">15    13    15	RPs/Img: 29.62	IOU: 61.41%	Recall:86.67%</span><br></pre></td></tr></table></figure>
<p>其中各项参数的解释如下：</p>
<ul>
<li>Number表示处理到第几张图片。</li>
<li>Correct表示正确的识别出了多少bbox（即标记目标物体的方框）。这个值算出来的步骤是这样的，丢进网络一张图片，网络会预测出很多bbox，每个bbox都有其置信概率，概率大于threshold的bbox与实际的bbox，也就是labels中txt的内容计算IOU，找出IOU最大的bbox，如果这个最大值大于预设的IOU的threshold，那么correct加1。</li>
<li>Total表示实际有多少个bbox。</li>
<li>Rps/img表示平均每个图片会预测出来多少个bbox。</li>
<li>IOU： 这个是预测出的bbox和实际标注的bbox的交集 除以 他们的并集。显然，这个数值越大，说明预测的结果越好。</li>
<li>Recall召回率， 意思是检测出物体的个数 除以 标注的所有物体个数。通过代码我们也能看出来就是Correct除以Total的值。</li>
</ul>
<p>可以从最后一条代表处理了全部验证集的统计结果看出，经过验证集的检验，训练得出的模型识别目标物体的总正确率大致在86%左右，可以说训练效果较为理想。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>YOLO-darknet官网<br><a href="https://pjreddie.com/darknet/yolo/" target="_blank" rel="noopener">https://pjreddie.com/darknet/yolo/</a></li>
<li>YOLO训练自己的数据集：<br><a href="https://blog.csdn.net/qq_34484472/article/details/73135354" target="_blank" rel="noopener">https://blog.csdn.net/qq_34484472/article/details/73135354</a></li>
<li>YOLOv3批量测试图片并保存在自定义文件夹下：<br><a href="https://blog.csdn.net/mieleizhi0522/article/details/79989754" target="_blank" rel="noopener">https://blog.csdn.net/mieleizhi0522/article/details/79989754</a></li>
<li>Darknet 评估训练好的网络的性能：<br><a href="https://blog.csdn.net/mieleizhi0522/article/details/79989754" target="_blank" rel="noopener">https://blog.csdn.net/mieleizhi0522/article/details/79989754</a></li>
<li>Environment-Configuration-for-Yolo-darknet | NeXT （就是之前的那篇笔记）<br><a href="https://lmy98129.github.io/2018/02/20/Environment-Configuration-for-Yolo-darknet">https://lmy98129.github.io/2018/02/20/Environment-Configuration-for-Yolo-darknet</a></li>
</ol>
<blockquote>
<p>最后，这是本站的第八篇正式发文，感谢阅读。<br>如有意见和建议，欢迎通过首页的联系方式联系作者，<br>本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。</p>
</blockquote>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Reading Report on Relation-Shape Convolutional Neural Network for Point Cloud Analysis in CVPR2019</title>
    <url>/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/</url>
    <content><![CDATA[<p>本文是2019年5月《模式识别》专业课的读书报告</p>
<p>主要内容是在阅读中国科学院自动化所模式识别国家重点实验室刘永成团队的CVPR2019会议论文（oral）<br>《用于3D点云分析的形状关系卷积神经网络》过程中的个人理解、要点摘录以及收获和感悟。</p>
<a id="more"></a>
<blockquote>
<p>中文标题：CVPR2019《Relation-Shape Convolutional Neural Network for Point Cloud Analysis》读书报告</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>该论文《Relation-Shape Convolutional Neural Network for Point Cloud Analysis》，即《用于3D点云分析的形状关系卷积神经网络》，是由中国科学院自动化所模式识别国家重点实验室15级在读博士刘永成团队提交的CVPR 2019会议论文。该论文现已入选并拟为会议现场演讲论文。作为IEEE主办的计算机视觉、模式识别和人工智能领域的国际顶级会议，CVPR 2019将于今年6月16~20日在美国加州召开。</p>
<p>论文提出了一种根据局部点之间的几何拓扑关系作为特征进行处理的新型卷积神经网络，从而实现对3D点云的模式识别。基于针对传统2D图像的CNN，该论文提出了扩展到3D点云的Relation-Shape CNN。该方法对¬局部点云子集选取中心点作为采样点，通过对采样点与其他点的几何关系让卷积层从几何关系向量中学习一个高维的映射函数，从而得到了能够对3D点的空间分布进行显示推理的卷积结果，进而有区分度地反映其隐含的3D形状。</p>
<p>Relation-Shape CNN方法在三个主流的点云分析任务上均实现了行业内领先的优秀性能。除此之外，该方法不仅可以从点云中学习3D形状特征，还能从点云的2D投影空间中推理3D形状特征。</p>
<p>笔者（注：以下代表本读书报告作者）看到，近年来，卷积神经网络已经在2D图像这类规则数据的模式识别处理中获得了相当大的成功，而该论文在将卷积神经网络网络扩展到3D点云这类不规则数据的研究方面走出了一大步。</p>
<h3 id="问题提出"><a href="#问题提出" class="headerlink" title="问题提出"></a>问题提出</h3><p>目前，在3D点云模式识别领域的很多研究工作是集中在将卷积神经网络在识别现有网格数据（例如图像）的成功模式复制到3D点云上，例如将3D点云转化为一般的体元（voxel）或者转化为简单的多视图平面图像等。这些方法都将导致3D点云内在蕴含的复杂几何细节信息的损失。</p>
<p>对此，笔者也十分肯定，传统的2D图像与3D点云的区别相当巨大，在2D图像上的旧有模式识别方法往往不能很好地适合对3D点云的处理。<br>为了直接处理点云数据，PointNet对每个点进行学习并从全局角度提取最终的特征，这种方式却忽略了局部结构，而局部结构已经被证明在图像卷积网络中提取高维度视觉特征的过程中的重要性。为了解决这个问题，一些基于取样和体元（例如Superpoint）的方法被提了出来，它们在一定程度上建立在全局到局部的语义关系的学习上。但是这些方法十分依赖于对于局部点集的高效感知学习，这是十分难以达成的。</p>
<p>笔者在自己个人的实践过程中，也感受到了这一点，对于一类具体的模式识别问题，单纯地依赖现有方法框架的学习效率和训练得出模型的识别效果，其最终的整体性能是相当差的，因为这忽略了很多重要的先验知识，这些先验知识能够通过指导对数据结构、网络结构上的改进来提升整体性能。<br>总体上，对于一组3D点云P的识别目前存在着3类挑战：</p>
<ol>
<li>P往往是无序的，因此需要卷积得到的表征能够满足置换排列的不变性，在笔者看来，也就是说对于某一种特定的排列方式应当能够在其出现在整组点云的任意位置上的情况下被识别出来，也就是对点的输入顺序不敏感。</li>
<li>P是分布在3D空间中的，因此需要卷积得到的表征能够对于例如旋转、偏移变换等常见的几何刚体变换具有语义上的不变性。</li>
<li>P事实上组成了一个特定形状，因此，卷积网络需要具备有区分度的“形状意识”，笔者认为这正意味着需要从各点之间的几何关系推理出其表示的3D形状这一能力，因此才引出了论文的主要思路：根据局部点之间的几何拓扑关系作为特征进行学习的方法。</li>
</ol>
<p>论文表示：问题（1）已经能够通过对称函数很好地解决，然而问题（2）、（3）都需要进行全新的研究工作。这一项研究工作的主要目的就是将一般的2D网格CNN扩展到能够解决以上问题的特殊结构上。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-1.png" alt="pic-1"></p>
<center>图1 点云与点云所表示的潜在形状之间的关系</center>

<p>对于图1，笔者看到，论文根据该图能够说明只有讨论局部的点与点之间的几何拓扑关系，才能够获取3D点云所表示的各个局部所代表的潜在形状关系。<br>综上所述，笔者认为，正如论文在问题提出中的思路，基于关键的先验知识和对于当前问题研究总体进展的把握，使用一定的数学、计算理论工具对系统结构进行改进，是当前研究工作的重要思路。</p>
<h3 id="论文成果"><a href="#论文成果" class="headerlink" title="论文成果"></a>论文成果</h3><p>论文提出了一种根据局部点之间的几何拓扑关系作为特征进行处理的新型卷积神经网络RS-CNN（Relation-Shape Convolutional Neural Network）。该方法的关键在于对点之间的几何拓扑关系进行学习，这种学习方式能够对3D点云中存在内在意义的形状信息进行编码。</p>
<p>特别地，对于整体点云的每个局部的卷积都通过选取该局部点云的中心采样点和其邻居点集构建。然后，这一卷积权重结果被用于学习一般认为是低维的采样点与邻居点集之间的关系在高维度上的表征。通过这一卷积方式，我们就能够获取到对点所在的空间层面的、具有明确推理过程的感知表征。这些感知表征有区分度地反映了特定点集模式构成的潜在形状，从而实现了形状的感知。不仅如此，这些表征能够在各种几何先验知识条件下，包括置换排列的不变性、对于网格数据变换的鲁棒性（例如，旋转和偏移等）。</p>
<p>通过将这些卷积作为基本操作，我们能够构建出一个多层的类似于CNN的深度神经网络架构：RS-CNN。这一架构能够实现在点云分析的过程中进行语义形状感知学习。</p>
<p>之后，论文总结了目前取得的关键成果：</p>
<ul>
<li>提出了一个基于形状学习的新型卷积操作：形状关系卷积。它能够明确地对点之间的几何关系的进行编码，从而得到了良好的形状感知能力和鲁棒性。</li>
<li>提出了一个通过多层形状关系卷积构建的神经网络架构RS-CNN。它能够扩展传统的CNN到为实现点云的语义形状感知学习而构造的特殊架构上。</li>
<li>通过3种具有挑战性的性能评测以及经验性、理论性的分析，展示RS-CNN达到了行业领先的优秀性能。</li>
</ul>
<p>论文还在接下来的相关研究（Related Work）中提到了取得以上成果所基于的行业内目前的研究成果。例如：</p>
<ul>
<li>基于3D到2D视图变换的方法、3D形状向3D表面网格变换的方法。</li>
<li>对3D点云使用深度学习。例如PointNet、PointNet++系列框架，后者开始注意到对于局部结构特征的学习，此外还有Superpoint将点云的部分转化为几何体元，Graph Convolution Network将局部的点云绘制成平面图像进行处理，但以上研究均未考虑到局部点云中点之间的3D空间关系，还有一些将点云映射为高维空间以适应经典CNN应用的研究、以及一些对点云的几何特性例如排列不变性、3D变换的鲁棒性的研究。</li>
<li>关系学习。通过对关系的学习进而得到数据相关的权重的研究、尤其是在3D点云中对于点之间关系的学习在业界已经获得了相当的进展，但大部分研究均没有考虑到局部点之间关系的学习，这也为本论文提出的方法提供了思路。</li>
</ul>
<p>笔者看到，论文作者的研究方向选取是建立在对大量业内相关研究的深刻理解和分析上的。若没有对3D点云分析的整体研究方向具有如此深刻的把握，基本上很难在该领域选取到一个较好的研究方向。</p>
<p>这也可以在作者的GitHub仓库上看出，作者建立了一个GitHub仓库，收集了自2017年以来的点云分析的重要研究文献资料（笔者注：地址为 <a href="https://github.com/Yochengliu/awesome-point-cloud-analysis" target="_blank" rel="noopener">https://github.com/Yochengliu/awesome-point-cloud-analysis</a> ）。这说明了研读相关领域内的重要文献是科研工作的重要组成部分之一，而科研工作取得的成果也基于对前人研究的分析和思考。</p>
<h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>在算法实现方面，论文首先讨论了形状感知的表征学习。论文指出，点云分析的关键就在于有区分度地表示出具有鲁棒性的潜在形状。在这里我们使用基于上下文的形状感知表征学习，通过将传统的网格CNN扩展到一种新型的形状关系卷积（RS-Conv）上来达成这一目的。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-2.png" alt="pic-2"></p>
<center>图2 RS-Conv的概要图</center>

<p>对于图2，论文解释如下：对于中心样本点$x_i$每一个邻居点$x_j$的卷积权重$w_{ij}$，都通过对在预设定的几何关系向量$h_{ij}$（即中心样本点$x_i$与每一个邻居点$x_j$构成的向量）得到的映射Μ中转换得到。</p>
<p>通过这种方式，感知卷积表征 $\sigma(A({ w_{ij}∙f_{x_j},∀x_j }))$（此处的 $f_{x_j}$ 为对于 $x_j$ 的一个特征向量，事实上就是 $x_j$ 的坐标位置等信息）就能够具有表现力地推理出每个点的空间层级，最终得到了高判别度的形状感知能力。正如在图像CNN中那样，进一步的通道数提升的映射被用来产生一个更加强大的形状感知表征。</p>
<p>笔者认为，如图中所示，通过通道数逐步提高的多层感知机（MLP，事实上可以认为是卷积核大小与输入大小相同的CNN）的处理，能够从低维度提取更多的细节特征到更高的维度，从而更加能够更好地识别局部点集构成的潜在形状特征。<br>论文进一步介绍了形状关系卷积的算法推理过程，如下所示。</p>
<h4 id="建模"><a href="#建模" class="headerlink" title="建模"></a>建模</h4><p>为了实现局部卷积的归纳学习，我们将局部点云子集$P_{sub}⊂\mathbb{R}^3$建模为一个建模为一个球形邻域，该邻域的中心点为采样点$x_i$，其余点作为$x_i$的邻居点$x_j∈N(x_i )$。在该邻域上，我们构建了一个一般性的卷积操作方法：</p>
<p>$$<br>\begin{equation}<br>f_{P_{sub}}=\sigma(A({ T(f_{x_j}),∀x_j })),d_{ij} &lt; r,∀x_j∈N(x_i)<br>\end{equation}<br>$$</p>
<p>笔者看到，以上一般卷积操作方法中特征变换函数Τ事实上就是神经元模型中的判别函数（最简单的形式即权重向量与特征向量的点乘），该操作方法也同样具有非线性的激活函数，而与普通的神经元不同的是：聚合函数函数$A$，这一函数应当是论文为了能够将整个局部邻域的特征进行聚合从而生成一份单一特征的，从而满足将点云格式的特征转码为经典CNN能够处理的特征格式。</p>
<h4 id="经典CNN的限制"><a href="#经典CNN的限制" class="headerlink" title="经典CNN的限制"></a>经典CNN的限制</h4><p>在经典的网格CNN中，特征变换函数实现为：</p>
<p>$$Τ(f_{x_j} )=w_j∙f_{x_j}$$</p>
<p>其中$w_j$为学习得出的卷积权重，$f_{x_j}$为对于点$x_j$的一个特征向量，点乘符号 ∙ 表示按元素相乘。该卷积方法在点云数据上直接使用会存在两个缺陷：1）由于$w_j$不与其他点共享参数，因此该卷积对于输入点集不具有置换排列不变性。2）在反向传播中，$w_j$的梯度仅与孤立点$x_j$相关，因此该卷积难以捕捉到点间关系。</p>
<h4 id="转换：基于关系的学习"><a href="#转换：基于关系的学习" class="headerlink" title="转换：基于关系的学习"></a>转换：基于关系的学习</h4><p>为了克服上述问题，我们将卷积转换为从几何关系中学习。在方法上，我们将$w_j$替换为$w_{ij}$，并让$w_{ij}$从中心样本点$x_i$与每一个邻居点$x_j$构成的几何关系向量$h_{ij}$中学习一个高维的映射函数$M$。该过程可以描述为：</p>
<p>$$<br>\begin{equation}<br>Τ(f_{x_j})=w_{ij} ∙ f_{x_j}=M(h_{ij})∙f_{x_j}<br>\end{equation}<br>$$</p>
<p>其中，映射函数$M$的目标是从几何先验中学习一个高维的、有表现力的关系表达，以编码 3D 点集的空间布局，这里我们使用共享的多层感知机（MLP）实现映射函数$M$。以这种方式，$w_j$巧妙地转换为$w_{ij}$，它的梯度由预定义的几何先验关系向量$h_{ij}$决定，且与点$x_i$和$x_j$均几何相关。于是，公式$(1)$中的$f_{P_{sub}}$变为：</p>
<p>$$<br>\begin{equation}<br>f_{P_{sub}}=σ(A({M(h_{ij} )∙f_{x_j},∀x_j }))<br>\end{equation}<br>$$</p>
<p>该卷积方法聚集了点$x_i$和所有邻居点$x_j∈N(x_i)$之间的几何关系表达，因此可以对3D 点的空间分布进行显式的推理，进而有区分力的反映其隐含的 3D 形状。其中几何先验$h_{ij}$可以灵活设置，因为使用多层感知机实现的映射函数M能将$h_{ij}$映射为高维的关系向量，以实现与特征$f_{x_j}$进行通道对齐。</p>
<p>笔者看到，论文所描述的共享参数就是几何先验性地让$w_{ij}$从中心样本点$x_i$与每一个邻居点$x_j$构成的几何关系向量$h_{ij}$之中的中心样本点$x_i$。通过$w_{ij}$描述$x_i$与每一个邻居点$x_j$的关系而非$x_j$这孤立一点的权重，将局部点集所描述的整个潜在形状用$x_i$这一共享参数进行相对位置的描述，而非直接使用每一个邻居点$x_j$的绝对位置进行描述，从而从本质上赋予了这一方法置换排列不变性。</p>
<h4 id="通道数提升的映射"><a href="#通道数提升的映射" class="headerlink" title="通道数提升的映射"></a>通道数提升的映射</h4><p>从公式$(3)$中可以看出，$f_{P_{sub}}$对应的通道数量是等于$f_{x_j}$特征向量的。这与经典的图像CNN中，为了能够获得更加抽象的表征而降低图像分辨率，从而增加通道数量的做法不同。因此，如图2的中间部分所示，我们添加了一个基于多层感知机的通道数提升映射来实现这一方法。</p>
<p>之后，论文介绍了RS-Conv这一新型卷积操作的4个特性：</p>
<ul>
<li>置换排列不变性。在映射函数$M(h_{ij})$中，低维的关系$h$和多层感知机$M$都能够实现对点输入顺序的置换排列不变性，因为它们描述的是样本点与邻居点的相对位置关系，对输入顺序不敏感。再加之聚合函数$A$使用的是对称函数，能够在整体上实现置换排列不变性。</li>
<li>对于网格变换的鲁棒性。因为低维的关系$h$描述的是基于3D欧式距离的相对位置关系，因此对于旋转、平移等变换操作具有鲁棒性。</li>
<li>点间关系的互动。RS-Conv的方法创新性地提出了不是对一个孤立的点进行学习而是对点间关系进行学习。</li>
<li>权重的共享，在该方法中这是一个关键的特性，通过对不同的特定点集使用相同的学习函数实现更好地鲁棒性并降低学习的复杂度。在公式$(3)$中，对称函数$A$、共享的多层感知机$M$、以及预先设定的几何先验$h$都独立于特定的点集结构的制约，满足了这一特性。</li>
</ul>
<p>论文进一步讨论了RS-Conv在经典2D网格卷积方面进行应用的能力。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-3.png" alt="pic-3"></p>
<center>图3 使用3×3卷积核的经典2D网格卷积示意图</center>

<p>如图3所示，在2D网格卷积中我们可以注意到，$w_j$总是隐含着$x_i$与$x_j$的一个固定的位置关系，也就是说，$w_j$在学习过程中同样和在RS-Conv一样受到了相对位置关系的限制，实际上编码了一种规则的网格关系。因此，论文提出的形状关系卷积方法具有通用性，同样也能够建模经典的2D网格卷积。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-4.png" alt="pic-4"></p>
<center>图4 应用于点云分类（a）和点云物体分割（b）的RS-CNN结构。<br><br>其中N为点云中点的总数，C为通道数。<br></center>

<p>不仅如此，论文也提到了基于RS-Conv构成的多层卷积神经网络RS-CNN的结构，可以说与经典的CNN极为类似。如图4所示，在点云分类中，由于需要输出对于每一种分类的预测概率，使用了若干层全连接层；而在点云物体分割中，和经典的图像语义分割一样，对于每一层都进行的大范围的连接，从而对多层学习到的表征成功地通过特征传播方法（feature propagation）进行上采样（笔者注：unsample，上采样的作用是能够将特征点还原到源输入格式的空间，例如像素空间或3D点空间，从而达到像素、3D点级别的预测），完成逐个像素或点的预测分割操作。</p>
<p>最后，论文提到RS-Conv和RS-CNN的一些实现细节。</p>
<ul>
<li>RS-Conv的实现。使用的激活函数依然是经典的ReLU函数。在映射函数M中，使用了三层的共享MLP来实现随机连续的映射。低纬度关系h_ij通过10通道的向量定义，格式为（3D欧式距离, $x_i-x_j$, $x_i$，$x_j$），通道数1+3+3+3=10。通道数提升映射使用了单层的MLP实现。而每一层MLP都使用了批归一化（笔者注：batch normalization，能够将每次输入的数据分布进行规范化，让其均匀分布在当前层上，从而加速神经网络的训练速度、防止过拟合）。</li>
<li>用于点云分析的RS-CNN。采样中心点一般选取在距离点云原点最远的的点。在局部点云邻域中，固定数目的邻居点作为一个批次batch进行卷积操作，同时也采取归一化操作来保持领域的中心不变。为了能够实现高效的学习，我们强制RS-CNN学习高于3种不同尺度（笔者注：一般是不同范围上的，虽然邻域本身的球型半径相同，但是学习时选取的领域子集范围可以不同）的邻域关系，但是学习结束之后由于使用的是同一组MLP，因此分享同一份权重，因此与多尺度分组学习（Multi-Scale Grouping, MSG）针对不同尺度生成的多份权重不同。RS-CNN基于PyTorch实现，具体参数此处省略。</li>
</ul>
<h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>为了验证RS-CNN的有效性，论文作者在在主流的点云分析任务上进行了测试，包括点云分类、部件分割和法向预测。</p>
<p>ModelNet40上的点云分类结果如表1所示，在仅使用3D坐标和1k个稀疏点作为输入的情况下，RS-CNN仍然实现了最佳分类效果（93.6%的精度）。<br>同样，如图5所示，RS-CNN在给出点数不断随机减少的过程中，分类的准确率下降速度是同类方法中最慢的。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/table-1.png" alt="table-1"></p>
<center>表1 ModelNet40上的形状分类测试结果</center>


<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-5.png" alt="pic-5"></p>
<center>图5 3D点云的点数随机减少过程中不同方法的准确率变化</center>

<p>ShapeNet part上的部件分割效果示意图如图6所示。如表2所示，尽管点云所形成的形状多种多样，并且很容易产生混淆，RS-CNN依然可以准确地将部件分割出来。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/table-2.png" alt="table-2"></p>
<center>表2 ShapeNet part上的形状部件分割测试结果</center>

<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-6.png" alt="pic-6"></p>
<center>图6 形状部件分割测试效果</center>

<p>ModelNet40上的法向预测结果如图7所示。与PointNet以及PointNet++相比，RS-CNN可以取得更加准确的法向预测结果，偏移程度明显较其他模型更小。尽管如此，论文表示，RS-CNN仍然难以有效推理棘手的形状，比如旋转楼梯（可以从图中看出偏移程度较大）以及错综复杂的植物。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-7.png" alt="pic-7"></p>
<center>图7 ModelNet40上的法向预测结果</center>

<p>由于公式（3）中的几何先验$h_{ij}$可以灵活地定义，因此论文在ModelNet40上测试了五个比较直观的例子，结果如表6所示。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/table-6.png" alt="table-6"></p>
<center>表6 不同的几何先验结构对于准确率的影响</center>

<p>可以看到，仅仅使用3D欧式距离作为低维几何关系（model A），RS-CNN依然能够取得92.5%的精度，这是十分令人印象深刻的。而其他的几何先验结构也同样得出了较好的精度。<br>此外，为了测试RS-CNN的几何形状推理能力，我们强制置零某一维的坐标值，即将3D点云投影到2D空间（model E，图9），如表12所示，得到的分类精度均接近92.2。这证明了RS-CNN不仅可以从3D点云中学习3D形状，还能从2D投影空间中推理3D形状。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/pic-8.png" alt="pic-8"></p>
<center>图8 将3D点云投影到XY、XZ、YZ等2D平面上</center>

<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/table-12.png" alt="table-12"></p>
<center>表12 识别3D点云的不同方向2D投影的准确率</center>

<p>为了验证所提出的RS-Conv的鲁棒性，论文设置几何先验$h_{ij}$为3D欧式距离，然后在ModelNet40上进行鲁棒性测试，结果如表7所示。<br>虽然几何关系能够做到旋转不变，但网络初始输入的特征仍然会受到旋转的影响。针对这一问题，我们引入法向将每一个局部点集旋转到以法向和采样点确定的局部坐标系中，实现了旋转不变。但该旋转会给形状识别带来困难，因此分类精度会有所下降。</p>
<p><img src="/2019/06/30/Reading-Report-on-Relation-Shape-Convolutional-Neural-Network-for-Point-Cloud-Analysis-in-CVPR2019/table-7.png" alt="table-7"></p>
<center>表7 通过测试旋转、偏移等操作对于分类精度的影响<br><br>验证论文提出的RS-Conv的鲁棒性<br></center>

<p>其他的测试还有模型简化测试（Ablation Study），对于对称函数A、映射函数M的选取等，RS-CNN在以上测试中均获得了优秀的结果。此处由于篇幅限制，暂且省略。<br>综上，笔者看到，RS-CNN以其具有创新性的对于局部点云的点间几何关系的先验知识作为特征进行学习的优良特性，在使用了类似于经典CNN的网络结构的前提下，依然能够获得相当优良的测试结果。这体现了先验知识作为另一种研究方向的关键作用。</p>
<h3 id="收获体会"><a href="#收获体会" class="headerlink" title="收获体会"></a>收获体会</h3><p>阅毕全文，笔者看到，论文不同于以往研究中对于深度神经网络的层数等结构特征进行改造，而考虑了3D点云内在的几何先验知识，从而成功地针对这些几何先验知识构造出了新的卷积操作形状关系卷积RS-Conv。而且，使用这一全新卷积操作的、类似经典CNN结构的RS-CNN，能够在实验性能对比上超越相当多的对于深度神经网络结构改造的方法。</p>
<p>可以说，这是一次先验知识本质研究相对于经验性结构改造的成功。也正因为该方法在结构上与经典CNN类似，在一定程度上使得对于深度神经网络接触不是特别深入的笔者，在阅读论文过程中遇到的理解上的障碍相对较小。通过阅读本篇论文，笔者有以下的收获体会：</p>
<ul>
<li><p>一种全新的研究思路。笔者认为，论文专注于研究问题中先验知识而非经验性地改造网络结构的思路，对于其他在现有深度神经网络框架下基于复杂不规则数据问题的适配和改进工作，具有很大的启发性。本论文以3D点云特有的几何先验知识为切入点，根据先验知识的指导对经典卷积操作的进行合理改进，在使用类似经典CNN的网络结构的前提下，取得了业界领先的性能测试结果，这是一个基于先验知识改进神经网络基本结构的全新研究思路。</p>
</li>
<li><p>模式识别、深度学习相关论文的基本格式和专业术语。在阅读过程中，笔者进一步巩固了之前已经了解的卷积层、全连接层、多层感知机（MLP）、批归一化（batch normalization）、激活函数、判别函数等专业术语的基本原理和功能作用，并进一步接触了一篇模式识别、深度学习顶级会议论文的基本格式：</p>
<p>1) 简介Introduction提出并解释问题，回顾研究领域内的现有成果，并简要给出自己的方法；<br>2) 相关研究Related Work说明了自己给出的方法是基于哪些现有研究成果；<br>3) 接下来的章节应当具体描述自己给出的方法所用到的数学建模、算法推导、基本结构、特性、实现细节等，全方面地描述这一方法的实现思路；<br>4) 实验测试Experiment通过具体的性能测试结果，图表文结合地来考察该方法的具体性能；<br>5) 结论Conclusion总结上文的要点，通过结论来说明文首简介中提及的内容是得到准确论证的。</p>
</li>
</ul>
<ul>
<li><p>论文写作、排版和文字表达的技巧。在阅读论文的过程中，笔者获得了较好的阅读体验，不存在过多的阅读理解上的障碍，不仅说明了论文本身提出的方法在结构上类似于经典CNN，比较容易理解，而且也说明了作者的论文写作技巧、排版技巧以及文字表达能力是十分优秀的，这也是值得笔者学习的地方。</p>
</li>
<li><p>进一步深入研究的方向。笔者看到，论文仅仅是在类似经典的CNN网络结构上便取得了相当重大的成果，那么是否能够通过对神经网络的结构以及卷积单元的进一步改造从而让该方法的综合性能更上一层楼，便成为了进一步深入研究的方向。</p>
</li>
</ul>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>论文《Relation-Shape Convolutional Neural Network for Point Cloud Analysis》地址：<br><a href="https://arxiv.org/abs/1904.07601" target="_blank" rel="noopener">https://arxiv.org/abs/1904.07601</a></li>
<li>论文作者刘永成的中文分享：<br><a href="https://mp.weixin.qq.com/s/Jso2YZs2NEtMORZsLkrJ5w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Jso2YZs2NEtMORZsLkrJ5w</a></li>
<li>论文作者建立的2017年以来点云分析的重要研究文献资料GitHub仓库：<br><a href="https://github.com/Yochengliu/awesome-point-cloud-analysis" target="_blank" rel="noopener">https://github.com/Yochengliu/awesome-point-cloud-analysis</a></li>
<li>中文解读：<br><a href="http://www.ijiandao.com/2b/baijia/250710.html" target="_blank" rel="noopener">http://www.ijiandao.com/2b/baijia/250710.html</a></li>
</ol>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Training DeepID1 Network for Face Comparison with Google Colab+Tensorflow</title>
    <url>/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/</url>
    <content><![CDATA[<p>本文由2019年6月《软件工程》必修课的课程设计报告的AI部分改编</p>
<p>主要介绍了“员工考勤管理系统”课程设计中的员工人脸打卡子系统<br>该系统使用了Google CoLab提供的在线Tensorflow GPU平台训练得到的DeepID人脸特征提取比对模型，<br>以及基于该模型搭建的Tensorflow+OpenCV+Flask人脸比对Python服务器</p>
<a id="more"></a>
<blockquote>
<p>中文标题：使用Google CoLab+Tensorflow训练DeepID1人脸比对模型</p>
</blockquote>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><ol>
<li><a href="https://colab.research.google.com/drive/1BKcLNYjffhhQEWQErclZMojsjBpTViSq" target="_blank" rel="noopener">Google CoLab</a>（需要访问国外网站的能力）</li>
<li>GitHub（待发布）</li>
</ol>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/deepid.png" alt="deepid"></p>
<center>图1.1 DeepID的网络结构<br>其中DeepID层能够提取出160维特征向量<br><br></center>

<p>DeepID是香港中文大学王晓刚教授团队在CVPR2014上发表的论文《Deep Learning Face Representation from Predicting 10,000 Classes》提出的方法，全称为Deep hidden IDentity feature（DeepID）。</p>
<p>该方法是一种特征提取的算法，对于一个多层卷积-池化网络进行多分类任务训练后，在其中一层中间层DeepID层能够提取出输入的任意人脸图片的160维深层次特征向量（实际上是160x2x60维的特征向量）。</p>
<p>而这种特征提取的能力是面向任意的（需要经过预先裁剪和对齐后的）人脸图像的，因此作者做出了一个形象的比喻：即使是分10000个类，网络也能够有效区分出每个类别的人脸的显著特征（从而通过特征之间的距离，识别出两张人脸是否为同一人）。</p>
<p>因此，这一方法体现出的以下特性，使得我们最终在众多人脸特征提取方法中选取了DeepId:</p>
<ol>
<li>方法实现的<strong>仅需一次训练即可获得的人脸特征提取能力</strong>，十分适合企业员工人脸考勤环境下员工人脸库经常性变动、待对比人脸图像来源较为复杂的应用场景。</li>
<li>方法的<strong>网络结构简单，易于理解和实现。同时，网络层数较少，</strong>相应地也能够减少训练所消耗的时间和硬件资源，便于我们在短周期（8周，AI子系统开发仅一周）的软件工程课程设计开发过程中安排进度。最终，该算法的训练时长在Google CoLab上为50000次/2小时。</li>
<li>方法的<strong>准确率较高</strong>，在Tensorflow的实现+YouTube Aligned Faces数据集上的测试集人脸比对识别准确率能够达到96%。</li>
</ol>
<p>当然，这一方法作为一个2014年提出的方法，（也是DeepID三代中的第一个版本）也存在着一定的缺陷：</p>
<ol>
<li><strong>仅适用于提取图像中的正脸</strong>，也就是通过摄像头正对人脸拍摄的、或者是通过一定图像处理算法重新对齐的人脸。对于侧脸、带有一定歪斜的人脸等日常生活中常见的人脸图像，识别能力大打折扣。<strong>也正因如此，GitHub上DeepID的Tensorflow实现采用了Youtube Aligned Faces数据集，已经做过了人脸对齐的预处理</strong>，用来训练DeepID较为方便。</li>
<li>在实际使用的过程中，笔者发现这一模型对于裁剪得出的人脸图像的<strong>光线明暗、是否佩戴眼镜</strong>等变化是敏感的，只有在光照条件、脸部配饰等状况近似于人脸图像采集时的情况下，才能够被识别为同一人。</li>
</ol>
<p>因此，目前主流的人脸特征比对方法都聚焦在人脸检测阶段的多特征点提取、侧脸特征点的重新对齐、人脸3D模型识别（一个最著名的案例，就是Apple在iPhone上用于FaceID的3D结构光特征点识别方案）等研究方向。<br>至于Google Colab，是谷歌打造的的一个在线深度学习平台，基于Jupyter Notebook+Tensorflow，能够通过简单的配置，使用Google免费提供的云端GPU资源，从而无需本地硬件资源地轻松训练自己的神经网络。在很久之前的一次计设校赛上曾经使用过这一平台，因此本项目也继续使用这个平台对DeepID网络进行训练。</p>
<h3 id="训练环境搭建"><a href="#训练环境搭建" class="headerlink" title="训练环境搭建"></a>训练环境搭建</h3><p>访问 <a href="https://colab.research.google.com，如果没有谷歌账号可以先去注册一个，列表中是已有的Jupyter" target="_blank" rel="noopener">https://colab.research.google.com，如果没有谷歌账号可以先去注册一个，列表中是已有的Jupyter</a> Notebook文件，创建的文件一般会放在Google 云端硬盘的<code>/colab notebook</code>文件夹下。一般是创建Python 3笔记本，</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/colab-1.png" alt="colab"></p>
<center>图2.1 Google Colab的初始界面</center>

<p>Colab的环境初始化结束后，呈现的是经典的jupyter notebook界面，先点击“代码执行程序-更改运行时类型”，将“硬件加速器”从“None”修改为“GPU”，这样就可以<strong>免费使用基于谷歌提供的云端Nvidia GTX Tesla T4 GPU的Tensorflow GPU版本，显存15GB</strong>，比自己笔记本的4G独显性能高多了。</p>
<p><strong>注意！千万不要选择TPU！</strong> </p>
<p>虽然TPU是Google推出的号称Tensorflow专用的GPU平台，但是其训练速度真的难以接受，在下文我会附上GPU和TPU训练DeepID网络时的Tensorboard检测到的数据，足以体现两者之间的性能差异。</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/colab-2.png" alt="colab"></p>
<center>图2.2 在Colab选取GPU<br></center>

<p>之后可以在左侧边栏中，查看文件目录，会发现一个“挂在Google云端硬盘”的选项，点击之后就会生成一个cell。内容大致为<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运行此单元格即可装载您的 Google 云端硬盘。</span></span><br><span class="line"><span class="keyword">from</span> google.colab <span class="keyword">import</span> drive</span><br><span class="line">drive.mount(<span class="string">'/content/drive'</span>)</span><br></pre></td></tr></table></figure></p>
<p>运行之后，会生成一个链接拿到Google 云端硬盘生成的授权码，输入到这个cell中，即可成功挂在你的Google 云硬盘。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Go to this URL <span class="keyword">in</span> a browser: https://accounts.google.com/o/oauth2/auth?....</span><br><span class="line"></span><br><span class="line">Enter your authorization code:</span><br><span class="line">··········</span><br><span class="line">Mounted at /content/drive</span><br></pre></td></tr></table></figure></p>
<p>之所以需要挂载Google云硬盘，是基于这样的考虑：</p>
<p>Google Colab有一个“防挖矿”机制，为了防止自己免费开放的GPU资源被矿工拿来挂机挖矿，Colab会自动回收那些运行了很久或者和网页端断线很久的项目的<strong>所有资源：包括GPU和所有文件</strong>。</p>
<p>因此尽量不要尝试在训练的过程中关闭浏览器，然后等时间到了再次打开浏览器查看结果，很有可能早已训练结束，模型文件已经生成，但是由于Colab的这个机制导致文件被删除。</p>
<p>所以在训练过程中，需要挂载Google 云端硬盘，<strong>将模型文件和训练生成的Tensorboard日志的路径放在云端硬盘里</strong>，就算谷歌回收了资源也能够及时保存。</p>
<p>但是，需要注意的是，<strong>数据集最好不要放在Google 云端硬盘里</strong>，因为网上有人试过了，Colab从Google云端硬盘上获取文件时不是直接读取文件系统，而是发送请求进行文件分块下载的，这个网络IO带来的延迟会极大地拖慢训练的速度。</p>
<p>此外，这个数据集直接上传到Google Colab上的速度也是堪忧。但是，值得称赞的是，<strong>在Colab里直接用Shell命令下载在线的数据集</strong>，速度极快，能够达到15M/s。以下是下载YouTube Aligned Faces数据集的输出，30秒完成~</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/colab-3.png" alt="数据集下载"></p>
<center>图2.3 下载YouTube Aligned Faces数据集的输出</center>

<p>还有一个需要注意的地方，就是Colab上已经装好了Tensorflow 1.14、OpenCV以及matplot、numpy、PIL等深度学习常用的python库，若需要其他库也是直接执行shell命令pip install即可。<strong>这里的Tensorflow 1.14与目前常用的1.x版本相比，在API上有着许多区别</strong>，如果直接复制他人的代码，会出现许多的问题。</p>
<p>笔者也因此几乎是把GitHub上的DeepID实现从头开始添加中文注释和改写API，学到了很多搭建Tensorflow训练框架的相关API用法（例如session、variable和namescope），也算是继续了之前《人工智能》大作业的“注释阅读法”的个人习惯。</p>
<p>以上就是一些搭建Colab环境的注意事项，如果你已经看懂了这些，而且熟悉Jupyter Notebook，就可以开始着手编写训练代码了。</p>
<h3 id="编写训练代码"><a href="#编写训练代码" class="headerlink" title="编写训练代码"></a>编写训练代码</h3><h4 id="下载YouTube-Aligned-Faces数据集"><a href="#下载YouTube-Aligned-Faces数据集" class="headerlink" title="下载YouTube Aligned Faces数据集"></a>下载YouTube Aligned Faces数据集</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载youtube aligned face数据集</span></span><br><span class="line">!wget --http-user=wolftau --http-password=wtal997 http://www.cslab.openu.ac.il/download/wolftau/aligned_images_DB.tar.gz</span><br><span class="line"><span class="comment"># 解压下载的数据集</span></span><br><span class="line">!mkdir -p data</span><br><span class="line">!tar -zxf aligned_images_DB.tar.gz -C Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/data</span><br></pre></td></tr></table></figure>
<h4 id="裁剪数据集图片"><a href="#裁剪数据集图片" class="headerlink" title="裁剪数据集图片"></a>裁剪数据集图片</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  此处开始为DeepID人脸特征提取、比对代码</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  来源为：https://github.com/jinze1994/DeepID1</span></span><br><span class="line"><span class="string">  主要工作：增加了详细中文注释、更新了部分tensorflow2.0的新API</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  crop.py</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  裁剪训练数据集图片，图片已经经过了对齐预处理</span></span><br><span class="line"><span class="string">  所谓对齐就是裁剪到只剩下人脸，且已经事先将带有倾斜的人脸对齐过了</span></span><br><span class="line"><span class="string">  因此此处只需裁剪并缩放到 (55,47) 的像素即可</span></span><br><span class="line"><span class="string">  这样的处理适合被检测对象配合、也就是主动进行识别的场景</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  crop_img_by_half_center</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  从1/4处开始裁剪1/2尺寸的图像并缩放</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crop_img_by_half_center</span><span class="params">(src_file_path, dest_file_path)</span>:</span></span><br><span class="line">    <span class="comment"># 打开图像</span></span><br><span class="line">    im = Image.open(src_file_path)</span><br><span class="line">    <span class="comment"># 获取图像尺寸</span></span><br><span class="line">    x_size, y_size = im.size</span><br><span class="line">    <span class="comment"># 开始裁剪的坐标</span></span><br><span class="line">    start_point_xy = x_size / <span class="number">4</span></span><br><span class="line">    <span class="comment"># 裁剪结束时的坐标</span></span><br><span class="line">    end_point_xy   = x_size / <span class="number">4</span> + x_size / <span class="number">2</span></span><br><span class="line">    <span class="comment"># 生成方形框</span></span><br><span class="line">    box = (start_point_xy, start_point_xy, end_point_xy, end_point_xy)</span><br><span class="line">    <span class="comment"># 裁剪</span></span><br><span class="line">    new_im = im.crop(box)</span><br><span class="line">    <span class="comment"># 缩放为（55，47）</span></span><br><span class="line">    new_new_im = new_im.resize((<span class="number">47</span>,<span class="number">55</span>))</span><br><span class="line">    <span class="comment"># 保存</span></span><br><span class="line">    new_new_im.save(dest_file_path)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  walk_through_the_folder_for_crop</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  遍历数据集文件夹，进行图像的处理，生成目标文件夹</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">walk_through_the_folder_for_crop</span><span class="params">(aligned_db_folder, result_folder)</span>:</span></span><br><span class="line">    <span class="comment"># 若不存在目标文件夹，新建一个</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(result_folder):</span><br><span class="line">        os.mkdir(result_folder)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开每一个youtube人物文件夹</span></span><br><span class="line">    <span class="keyword">for</span> people_folder <span class="keyword">in</span> os.listdir(aligned_db_folder):</span><br><span class="line">        src_people_path = aligned_db_folder + people_folder + <span class="string">'/'</span></span><br><span class="line">        dest_people_path = result_folder + people_folder + <span class="string">'/'</span></span><br><span class="line">        <span class="comment"># 创建每一个人物文件夹对应的目标文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest_people_path):</span><br><span class="line">            os.mkdir(dest_people_path)</span><br><span class="line">        <span class="comment"># 打开每一个人物文件夹下的视频文件夹</span></span><br><span class="line">        <span class="keyword">for</span> video_folder <span class="keyword">in</span> os.listdir(src_people_path):</span><br><span class="line">            src_video_path = src_people_path + video_folder + <span class="string">'/'</span></span><br><span class="line">            dest_video_path = dest_people_path + video_folder + <span class="string">'/'</span></span><br><span class="line">            <span class="comment"># 创建每一个视频文件夹对应的目标文件夹 </span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dest_video_path):</span><br><span class="line">                os.mkdir(dest_video_path)</span><br><span class="line">            <span class="comment"># 对于每一个视频文件夹下的图片文件，进行处理</span></span><br><span class="line">            <span class="keyword">for</span> img_file <span class="keyword">in</span> os.listdir(src_video_path):</span><br><span class="line">                src_img_path = src_video_path + img_file</span><br><span class="line">                dest_img_path = dest_video_path + img_file</span><br><span class="line">                crop_img_by_half_center(src_img_path, dest_img_path)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  裁剪模块的主程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 数据集路径和目标文件夹路径</span></span><br><span class="line">    aligned_db_folder = <span class="string">"data/aligned_images_DB"</span></span><br><span class="line">    result_folder = <span class="string">"data/crop_images_DB"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> aligned_db_folder.endswith(<span class="string">'/'</span>):</span><br><span class="line">        aligned_db_folder += <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> result_folder.endswith(<span class="string">'/'</span>):</span><br><span class="line">        result_folder += <span class="string">'/'</span></span><br><span class="line">    <span class="comment"># 开始处理</span></span><br><span class="line">    walk_through_the_folder_for_crop(aligned_db_folder, result_folder)</span><br></pre></td></tr></table></figure>
<h4 id="分割数据集为训练集、验证集和测试集"><a href="#分割数据集为训练集、验证集和测试集" class="headerlink" title="分割数据集为训练集、验证集和测试集"></a>分割数据集为训练集、验证集和测试集</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  split.py</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   对剪裁后的数据集文件按照 8:1:1 的规模进行切分，分别作为训练集、验证集和测试集。</span></span><br><span class="line"><span class="string">   每个人保留固定数目的图片（100张）进行训练。</span></span><br><span class="line"><span class="string">   为生成测试集，对每个人构造 5 对同一个人的图片 pair，再构造 5 对不同人的图片 pair，作为测试集。</span></span><br><span class="line"><span class="string">   一个pair作为每次测试时输入的组合，用来测试同一个人是否能正确匹配、不同人是否能够分出不同的人脸比对效果</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  fatch_pics_for_one_user</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  获取一个youtube用户的所有图片</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fatch_pics_for_one_user</span><span class="params">(people_path)</span>:</span></span><br><span class="line">    people_imgs = []</span><br><span class="line">    <span class="comment"># 从文件夹中遍历</span></span><br><span class="line">    <span class="keyword">for</span> video_folder <span class="keyword">in</span> os.listdir(people_path):</span><br><span class="line">        <span class="keyword">for</span> video_file_name <span class="keyword">in</span> os.listdir(os.path.join(people_path, video_folder)):</span><br><span class="line">            people_imgs.append(os.path.join(people_path, video_folder, video_file_name))</span><br><span class="line">    random.shuffle(people_imgs)</span><br><span class="line">    <span class="keyword">return</span> people_imgs</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  build_dataset</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  创建训练集、验证集和测试集</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(src_folder)</span>:</span></span><br><span class="line">    <span class="comment"># 总人数，总图片张数</span></span><br><span class="line">    total_people, total_picture = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 测试用户列表、验证集、训练集</span></span><br><span class="line">    test_people, valid_set, train_set = [], [], []</span><br><span class="line">    <span class="comment"># 标签数量</span></span><br><span class="line">    label = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用户文件夹遍历</span></span><br><span class="line">    <span class="keyword">for</span> people_folder <span class="keyword">in</span> os.listdir(src_folder):</span><br><span class="line">        <span class="comment"># 获取一个youtube用户的所有图片</span></span><br><span class="line">        people_imgs = fatch_pics_for_one_user(os.path.join(src_folder, people_folder))</span><br><span class="line">        total_people += <span class="number">1</span></span><br><span class="line">        total_picture += len(people_imgs)</span><br><span class="line">        <span class="comment"># 若数量在100张以内，则全部放入测试用户列表</span></span><br><span class="line">        <span class="comment"># 保证测试集中的用户不会出现在训练集和验证集中</span></span><br><span class="line">        <span class="keyword">if</span> len(people_imgs) &lt; <span class="number">100</span>:</span><br><span class="line">            test_people.append(people_imgs)</span><br><span class="line">        <span class="comment"># 否则分割到验证集和训练集中，1:9</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            valid_set += zip(people_imgs[:<span class="number">10</span>], [label]*<span class="number">10</span>)</span><br><span class="line">            train_set += zip(people_imgs[<span class="number">10</span>:<span class="number">100</span>], [label]*<span class="number">90</span>)</span><br><span class="line">            label += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 测试集</span></span><br><span class="line">    test_set = []</span><br><span class="line">    <span class="comment"># 从测试用户列表中，构造5对同一个人的照片、5对不同人的照片</span></span><br><span class="line">    <span class="keyword">for</span> i, people_imgs <span class="keyword">in</span> enumerate(test_people):</span><br><span class="line">        <span class="comment"># 5对同一个人的照片</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            same_pair = random.sample(people_imgs, <span class="number">2</span>)</span><br><span class="line">            test_set.append((same_pair[<span class="number">0</span>], same_pair[<span class="number">1</span>], <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># 5对不同人的照片</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span> j == i:</span><br><span class="line">                j = random.randint(<span class="number">0</span>, len(test_people)<span class="number">-1</span>)</span><br><span class="line">            test_set.append((random.choice(test_people[i]), random.choice(test_people[j]), <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打乱各个数据集的顺序</span></span><br><span class="line">    random.shuffle(test_set)</span><br><span class="line">    random.shuffle(valid_set)</span><br><span class="line">    random.shuffle(train_set)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出各数据集的统计信息</span></span><br><span class="line">    print(<span class="string">'\tpeople\tpicture'</span>)</span><br><span class="line">    print(<span class="string">'total:\t%6d\t%7d'</span> % (total_people, total_picture))</span><br><span class="line">    print(<span class="string">'test:\t%6d\t%7d'</span> % (len(test_people), len(test_set)))</span><br><span class="line">    print(<span class="string">'valid:\t%6d\t%7d'</span> % (label, len(valid_set)))</span><br><span class="line">    print(<span class="string">'train:\t%6d\t%7d'</span> % (label, len(train_set)))</span><br><span class="line">    <span class="keyword">return</span> test_set, valid_set, train_set</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  set_to_csv_file</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  保存到csv文件中</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_to_csv_file</span><span class="params">(data_set, file_name)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_name, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data_set:</span><br><span class="line">            print(<span class="string">" "</span>.join(map(str, item)), file=f)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  数据集切分模块的主程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    random.seed(<span class="number">7</span>)</span><br><span class="line">    <span class="comment"># 原始数据集路径以及各数据集保存列表文件</span></span><br><span class="line">    src_folder     = <span class="string">"data/crop_images_DB"</span></span><br><span class="line">    test_set_file  = <span class="string">"data/test_set.csv"</span></span><br><span class="line">    valid_set_file = <span class="string">"data/valid_set.csv"</span></span><br><span class="line">    train_set_file = <span class="string">"data/train_set.csv"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> src_folder.endswith(<span class="string">'/'</span>):</span><br><span class="line">        src_folder += <span class="string">'/'</span></span><br><span class="line">    </span><br><span class="line">    test_set, valid_set, train_set = build_dataset(src_folder)</span><br><span class="line">    set_to_csv_file(test_set,  test_set_file)</span><br><span class="line">    set_to_csv_file(valid_set, valid_set_file)</span><br><span class="line">    set_to_csv_file(train_set, train_set_file)</span><br></pre></td></tr></table></figure>
<h4 id="向量化数据集，便于读取"><a href="#向量化数据集，便于读取" class="headerlink" title="向量化数据集，便于读取"></a>向量化数据集，便于读取</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  vec.py</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  将数据格式化为向量形式，存入 data/dataset.pkl。便于训练时直接从该文件读取数据。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  vectorize_imgs</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">  将图像向量化，事实上就是将图像转化为浮点数格式的数组</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vectorize_imgs</span><span class="params">(img_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> Image.open(img_path) <span class="keyword">as</span> img:</span><br><span class="line">        arr_img = np.asarray(img, dtype=<span class="string">'float32'</span>)</span><br><span class="line">        <span class="keyword">return</span> arr_img</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  read_csv_file</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  读取csv文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv_file</span><span class="params">(csv_file)</span>:</span></span><br><span class="line">    x, y = [], []</span><br><span class="line">    <span class="keyword">with</span> open(csv_file, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            path, label = line.strip().split()</span><br><span class="line">            x.append(vectorize_imgs(path))</span><br><span class="line">            y.append(int(label))</span><br><span class="line">    <span class="keyword">return</span> np.asarray(x, dtype=<span class="string">'float32'</span>), np.asarray(y, dtype=<span class="string">'int32'</span>)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  read_csv_pair_file</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  读取成对数据（也就是一个label对应两张图）的csv文件</span></span><br><span class="line"><span class="string">  事实上就是读取测试集数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_csv_pair_file</span><span class="params">(csv_file)</span>:</span></span><br><span class="line">    x1, x2, y = [], [], []</span><br><span class="line">    <span class="keyword">with</span> open(csv_file, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            p1, p2, label = line.strip().split()</span><br><span class="line">            x1.append(vectorize_imgs(p1))</span><br><span class="line">            x2.append(vectorize_imgs(p2))</span><br><span class="line">            y.append(int(label))</span><br><span class="line">    <span class="keyword">return</span> np.asarray(x1, dtype=<span class="string">'float32'</span>), np.asarray(x2, dtype=<span class="string">'float32'</span>), np.asarray(y, dtype=<span class="string">'int32'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  向量化主程序，将csv文件转换为pkl文件</span></span><br><span class="line"><span class="string">'''</span>      </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    testX1, testX2, testY = read_csv_pair_file(<span class="string">'data/test_set.csv'</span>)</span><br><span class="line">    validX, validY = read_csv_file(<span class="string">'data/valid_set.csv'</span>)</span><br><span class="line">    trainX, trainY = read_csv_file(<span class="string">'data/train_set.csv'</span>)</span><br><span class="line"></span><br><span class="line">    print(testX1.shape, testX2.shape, testY.shape)</span><br><span class="line">    print(validX.shape, validY.shape)</span><br><span class="line">    print(trainX.shape, trainY.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入向量化的数据到pkl文件中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/dataset.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        pickle.dump(testX1, f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(testX2, f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(testY , f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(validX, f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(validY, f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(trainX, f, pickle.HIGHEST_PROTOCOL)</span><br><span class="line">        pickle.dump(trainY, f, pickle.HIGHEST_PROTOCOL)</span><br></pre></td></tr></table></figure>
<h4 id="运行tensorboard监视训练过程"><a href="#运行tensorboard监视训练过程" class="headerlink" title="运行tensorboard监视训练过程"></a>运行tensorboard监视训练过程</h4><p>在经过了以上漫长的数据集裁剪、分割和向量化过程（第1、2步各需要20分钟）之后，就开始了训练。这里可以选用Colab内置的Tensorboard进行训练过程的监视。首先需要升级，否则无法读取训练过程中生成的日志文件。</p>
<p>在实际使用过程中，<strong>若训练生成的日志放在了Colab的文件目录中</strong>，Tensorboard在训练开始后过一段时间会与训练程序断开连接，<br>因此同样需要将训练程序代码中的日志文件路径设为Google 云端硬盘的路径。这样就算掉线了也能够在本地运行一个Tensorboard，手动下载Google 云端硬盘上不断更新的日志文件进行监视（或者有下载Google云端硬盘的客户端，可以使用文件夹同步功能实时更新本地的日志文件）。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  训练之前，运行tensorboard监视训练过程</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  尝试了无数次，读不到日志文件，无论是绝对路径还是相对路径</span></span><br><span class="line"><span class="string">  在mac上本地查看日志文件，是能用的，</span></span><br><span class="line"><span class="string">  后来发现升级一下tensorboard就好了，</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级，升级后首次使用会报错，清除一下报错里面提示的info文件即可</span></span><br><span class="line"><span class="comment"># !pip install --upgrade tensorboard</span></span><br><span class="line"><span class="comment"># !rm /tmp/.tensorboard-info/pid-*.info</span></span><br><span class="line"></span><br><span class="line">%reload_ext tensorboard</span><br><span class="line">%tensorboard --logdir <span class="string">"/content/drive/My Drive/Colab Notebooks/deepid/log"</span></span><br></pre></td></tr></table></figure>
<h4 id="训练DeepID网络"><a href="#训练DeepID网络" class="headerlink" title="训练DeepID网络"></a>训练DeepID网络</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  deepid1.py</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  DeepID网络训练主程序</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  load_data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  从pkl向量文件中导出数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/dataset.pkl'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        testX1 = pickle.load(f)</span><br><span class="line">        testX2 = pickle.load(f)</span><br><span class="line">        testY  = pickle.load(f)</span><br><span class="line">        validX = pickle.load(f)</span><br><span class="line">        validY = pickle.load(f)</span><br><span class="line">        trainX = pickle.load(f)</span><br><span class="line">        trainY = pickle.load(f)</span><br><span class="line">        <span class="keyword">return</span> testX1, testX2, testY, validX, validY, trainX, trainY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入向量数据</span></span><br><span class="line">testX1, testX2, testY, validX, validY, trainX, trainY = load_data()</span><br><span class="line"><span class="comment"># 类型数量=训练集数量，也就是认为每一个训练集数据均为一类</span></span><br><span class="line"><span class="comment"># 因为本网络只负责特征提取而非分类，所以可以这么做</span></span><br><span class="line">class_num = np.max(trainY) + <span class="number">1</span></span><br><span class="line"><span class="comment"># 清除一下当前的作用域</span></span><br><span class="line">tf.reset_default_graph();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  weight_variable</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  初始化权重，shape事实上是卷积核尺寸</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">weight_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'weights'</span>):</span><br><span class="line">        <span class="comment"># 从截断的正态分布中输出随机值，以初始化权重。</span></span><br><span class="line">        <span class="keyword">return</span> tf.Variable(tf.truncated_normal(shape, stddev=<span class="number">0.1</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  bias_variable</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  初始化偏置，也就是wx+b中的b，bias</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bias_variable</span><span class="params">(shape)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'biases'</span>):</span><br><span class="line">        <span class="comment"># 使用全零向量初始化偏置</span></span><br><span class="line">        <span class="keyword">return</span> tf.Variable(tf.zeros(shape))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  Wx_plus_b</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  求wx+b</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Wx_plus_b</span><span class="params">(weights, x, biases)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'Wx_plus_b'</span>):</span><br><span class="line">        <span class="keyword">return</span> tf.matmul(x, weights) + biases</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  nn_layer</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  n*n的全连接层，可选激活函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nn_layer</span><span class="params">(input_tensor, input_dim, output_dim, layer_name, act=tf.nn.relu)</span>:</span></span><br><span class="line">    <span class="comment"># 进入对应层的命名空间</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(layer_name):</span><br><span class="line">        <span class="comment"># 权重</span></span><br><span class="line">        weights = weight_variable([input_dim, output_dim])</span><br><span class="line">        <span class="comment"># 偏置</span></span><br><span class="line">        biases = bias_variable([output_dim])</span><br><span class="line">        <span class="comment"># 预激活</span></span><br><span class="line">        <span class="comment"># 可以这么翻译，个人认为是激活前的预处理</span></span><br><span class="line">        preactivate = Wx_plus_b(weights, input_tensor, biases)</span><br><span class="line">        <span class="comment"># 若传入了激活函数，则让它激活</span></span><br><span class="line">        <span class="keyword">if</span> act != <span class="literal">None</span>:</span><br><span class="line">            activations = act(preactivate, name=<span class="string">'activation'</span>)</span><br><span class="line">            <span class="keyword">return</span> activations</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 否则就输出预激活量</span></span><br><span class="line">            <span class="keyword">return</span> preactivate</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  conv_pool_layer</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  卷积+池化层，在deepid中一共有3层</span></span><br><span class="line"><span class="string">  也可以定制only_conv=True来满足deepid第四层只有卷积</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  卷积：局部感知，基于相邻部分的相关性原理；权值共享、因此可以设计多核卷积</span></span><br><span class="line"><span class="string">  池化：这里使用最大池化，则说明是提取显著特征</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_pool_layer</span><span class="params">(x, w_shape, b_shape, layer_name, act=tf.nn.relu, only_conv=False)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(layer_name):</span><br><span class="line">        W = weight_variable(w_shape)</span><br><span class="line">        b = bias_variable(b_shape)</span><br><span class="line">        <span class="comment"># 输入到卷积层</span></span><br><span class="line">        conv = tf.nn.conv2d(</span><br><span class="line">            <span class="comment"># 输入x和卷积核W的大小、权重</span></span><br><span class="line">            x, W, </span><br><span class="line">            <span class="comment"># 卷积步长，tf中前后两个1不能改，中间两个为水平滑动和垂直滑动步长</span></span><br><span class="line">            strides=[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">            <span class="comment"># VALID方式丢弃小于窗口大小的</span></span><br><span class="line">            <span class="comment"># SAME方式相反会填充到窗口大小</span></span><br><span class="line">            padding=<span class="string">'VALID'</span>, </span><br><span class="line">            name=<span class="string">'conv2d'</span></span><br><span class="line">        )</span><br><span class="line">        h = conv + b</span><br><span class="line">        <span class="comment"># 加入偏置，激活</span></span><br><span class="line">        relu = act(h, name=<span class="string">'relu'</span>)</span><br><span class="line">        <span class="keyword">if</span> only_conv == <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">return</span> relu</span><br><span class="line">        <span class="comment"># 若存在池化层则再进行池化</span></span><br><span class="line">        <span class="comment"># ksize参数确定了池化窗口大小</span></span><br><span class="line">        <span class="comment"># 值得注意的是这里的最大池化没有使用激活函数，也就是仅仅提取线性的显著特征</span></span><br><span class="line">        pool = tf.nn.max_pool(relu, ksize=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">'VALID'</span>, name=<span class="string">'max-pooling'</span>)</span><br><span class="line">        <span class="keyword">return</span> pool</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  accuracy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  在验证集上测试阶段的准确度计算，由模型预测值和实际值计算得出</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(y_estimate, y_real)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'correct_prediction'</span>):</span><br><span class="line">            <span class="comment"># 在测试阶段的准确度计算</span></span><br><span class="line">            correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'accuracy'</span>): </span><br><span class="line">            <span class="comment"># 对每个批次计算总的准确度均值</span></span><br><span class="line">            accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">        <span class="comment"># 记录准确度信息</span></span><br><span class="line">        tf.summary.scalar(<span class="string">'accuracy'</span>, accuracy)  </span><br><span class="line">        <span class="keyword">return</span> accuracy</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  train_step</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  训练梯度，也就是需要计算梯度下降了</span></span><br><span class="line"><span class="string">  这里采用了ADAM优化器，其他优化器的特征：</span></span><br><span class="line"><span class="string">  Momentum冲量算法增加冲量、</span></span><br><span class="line"><span class="string">  Adagrad对低频变化的参数以更大步长更新、</span></span><br><span class="line"><span class="string">  RMSProp更新时只更新梯度平方的期望（移动的均值）</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  ADAM优化器对梯度的一阶矩估计（均值）和二阶矩估计（方差）两个方面适应性调节</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span><span class="params">(loss)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">        <span class="comment"># 初始学习率1e-4，之后同样会动态调整，一般是逐步衰减，减少趋近最优时的震荡</span></span><br><span class="line">        <span class="comment"># minimize才是更新梯度，之前是计算梯度</span></span><br><span class="line">        <span class="keyword">return</span> tf.train.AdamOptimizer(<span class="number">1e-4</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入，tf.placeholder为形参，在执行时再赋具体的值</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'input'</span>):</span><br><span class="line">    h0 = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">3</span>], name=<span class="string">'x'</span>)</span><br><span class="line">    y_ = tf.placeholder(tf.float32, [<span class="literal">None</span>, class_num], name=<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第1个卷积-池化层，4x4，当前通道数3，卷积核数量（下一层通道数）20，偏置大小20</span></span><br><span class="line">h1 = conv_pool_layer(h0, [<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">20</span>], [<span class="number">20</span>], <span class="string">'Conv_layer_1'</span>)</span><br><span class="line"><span class="comment"># 第2个卷积-池化层，3x3，当前通道数20，卷积核数量40，偏置大小40</span></span><br><span class="line">h2 = conv_pool_layer(h1, [<span class="number">3</span>, <span class="number">3</span>, <span class="number">20</span>, <span class="number">40</span>], [<span class="number">40</span>], <span class="string">'Conv_layer_2'</span>)</span><br><span class="line"><span class="comment"># 第3个卷积-池化层，3x3，当前通道数40，卷积核数量60，偏置大小60</span></span><br><span class="line">h3 = conv_pool_layer(h2, [<span class="number">3</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">60</span>], [<span class="number">60</span>], <span class="string">'Conv_layer_3'</span>)</span><br><span class="line"><span class="comment"># 第4个卷积层，2x2，当前通道数60，卷积核数量80，偏置大小80</span></span><br><span class="line">h4 = conv_pool_layer(h3, [<span class="number">2</span>, <span class="number">2</span>, <span class="number">60</span>, <span class="number">80</span>], [<span class="number">80</span>], <span class="string">'Conv_layer_4'</span>, only_conv=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一个deepid层</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'DeepID1'</span>):</span><br><span class="line">    <span class="comment"># deepid层直接与第3层相连，</span></span><br><span class="line">    <span class="comment"># 使用reshape能够拉平这两层的输出为1维数组</span></span><br><span class="line">    <span class="comment"># -1即为任意维，后跟的是每一维度实际尺寸大小，</span></span><br><span class="line">    <span class="comment"># 该大小即为整个层所有神经元个数（比实际还偏大一点），因此是拉平了的</span></span><br><span class="line">    h3r = tf.reshape(h3, [<span class="number">-1</span>, <span class="number">5</span>*<span class="number">4</span>*<span class="number">60</span>])</span><br><span class="line">    <span class="comment"># deepid层与第4层相连</span></span><br><span class="line">    h4r = tf.reshape(h4, [<span class="number">-1</span>, <span class="number">4</span>*<span class="number">3</span>*<span class="number">80</span>])</span><br><span class="line">    <span class="comment"># 初始化两次相连的权重</span></span><br><span class="line">    W1 = weight_variable([<span class="number">5</span>*<span class="number">4</span>*<span class="number">60</span>, <span class="number">160</span>])</span><br><span class="line">    W2 = weight_variable([<span class="number">4</span>*<span class="number">3</span>*<span class="number">80</span>, <span class="number">160</span>])</span><br><span class="line">    b = bias_variable([<span class="number">160</span>])</span><br><span class="line">    <span class="comment"># 直接带权重一起相加</span></span><br><span class="line">    h = tf.matmul(h3r, W1) + tf.matmul(h4r, W2) + b</span><br><span class="line">    <span class="comment"># relu激活</span></span><br><span class="line">    h5 = tf.nn.relu(h)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算损失函数</span></span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    <span class="comment"># n*n的全连接层，将拉平的第3、4层全连接到一个160个神经元的全连接层上</span></span><br><span class="line">    y = nn_layer(h5, <span class="number">160</span>, class_num, <span class="string">'nn_layer'</span>, act=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># softmax层</span></span><br><span class="line">    <span class="comment"># 1. 将logits（也就是输入y），计算为（0，1）范围的概率值</span></span><br><span class="line">    <span class="comment"># 2. 计算损失loss，这里计算的是交叉熵损失，y_认为是对应的标签</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">      增加Soft-max layer的输出数量（即分类数，或识别的个体数）可以提升人脸验证的准确率。</span></span><br><span class="line"><span class="string">      即分类的类别数越多，DeepConv-Net学到的DeepID特征（160维）越有效。</span></span><br><span class="line"><span class="string">      此外，作者强调用于人脸验证的一定是160维长度的DeepID特征，而不是Softmax Layer的输出。</span></span><br><span class="line"><span class="string">      如果用SoftmaxLayer输出的结果（例如用4348个不同人的数据训练DeepID,Softmax输出是4348维）</span></span><br><span class="line"><span class="string">      进行人脸验证特征，采用联合贝叶斯人脸验证方法得到的准确率约为66%，而神经网络人脸验证方法则完全失效</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      摘录自：https://www.cnblogs.com/venus024/p/5632243.html</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">      笔者（本人）注：可以说这个神经网络只是利用了多分类训练（可以在代码中看出同一个人的类别标签还是相同的）的形式，</span></span><br><span class="line"><span class="string">      训练神经网络在提取特征时的权重参数，从而达到提取特征、加以比对的目的</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = y, labels = y_))</span><br><span class="line">    <span class="comment"># 记录当前损失</span></span><br><span class="line">    tf.summary.scalar(<span class="string">'loss'</span>, loss)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化精确度</span></span><br><span class="line">accuracy = accuracy(y, y_)</span><br><span class="line"><span class="comment"># 初始化优化器</span></span><br><span class="line">optimizer = train_step(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并所有的记录，给session用来回调运行</span></span><br><span class="line">merged = tf.summary.merge_all()  </span><br><span class="line"><span class="comment"># 保存模型的回调</span></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  训练主函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取一个batch的输入</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_batch</span><span class="params">(data_x, data_y, start)</span>:</span></span><br><span class="line">        end = (start + <span class="number">1024</span>) % data_x.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> start &lt; end:</span><br><span class="line">            <span class="keyword">return</span> data_x[start:end], data_y[start:end], end</span><br><span class="line">        <span class="keyword">return</span> np.vstack([data_x[start:], data_x[:end]]), np.vstack([data_y[start:], data_y[:end]]), end</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        <span class="comment"># 注意，trainX和trainY为具体数据和标签</span></span><br><span class="line">        data_x = trainX</span><br><span class="line">        data_y = (np.arange(class_num) == trainY[:,<span class="literal">None</span>]).astype(np.float32)</span><br><span class="line">        validY = (np.arange(class_num) == validY[:,<span class="literal">None</span>]).astype(np.float32)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 日志文件目录</span></span><br><span class="line">        logdir = <span class="string">'/content/drive/My Drive/Colab Notebooks/deepid/log'</span></span><br><span class="line">        <span class="keyword">if</span> tf.gfile.Exists(logdir):</span><br><span class="line">            tf.gfile.DeleteRecursively(logdir)</span><br><span class="line">        tf.gfile.MakeDirs(logdir)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建训练线程</span></span><br><span class="line">        sess = tf.Session()</span><br><span class="line">        <span class="comment"># 初始化所有参数，开始训练</span></span><br><span class="line">        sess.run(tf.global_variables_initializer())</span><br><span class="line">        <span class="comment"># 写入训练日志和测试日志</span></span><br><span class="line">        train_writer = tf.summary.FileWriter(logdir + <span class="string">'/train'</span>, sess.graph)</span><br><span class="line">        test_writer = tf.summary.FileWriter(logdir + <span class="string">'/test'</span>, sess.graph)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始训练，训练次数50000次</span></span><br><span class="line">        idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50001</span>):</span><br><span class="line">            <span class="comment"># 获取一个batch的输入</span></span><br><span class="line">            batch_x, batch_y, idx = get_batch(data_x, data_y, idx)</span><br><span class="line">            <span class="comment"># 优化器</span></span><br><span class="line">            _ = sess.run(optimizer, &#123;h0: batch_x, y_: batch_y&#125;)</span><br><span class="line">            <span class="comment"># 运行，h0赋值为batchX，也就是图像，y_赋值为batch_y，也就是标签</span></span><br><span class="line">            summary = sess.run(merged, &#123;h0: batch_x, y_: batch_y&#125;)</span><br><span class="line"></span><br><span class="line">            train_writer.add_summary(summary, i)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 每100次进行验证集测试</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                summary = sess.run(merged, &#123;h0: validX, y_: validY&#125;)</span><br><span class="line">                test_writer.add_summary(summary, i)</span><br><span class="line">            <span class="comment"># 每5000次保存一次模型</span></span><br><span class="line">            <span class="keyword">if</span> i % <span class="number">5000</span> == <span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">                saver.save(sess, <span class="string">'/content/drive/My Drive/Colab Notebooks/deepid/checkpoint/%05d.ckpt'</span> % i)</span><br></pre></td></tr></table></figure>
<p>这里展示一下tensorboard采集的使用TPU（由于速度过慢，未训练完）和Tesla T4 GPU（2小时训练结束）的进行50000次训练的准确率和损失率图表：</p>
<p>对于TPU：</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/TPU-acc.png" alt="TPU-acc"></p>
<center>图2.4 TPU训练时的准确度统计图</center>

<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/TPU-acc-1.png" alt="TPU-acc-1"></p>
<center>图2.5 TPU训练时的准确度与耗时（放大后）</center>

<p>可以看出TPU训练时的准确度上升缓慢，而且过了3个小时后，准确度仍然在0.6，而且才训练了不到4k次。</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/TPU-loss.png" alt="TPU-loss"></p>
<center>图2.6 TPU训练时的损失率统计图</center>

<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/TPU-loss-1.png" alt="TPU-loss-1"></p>
<center>图2.7 TPU训练时的损失率与耗时（放大后）</center>

<p>同样地，TPU训练时损失率下降也十分缓慢。</p>
<p>对于GPU：</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/GPU-acc.png" alt="GPU-acc"></p>
<center>图2.8 GPU训练时的准确度统计图</center>

<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/GPU-acc-1.png" alt="GPU-acc-1"></p>
<center>图2.9 GPU训练时的准确度与耗时（放大后）</center>

<p>可以看出TPU训练时的准确度上升呈对数曲线，在训练次数到15k~30k时就已经趋于稳定，在1小时27分时就已经结束了训练。</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/GPU-loss.png" alt="GPU-loss"></p>
<center>图2.10 GPU训练时的损失率统计图</center>

<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/GPU-loss-1.png" alt="GPU-loss"></p>
<center>图2.10 GPU训练时的损失率与耗时（放大后）</center>

<p>同样地，GPU训练时损失率下降也十分迅速。</p>
<p>综上，可以看出Google Colab提供的免费GPU性能十分地强劲，能够满足快速训练简单的深度学习模型的需求。这款GPU通过nvidia-smi命令查询的情况如下所示，据查，该款显卡的价格约两万元人民币，可以看出谷歌为了推广深度学习付出了巨大的成本。</p>
<p><img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/nvidia-smi.png" alt="nvidia-smi"></p>
<center>图2.11 nvidia-smi命令得到的GPU信息：Tesla T4</center>

<h4 id="在测试集上使用模型文件预测，获取余弦距离阈值"><a href="#在测试集上使用模型文件预测，获取余弦距离阈值" class="headerlink" title="在测试集上使用模型文件预测，获取余弦距离阈值"></a>在测试集上使用模型文件预测，获取余弦距离阈值</h4><p>这里运行测试集除了检验模型的预测效果，更重要的是获取余弦距离的阈值，也就是<code>(true_mean + false_mean)/2</code>，意思是：小于同类组+不同类组的平均组内距离的两者平均（有点拗口，但是确实是以此为阈值）。根据这个阈值，就能判断任意两个人脸之间的距离代表的是同一个人还是不同的人。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  predict.py</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  预测模块，训练结束后即可使用模型文件预测</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine, euclidean</span><br><span class="line"></span><br><span class="line">saver = tf.train.Saver()</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  predict</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  预测</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(ckpt)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        saver.restore(sess, ckpt)</span><br><span class="line">        <span class="comment"># 计算测试集的两对数据特征值列表</span></span><br><span class="line">        h1 = sess.run(h5, &#123;h0: testX1&#125;)</span><br><span class="line">        h2 = sess.run(h5, &#123;h0: testX2&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算两个特征值列表对应两项的余弦距离</span></span><br><span class="line">    <span class="comment"># 事实上是1-余弦距离，距离越近，数值越小，符合直觉</span></span><br><span class="line">    <span class="comment"># 因此范围也从-1~1变为了0~2</span></span><br><span class="line">    pre_y = np.array([cosine(x, y) <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(h1, h2)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 求余弦距离阈值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">part_mean</span><span class="params">(x, mask)</span>:</span></span><br><span class="line">        <span class="comment"># mask事实上是测试集的标签，若是testY，1就代表对应的两张图为同类，0为不同类，1-testY反之</span></span><br><span class="line">        <span class="comment"># 以testY为例，在这一乘法下，留下的非零项目即为同类项</span></span><br><span class="line">        z = x * mask</span><br><span class="line">        <span class="comment"># 同类组余弦距离总和/同类组数量</span></span><br><span class="line">        <span class="comment"># 对所有非零项目求和=同类组距离总和</span></span><br><span class="line">        <span class="comment"># 非零项目个数=同类组数量</span></span><br><span class="line">        <span class="comment"># 两者相除则为同类组的平均组内距离</span></span><br><span class="line">        <span class="comment"># 1-testY时则为不同类组的平均组内距离</span></span><br><span class="line">        <span class="keyword">return</span> float(np.sum(z) / np.count_nonzero(z))</span><br><span class="line">    </span><br><span class="line">    true_mean = part_mean(pre_y, testY)</span><br><span class="line">    false_mean = part_mean(pre_y, <span class="number">1</span>-testY)</span><br><span class="line">    print(true_mean, false_mean)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 筛选出pre_y也就是余弦距离结果中，符合小于同类组+不同类组的平均组内距离的两者平均这一条件的项目，与testY中的对应项目进行比对</span></span><br><span class="line">    <span class="comment"># 由于testY中对应项目为1也就是True的元素代表两张图为同类，因此当pre_y中元素小于这一条件时，也代表为同类</span></span><br><span class="line">    <span class="comment"># 反之，pre_y中的元素大于这一条件时，代表非同类</span></span><br><span class="line">    <span class="comment"># 所以最终得到的矩阵是一个同类、非同类的预测值与测试集标签之间的对应关系，只有正确的才能留下来</span></span><br><span class="line">    <span class="comment"># 对此计算均值，即可获取模型在测试集上的准确率</span></span><br><span class="line">    print(np.mean((pre_y &lt; (true_mean + false_mean)/<span class="number">2</span>) == testY.astype(bool)))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    预测主函数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 输入模型路径</span></span><br><span class="line">    predict(<span class="string">'/content/drive/My Drive/Colab Notebooks/deepid/checkpoint/30000.ckpt'</span>);</span><br></pre></td></tr></table></figure>
<h3 id="预测服务搭建"><a href="#预测服务搭建" class="headerlink" title="预测服务搭建"></a>预测服务搭建</h3><p>对于已经训练好的Tensorflow模型的预测服务搭建，在网络上有许多的方法，事实上最好的方法是使用frozen_graph工具对checkpoint进行固化处理，笔者这里是直接调用了checkpoint来恢复现场，事实上效果类似。<br>笔者在这里使用的是docker进行预测服务搭建，具体使用的镜像是<code>yoanlin/opencv-python3-tensorflow</code>，自带python3、opencv和tensorflow1.x。由于tensorflow仅仅是使用1.14生成的模型，所以不存在兼容性问题。<br>具体命令如下</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker pull yoanlin/opencv-python3-tensorflow</span><br><span class="line"><span class="comment"># 生成容器，配置端口映射和文件夹映射</span></span><br><span class="line"><span class="comment"># 8888端口是tensorboard，8080是flask</span></span><br><span class="line"><span class="comment"># faces文件夹映射为人脸图像路径，我是使用软工项目中的Spring boot来接收图像的，所以flask就没写接收代码，直接从文件路径里面取，server文件夹映射为flask的程序文件</span></span><br><span class="line">docker run -itd --name=tf-cv -p 7777:8888 -p 8081:8080 -v /tf-cv/faces:/faces -v /tf-cv/server/:/server yoanlin/opencv-python3-tensorflow</span><br><span class="line"><span class="comment"># 若需要进入镜像内部安装flask等其他python库，运行以下命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tf-cv bash</span><br><span class="line"><span class="comment"># flask无法独立启动守护进程，需要使用gunicorn，其中gunicorn.conf.py写有基本配置，此处可自行搜索相关教程</span></span><br><span class="line">gunicorn app:app -c gunicorn.conf.py -D</span><br></pre></td></tr></table></figure>
<p>若需要部署到服务器，可以使用以下命令<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将容器提交为新的镜像</span></span><br><span class="line">docker commit tf-cv tf-cv:server</span><br><span class="line"><span class="comment"># 将新的镜像打包为tar压缩文件，之后用scp命令传到服务器上</span></span><br><span class="line">docker save &gt; tf-cv.tar tf-cv:server</span><br><span class="line"><span class="comment"># 在服务器上解压镜像</span></span><br><span class="line">docker load &lt; tf-cv.tar</span><br><span class="line"><span class="comment"># 再次使用docker run命令生成新的容器，并在新的容器内部运行flask，参见以上命令</span></span><br></pre></td></tr></table></figure></p>
<h3 id="编写预测代码"><a href="#编写预测代码" class="headerlink" title="编写预测代码"></a>编写预测代码</h3><h4 id="OpenCV人脸检测"><a href="#OpenCV人脸检测" class="headerlink" title="OpenCV人脸检测"></a>OpenCV人脸检测</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  HAAR特征检测人脸</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  用opencv的方式（HAAR特征）检测人脸，效果不是很好。</span></span><br><span class="line"><span class="string">  最优方案是MTCNN，需要人脸特征点数据集多次训练，比较繁琐</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detect_face</span><span class="params">(img_path)</span>:</span></span><br><span class="line">    <span class="comment"># 获取训练好的人脸参数数据，此处引用GitHub上的opencv库中的默认值</span></span><br><span class="line">    face_cascade = cv2.CascadeClassifier(<span class="string">r'/root/haarcascade_frontalface_default.xml'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取图片，并处理成灰度图</span></span><br><span class="line">    image = cv2.imread(img_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 未读取到图片，返回</span></span><br><span class="line">    <span class="keyword">if</span> image <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"提示：未读取到图片"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 转换为灰度图像</span></span><br><span class="line">    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># haar模型检测人脸</span></span><br><span class="line">    faces = face_cascade.detectMultiScale(</span><br><span class="line">        gray,</span><br><span class="line">        scaleFactor = <span class="number">1.15</span>,</span><br><span class="line">        minNeighbors = <span class="number">5</span>,</span><br><span class="line">        minSize = (<span class="number">5</span>, <span class="number">5</span>),</span><br><span class="line">        flags = cv2.CASCADE_SCALE_IMAGE</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 未检测到人脸，返回</span></span><br><span class="line">    <span class="keyword">if</span> len(faces) &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"提示：未检测到人脸"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 裁剪人脸图像</span></span><br><span class="line">    face_images = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">        face_img = image[y:y+h, x:x+w]</span><br><span class="line">        face_images.append(face_img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若有多个人脸，则选出面积最大（也就是最靠前）的人脸</span></span><br><span class="line">    face_images = sorted(face_images, key=<span class="keyword">lambda</span> img:img.size, reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换图像</span></span><br><span class="line">    face = Image.fromarray(face_images[<span class="number">0</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 缩放为（55，47）</span></span><br><span class="line">    resize_face = face.resize((<span class="number">47</span>,<span class="number">55</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 转换为array</span></span><br><span class="line">    <span class="keyword">return</span> np.asarray(resize_face)</span><br></pre></td></tr></table></figure>
<h4 id="Tensorflow人脸特征比对"><a href="#Tensorflow人脸特征比对" class="headerlink" title="Tensorflow人脸特征比对"></a>Tensorflow人脸特征比对</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># import tensorflow as tf</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> detector <span class="keyword">as</span> dt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> scipy.spatial.distance <span class="keyword">import</span> cosine</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">  预测</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(src_img_path, dst_img_path)</span>:</span></span><br><span class="line">    <span class="comment"># 对输入的图像分别检测人脸</span></span><br><span class="line">    src_image = dt.detect_face(src_img_path)</span><br><span class="line">    dst_image = dt.detect_face(dst_img_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若返回了错误信息，不再检测</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(src_image, str):</span><br><span class="line">        <span class="keyword">return</span> src_image</span><br><span class="line">    <span class="keyword">elif</span> isinstance(dst_image, str):</span><br><span class="line">        <span class="keyword">return</span> dst_image</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 载入tensorflow模型，开始检测</span></span><br><span class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">        saver=tf.train.import_meta_graph(<span class="string">'/root/50000.ckpt.meta'</span>)</span><br><span class="line">        saver.restore(sess,<span class="string">"/root/50000.ckpt"</span>)</span><br><span class="line">        graph = tf.get_default_graph()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算160维的人脸特征</span></span><br><span class="line">        h1 = sess.run(<span class="string">"DeepID1/Relu:0"</span>, feed_dict=&#123;<span class="string">"input/x:0"</span>: [src_image]&#125;)</span><br><span class="line">        h2 = sess.run(<span class="string">"DeepID1/Relu:0"</span>, feed_dict=&#123;<span class="string">"input/x:0"</span>: [dst_image]&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算人脸之间的余弦距离（事实上是1-余弦），范围0~1，越小越接近</span></span><br><span class="line">        pre_y = np.array([cosine(x, y) <span class="keyword">for</span> x, y <span class="keyword">in</span> zip(h1, h2)])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在测试集上测试模型的过程中，得到了余弦距离的阈值为0.47189</span></span><br><span class="line">        <span class="comment"># 因此，比该阈值小的即为同一个人，大的则不是同一个人</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="string">'msg'</span>: &#123; <span class="string">'isSame'</span>: bool((pre_y &lt; <span class="number">0.47189</span>)[<span class="number">0</span>]), <span class="string">'predict'</span>: pre_y[<span class="number">0</span>] &#125; &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Flask后端服务器主程序"><a href="#Flask后端服务器主程序" class="headerlink" title="Flask后端服务器主程序"></a>Flask后端服务器主程序</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> predict.main <span class="keyword">import</span> predict</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/face', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    data = json.loads(request.get_data(as_text=<span class="literal">True</span>))</span><br><span class="line">    src_face = data[<span class="string">'src_face'</span>]</span><br><span class="line">    dst_face = data[<span class="string">'dst_face'</span>]</span><br><span class="line">    res = predict(src_face, dst_face)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回一下两个人脸图像的路径，便于验证是否正确</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(res, str):</span><br><span class="line">      <span class="keyword">return</span> jsonify(&#123; <span class="string">'success'</span>: <span class="literal">False</span>, <span class="string">'msg'</span>: res, <span class="string">'src_face'</span>: src_face, <span class="string">'dst_face'</span>: dst_face &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> jsonify(&#123; <span class="string">'success'</span>: <span class="literal">True</span>, <span class="string">'msg'</span>: res[<span class="string">'msg'</span>], <span class="string">'src_face'</span>: src_face, <span class="string">'dst_face'</span>: dst_face &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>以上的flask服务器的业务流程是：</p>
<ul>
<li>在主程序中路由<code>/face</code>上接收POST请求，收到待比对的两张人脸图片的文件路径。</li>
<li>在detect_face函数中，使用OpenCV的HAAR模型，检测图片中的人脸，并且裁剪成当时训练时使用的(55,47)尺寸输入。若检测不到人脸，或者图片文件无法找到，直接返回错误信息。</li>
<li>在predict函数中，调用tensorflow恢复（restore）模型的参数，输入这两张人脸，获取每张人脸的特征值，计算两者特征值的余弦距离，与之前在测试集上获取的余弦距离阈值进行比对，判断出是否为同一个人，返回结果。</li>
</ul>
<p>最终，在前端小程序的手机前置摄像头调用和用户界面的配合下，该系统的最终效果如下所示：</p>
<p>  <img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/weapp-1.jpeg" alt="weapp-1"><br>  <center>图2.12 地图定位界面</center><br>  <img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/weapp-2.jpeg" alt="weapp-2"><br>  <center>图2.13 人脸识别成功，正在比对人脸</center><br>  <img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/weapp-3.jpeg" alt="weapp-3"><br>  <center>图2.14 未检测到人脸</center><br>  <img src="/2019/06/29/Training-DeepID1-Network-for-Face-Comparison-with-Google-Colab-Tensorflow/weapp-4.jpeg" alt="weapp-4"><br>  <center>图2.15 比对人脸为同一人后，打卡成功的结果</center></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本次项目实践了使用OpenCV、Tensorflow、Tensorboard以及docker、Jupyter Notebook等深度学习模型训练的常用工具，并尝试将训练得出的模型进行Python flask后端+小程序前端应用落地。在这一过程中，笔者不但熟悉了从数据集预处理、模型训练框架搭建、模型训练过程监控再到模型实际应用的全过程，也通过编写中文注释、以及对Tensorflow不同版本API的移植重写，进一步熟悉深度学习的常用术语和内在含义，可以说是一次收获颇丰的实践案例。</p>
<p>在此，特别感谢Google Colab免费提供的Nvidia GTX Tesla T4高性能GPU硬件资源以及在线训练平台，感谢他们为深度学习的推广和应用做出的无数努力和贡献。最后，感谢USTB的《机器学习》（自动化学院）、《人工智能》、《模式识别》、《软件工程》等相关课程老师的辛勤教学，是各位老师传授的宝贵知识和设置的一系列大作业帮助着我进一步理解、学习AI各个方向的知识并加以实践，为未来的研究和工作打下了知识基础。感谢大家！</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>GitHub上DeepID的Tensorflow实现（本文在此基础上修改了调用的TensorflowAPI到1.14，并添加中文注释）：<br><a href="https://github.com/jinze1994/DeepID1" target="_blank" rel="noopener">https://github.com/jinze1994/DeepID1</a></li>
<li>DeepID1论文《Deep Learning Face Representation from Predicting 10,000 Classes》：<br><a href="https://www.cv-foundation.org/openaccess/content_cvpr_2014/papers/Sun_Deep_Learning_Face_2014_CVPR_paper.pdf" target="_blank" rel="noopener">https://www.cv-foundation.org/openaccess/content_cvpr_2014/papers/Sun_Deep_Learning_Face_2014_CVPR_paper.pdf</a></li>
<li>Google Colab官网：<a href="https://colab.research.google.com" target="_blank" rel="noopener">https://colab.research.google.com</a></li>
<li>DeepID1、2算法解读：<a href="https://www.cnblogs.com/venus024/p/5632243.html" target="_blank" rel="noopener">https://www.cnblogs.com/venus024/p/5632243.html</a></li>
<li>人脸特征提取DeepID 1.0深度网络解读：<br><a href="https://blog.csdn.net/jiajinrang93/article/details/72566130/" target="_blank" rel="noopener">https://blog.csdn.net/jiajinrang93/article/details/72566130/</a></li>
</ol>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Different Deep Learning Methods for Image Classification on CIFAR 10</title>
    <url>/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/</url>
    <content><![CDATA[<p>本文是2019年4月《人工智能》专业课的大作业报告摘录</p>
<p>主要内容是在同一数据集（CIFAR10）上使用不同的卷积神经网络模型<br>进行多分类问题训练以及识别效果的横向评估</p>
<a id="more"></a>
<blockquote>
<p>中文标题：基于不同神经网络的CIFAR10图像分类</p>
</blockquote>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/aistudio.png" alt="AI Studio"></p>
<center>图1.1 本次实验的AI Studio项目入口页面</center>

<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h3><ol>
<li><a href="https://aistudio.baidu.com/aistudio/#/projectdetail/56694" target="_blank" rel="noopener">百度 AI Studio</a>（需要登录AI Studio账号后访问，使用百度账号即可）</li>
<li>在AI Studio的“开发者共享项目”中搜索“CIFAR10图像”分类即可</li>
<li>GitHub（待发布）</li>
</ol>
<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ol>
<li><p>基于百度AI Studio平台提供的paddlepaddle深度学习框架、Jupyter Notebook线上python运行环境等基础设施，编程实现包括VGG、ResNet、GoogleNet（Inception-V1）、Inception-V4等多种图像分类神经网络。在编程实现的过程中，学习深度神经网络的基本理论和实践要点，了解上述不同神经网络的具体结构设计以及体现出的优秀设计理念和不足之处。</p>
</li>
<li><p>使用平台提供的CIFAR10图像识别数据集，在相同的训练环境条件下，训练上述不同神经网络并得出数据模型。收集训练模型过程中输出的训练参数数据，绘制统计图表，比较分析不同神经网络模型的在训练过程中的性能开销、数据指标变化等特点。</p>
</li>
<li><p>通过统一的测试图像对训练得出的模型分类图像内容的准确性进行测试，从而比较分析不同神经网络模型在实际应用中的效果。</p>
</li>
</ol>
<blockquote>
<p>笔者注：根据最后的评估结果以及对相关论文、资料的研读，我们发现这种类似单一变量法的横向对比实验事实上是存在问题的：</p>
<p>不同年代的卷积神经网络模型，对于训练时最佳效果的硬件要求应该是不同的，虽然不排除存在出现轻量级框架的可能，但是主流意义上的框架对于硬件资源的需求的确是逐年上升的。不应当对每一种模型在训练过程中给出相同的硬件环境，而是给出文献或其开源代码所要求的最佳硬件环境。</p>
<p>因此，本次实验出现的较新版本的模型最终的识别效果较差的情况，事实上仅仅是实验平台的硬件条件不足以在短时间内训练得出最佳效果的模型。</p>
</blockquote>
<h3 id="实验仪器"><a href="#实验仪器" class="headerlink" title="实验仪器"></a>实验仪器</h3><ul>
<li>本地设备：华硕K550-JX笔记本电脑、macOS Mojave 10.14.4</li>
<li>远程设备：百度AI Studio提供的通过Jupyter Notebook连接的CPU: 2 Cores 、Memory: 8GB的远程服务器（无GPU）</li>
</ul>
<h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><h4 id="实验项目概况"><a href="#实验项目概况" class="headerlink" title="实验项目概况"></a>实验项目概况</h4><p>本次实验的基本框架来自于paddlepaddle官网教程中的《深度学习基础教程》的《图像分类》章节（网页链接：<a href="http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html）。" target="_blank" rel="noopener">http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html）。</a></p>
<p>该章节介绍了图像识别分类领域中包括VGG、ResNet和GoogleNet等常用模型的基本原理，并给出了paddlepaddle使用其框架自带的CIFAR10数据集以及VGG、ResNet训练模型并进行图像分类的基本步骤和代码实现。</p>
<p>我们在研读了该教程中的相关理论知识、各行代码实现的前提下，将该教程所述的数据预处理、训练模型、图像识别等完整的流程代码，移植到了同样搭载了最新版本的paddlepaddle的AI Studio在线项目环境中。该项目为新建的项目，而非直接fork在AI Studio上现有的项目，因此能够使用最新版本的paddlepaddle，避免了fork使用早期paddlepaddle版本项目所带来的一系列问题。</p>
<p>除此之外，我们也对代码进行了逐行的注释解读工作，来帮助使用者理解代码的基本含义和相关的理论知识。我们添加了训练过程中的数据统计图表绘制功能代码，能够在训练结束后将收集到的训练数据绘制成形象的图表并输出，有助于使用者对不同模型的性能进行综合的判断。</p>
<p>在此基础之上，我们更进一步，参考网络上的相关资料，将该教程中仅给出理论知识而无代码实践的GoogleNet（Inception-V1）、以及其同一系列的最新版本Inception-V4的模型代码移植实现到了百度AI Studio在线项目环境上（由于部分代码存在版本过低等问题，我们进行了相应的修改以确保代码能够正常运行），同样给出了详尽的代码注释解读。</p>
<p>现在，本项目已经公开在了百度AI Studio的“开发者共享项目”栏目中，欢迎大家fork本项目，也欢迎大家联系我们（邮箱：<a href="mailto:lmy98129@163.com" target="_blank" rel="noopener">lmy98129@163.com</a>）提出建议。</p>
<h4 id="CIFAR数据集介绍"><a href="#CIFAR数据集介绍" class="headerlink" title="CIFAR数据集介绍"></a>CIFAR数据集介绍</h4><blockquote>
<p>注：以下实验原理介绍部分摘录自paddlepaddle官方教程以及其他网络资料，同时也添加了我们在理论学习和实践过程中对于数据集使用、神经网络模型设计的优缺点等方面的思考和理解，能力有限，如有偏差，敬请谅解。</p>
</blockquote>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/cifar.png" alt="cifar"></p>
<center>图1.2 CIFAR数据集局部<br>（图片摘自paddlepaddle官方教程）</center>

<p>CIFAR10数据集是主要用于通用图像分类而公开的标准数据集CIFAR的一个子集，包含60,000张32x32的彩色图片，10个类别（分别为：飞机airplane、轿车automobile、鸟类bird、猫cat、鹿deer、狗dog、蛙frog、马horse、船ship、卡车truck），每个类包含6,000张。其中50,000张图片作为训练集，10000张作为测试集。</p>
<p>之所以选用CIFAR而不是大量学术研究成果所基于的ImageNet，我们主要考虑到其体积的问题，在AI Studio的在线项目环境中使用的是CPU训练，而CPU的训练速度由于其核心数量、并行计算能力等原因一般要远远慢于GPU，因此选择一个较小的数据集能够较好地节省训练的时间，但也因此对模型的在小数据集条件下的训练效果提出了考验。</p>
<p>关于下载速度，由于AI Studio提供了可动态加载的数据集仓库，能够通过创建项目时进行设置、或者创建后修改项目设置等方式动态加载到项目中，因此不存在联网下载的问题。</p>
<h4 id="VGG基本介绍"><a href="#VGG基本介绍" class="headerlink" title="VGG基本介绍"></a>VGG基本介绍</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/vgg.png" alt="vgg"></p>
<center>图1.3 VGG模型结构<br>（图片摘自paddlepaddle官方教程）</center>

<p>相比以往的神经网络模型（例如CNN等），由牛津大学于2014年提出的VGG模型在神经网络的层数（深度）和卷积层的卷积核数目（宽度）上进行了增加。其核心结构是：五组不同卷积核数目的卷积层，以及每两组卷积层之间的max-pooling最大池化的降维操作，最后是全连接层和分类预测层。</p>
<p>关于VGG网络的设计，我们认为，加深神经网络能够进行更多次的特征提取，提高神经网络的表达能力，但是也增加了训练神经网络的时间和成本，过深的神经网络往往会因为带来梯度的损失而无法找到最优解，从而导致过拟合、准确度下降等一系列问题；加宽的神经网络能够输入更多的细节特征，但也导致了需要输入的参数过多，而同等深度下的神经网络，参数的个数对训练的结果没有明显的影响。</p>
<h4 id="ResNet基本介绍"><a href="#ResNet基本介绍" class="headerlink" title="ResNet基本介绍"></a>ResNet基本介绍</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/resnet.png" alt="resnet"></p>
<center>图1.4 残差模块示意图<br>（图片摘自paddlepaddle官方教程）</center>

<p>为了解决随着网络层数加深而导致准确度下降的问题，ResNet提出了残差学习方法来减轻训练深层网络的困难，在添加batchnorm、小卷积核、全卷积网络等特性基础上，引入了残差模块。</p>
<p>残差模块的其中一条路径是输入特征的直连通道（可以认为是输入特征中的普遍特征），另一条经过多次卷积的到特征的残差（可以认为是输入特征中的显著特征），最后将以上两条结果相加得到输出。通过这种输出的叠加，残差模块很好地提升了深层次网络训练结果的准确度和收敛速度。</p>
<p>我们对于以上提到的一些现有特性概念的理解是：batchnorm能够将每次输入的数据分布进行规范化，让其均匀分布在当前层上，从而加速神经网络的训练速度、防止过拟合。小卷积核的意思是指单个卷积核的长宽尺寸减小，能够减少训练参数，从而降低训练模型的性能开销。全卷积网络是指整个模型的主体部分完全使用卷积网络，全连接层使用增加步长的特定卷积层替换，这种替换在功能上是等价的。</p>
<h4 id="GoogleNet（Inception-V1）基本介绍"><a href="#GoogleNet（Inception-V1）基本介绍" class="headerlink" title="GoogleNet（Inception-V1）基本介绍"></a>GoogleNet（Inception-V1）基本介绍</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/googlenet.png" alt="googlenet"></p>
<center>图1.5 Inception模块示意图<br>右图为添加1*1卷积层进行降维之后的模块<br>（图片摘自paddlepaddle官方教程）</center>

<p>GoogleNet由多组Inception模块组成，Inception模块的主要特点是在同一层级上并行设置了多个不同尺寸的卷积层和一个最大池化层，根据资料以及我们的理解总结，这一特性解决了多个问题：</p>
<ol>
<li>卷积层的不同尺寸消除了信息分布的均匀程度对卷积核大小的选取影响 </li>
<li>并行的卷积层减缓了网络层数过深导致的梯度损失以及过拟合</li>
<li>并行的最大池化层对输入尺寸进行压缩并提取主要特征，也缓解了简单堆叠多层网络导致的计算资源的消耗 </li>
</ol>
<p>但是这个特点同样带来了缺陷：并行的池化层并不会改变整个Inception模块的通道数量，并行卷积层构成的Inception在将各个并行层结果拼接后，特征的通道数较大，经过几层这样的模块堆积后，通道数会越来越大，导致参数和计算量也随之增大。因此，Inception还在每一个并行分支上引入了1*1卷积层进行降维操作，减少通道数，解决了这一问题。</p>
<p>除此之外，GoogleNet的另一个显著特征就是采用了三个子网络，可以得到3个网络的损失率进行加权求和得出整个网络的损失，从而有利于使用优化器（optimizer）的训练程序计算更准确的梯度，加快收敛速度。</p>
<h4 id="Inception-V4基本介绍"><a href="#Inception-V4基本介绍" class="headerlink" title="Inception-V4基本介绍"></a>Inception-V4基本介绍</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/inception-v4.png" alt="inception-v4"></p>
<center>图1.6 inception-sterm模块示意图<br>（图片摘自论文《Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning》）<br></center>

<p>Inception-V4是Inception系列中的最新版本，经过V2版本添加batchnorm，V3版本对卷积层的调整，在Inception-V4中加入了同样基于卷积+池化并行理念的inception-sterm模块，并分化出了inception-A、B、C三种不同的模块类型。其设计的理念是要与添加了残差模块的Inception-ResNet具有相同的性能，因此使用了大量的经验性的结构设计，其对应的论文中没有对这些结构设计的由来做出进一步的解释说明。</p>
<p>此外，该模型还添加了reduction模块，起到了之前版本中的一层单层池化层的作用，同样采用了卷积+池化并行的结构设计。</p>
<h3 id="实验内容与步骤"><a href="#实验内容与步骤" class="headerlink" title="实验内容与步骤"></a>实验内容与步骤</h3><h4 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h4><h5 id="登录AI-Studio平台"><a href="#登录AI-Studio平台" class="headerlink" title="登录AI Studio平台"></a>登录AI Studio平台</h5><p>登录百度AI Studio首页并登录AI Studio账号，选择顶部导航栏中的“项目”，进入项目页面</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/init-step1.png" alt="登录 AI Studio"></p>
<center>图2.1 登录百度AI Studio进入AI Studio的项目页面</center>

<h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5><p>点击“创建项目”，输入项目名称、描述并添加数据集。在数据集添加界面中搜索并选中“cifar10数据集”。这里之所以选择这一项“cifar10数据集”是因为该数据集与在调用paddlepaddle自带的cifar10数据集时需要自动联网下载的cifar10数据集格式相同，可以在项目建立后通过在Jupyter Notebook中执行shell命令的方式，将数据集自行放入paddlepaddle的缓存目录中，节省其下载时间。</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/init-step2-1.png" alt="创建项目"></p>
<center>图2.2 创建项目界面</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/init-step2-2.png" alt="选择数据集"></p>
<center>图2.3 选择“cifar10数据集”</center>

<h5 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h5><p>创建项目之后，进入项目界面，点击“运行项目”，进入Jupyter Notebook界面</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/init-step3.png" alt="Jupyter Notebook"></p>
<center>图2.4 Jupyter Notebook界面</center>

<h5 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h5><p>在第一个cell中输入将当前自动载入到项目当中的数据集cifar-10-python.tar.gz拷贝到paddlepaddle缓存目录的shell命令，如下所示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">!cp data/data5752/cifar-10-python.tar.gz /home/aistudio/.cache/paddle/dataset/cifar/cifar-10-python.tar.gz</span><br><span class="line">!ls -l /home/aistudio/.cache/paddle/dataset/cifar/</span><br></pre></td></tr></table></figure>
<p>执行该cell，若得到如下输出，则拷贝成功。</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/init-step4.png" alt="拷贝数据集"></p>
<center>图2.5 拷贝数据集成功的输出</center>

<p>至此，项目初始化完成。</p>
<h4 id="编写项目主体代码"><a href="#编写项目主体代码" class="headerlink" title="编写项目主体代码"></a>编写项目主体代码</h4><h5 id="导入系统模块代码"><a href="#导入系统模块代码" class="headerlink" title="导入系统模块代码"></a>导入系统模块代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入paddle模块以及一些系统模块</span></span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"><span class="keyword">import</span> paddle.fluid <span class="keyword">as</span> fluid</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> paddle.fluid.param_attr <span class="keyword">import</span> ParamAttr</span><br></pre></td></tr></table></figure>
<p>如上所示，这些代码的主要导入了包括paddlepaddle、numpy、sys、math等运行环境内置的python库。</p>
<h5 id="训练模型所需的模块函数"><a href="#训练模型所需的模块函数" class="headerlink" title="训练模型所需的模块函数"></a>训练模型所需的模块函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预测程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference_network</span><span class="params">(model)</span>:</span></span><br><span class="line">    <span class="comment"># 图像是32 * 32的rgb格式，rgb格式每个像素应该是3位</span></span><br><span class="line">    data_shape = [<span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>]</span><br><span class="line">    <span class="comment"># 设置图片格式</span></span><br><span class="line">    images = fluid.layers.data(name=<span class="string">'pixel'</span>, shape=data_shape, dtype=<span class="string">'float32'</span>)</span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">'vgg'</span>:</span><br><span class="line">    <span class="comment"># 使用vgg模型进行预测</span></span><br><span class="line">        predict = vgg_bn_drop(images)</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'resnet'</span>:</span><br><span class="line">    <span class="comment"># 使用resnet模型进行预测</span></span><br><span class="line">        predict = resnet_cifar10(images, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'googlenet'</span>:</span><br><span class="line">    <span class="comment"># 使用googlenet模型进行预测</span></span><br><span class="line">        predict = googlenet(images, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">elif</span> model == <span class="string">'inception_v4'</span>:</span><br><span class="line">    <span class="comment"># 使用inception_v4模型进行预测</span></span><br><span class="line">        inception_v4 = InceptionV4()</span><br><span class="line">        predict = inception_v4.net(images, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> predict</span><br></pre></td></tr></table></figure>
<p>预测程序是在训练或预测过程中实际调用各神经网络模型的最底层函数，这里可以看到不同的模型要求输入的参数类型、调用方式都各有不同。这些模型的具体实现代码在下文会详细给出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_network</span><span class="params">(predict, model=None)</span>:</span></span><br><span class="line">    <span class="comment"># 首先从预测程序中获取预测结果</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置图片类别标签格式</span></span><br><span class="line">    label = fluid.layers.data(name=<span class="string">'label'</span>, shape=[<span class="number">1</span>], dtype=<span class="string">'int64'</span>)</span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">'googlenet'</span>:</span><br><span class="line">        <span class="comment"># 若为googlenet</span></span><br><span class="line">        out, out1, out2 = predict</span><br><span class="line">        <span class="comment"># 分别采用多类交叉熵作为损失函数</span></span><br><span class="line">        cost0 = fluid.layers.cross_entropy(input=out, label=label)</span><br><span class="line">        cost1 = fluid.layers.cross_entropy(input=out1, label=label)</span><br><span class="line">        cost2 = fluid.layers.cross_entropy(input=out2, label=label)</span><br><span class="line">        <span class="comment"># 得到的平均损失用于在上一层中的训练主函数中计算梯度</span></span><br><span class="line">        avg_cost0 = fluid.layers.mean(x=cost0)</span><br><span class="line">        avg_cost1 = fluid.layers.mean(x=cost1)</span><br><span class="line">        avg_cost2 = fluid.layers.mean(x=cost2)</span><br><span class="line">        <span class="comment"># 最后加权求和</span></span><br><span class="line">        avg_cost = avg_cost0 + <span class="number">0.3</span> * avg_cost1 + <span class="number">0.3</span> * avg_cost2</span><br><span class="line">        <span class="comment"># 预测精度看第一个输出即可</span></span><br><span class="line">        accuracy = fluid.layers.accuracy(input=out, label=label)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 对于其他模型</span></span><br><span class="line">        <span class="comment"># 在训练中采用多类交叉熵作为损失函数</span></span><br><span class="line">        cost = fluid.layers.cross_entropy(input=predict, label=label)</span><br><span class="line">        <span class="comment"># 得到的平均损失用于在上一层中的训练主函数中计算梯度</span></span><br><span class="line">        avg_cost = fluid.layers.mean(cost)</span><br><span class="line">        <span class="comment"># 计算当前预测精度</span></span><br><span class="line">        accuracy = fluid.layers.accuracy(input=predict, label=label)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回平均损失和预测精度</span></span><br><span class="line">    <span class="keyword">return</span> [avg_cost, accuracy]</span><br></pre></td></tr></table></figure>
<p>训练程序是在训练过程中通过模型返回的predict结果来计算损失率和预测精度的函数。这里特别处理了GoogleNet的三个损失率分量的加权求和计算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 优化器程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">optimizer_program</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 输入学习率，也就是训练的速度，这里与网络的训练收敛速度有关</span></span><br><span class="line">    <span class="keyword">return</span> fluid.optimizer.Adam(learning_rate=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure>
<p>优化器程序是在训练过程中通过设置学习率、也就是训练的速度后返回一个特定的Adam优化器实例的函数，这是python类的用法。Adam优化器是优化器的一种，对梯度的一阶矩估计和二阶矩估计进行综合考虑，计算出当前神经网络中各个神经元的参数更新的步长，以加快梯度下降速度。Adam优化器在当前深度学习优化器中被默认是相当优异的</p>
<h5 id="训练主函数"><a href="#训练主函数" class="headerlink" title="训练主函数"></a>训练主函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 训练主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(use_cuda, model, params_dirname=None)</span>:</span></span><br><span class="line">    <span class="comment"># 事实上本次训练使用的是CPU，所以use_cuda应当固定为False</span></span><br><span class="line">    place = fluid.CUDAPlace(<span class="number">0</span>) <span class="keyword">if</span> use_cuda <span class="keyword">else</span> fluid.CPUPlace()</span><br><span class="line">    <span class="comment"># 每次训练所选取的样本数量，适当的batch_size可以使得数据并行化处理且梯度下降的方向更加明确</span></span><br><span class="line">    <span class="keyword">if</span> model == <span class="string">'inception_v4'</span>:</span><br><span class="line">        <span class="comment"># 针对inception_v4调整batch_size</span></span><br><span class="line">        BATCH_SIZE = <span class="number">256</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        BATCH_SIZE = <span class="number">128</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练集数据输入，这里使用了shuffle，是用来将读入的数据进行打乱操作的</span></span><br><span class="line">    <span class="comment"># 所以需要定义一个打乱缓冲区的大小buf_size</span></span><br><span class="line">    train_reader = paddle.batch(</span><br><span class="line">        paddle.reader.shuffle(</span><br><span class="line">            paddle.dataset.cifar.train10(), buf_size=<span class="number">128</span>*<span class="number">100</span>), </span><br><span class="line">        batch_size=BATCH_SIZE);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 测试集数据输入</span></span><br><span class="line">    test_reader = paddle.batch(</span><br><span class="line">        paddle.dataset.cifar.test10(), batch_size=BATCH_SIZE)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"\nstart training"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输入数据的先后顺序格式</span></span><br><span class="line">    feed_order = [<span class="string">'pixel'</span>, <span class="string">'label'</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 生成默认的训练主程序和启动程序</span></span><br><span class="line">    main_program = fluid.default_main_program()</span><br><span class="line">    star_program = fluid.default_startup_program()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出预测结果，这里没有传入数据是因为数据传入操作是之后的训练过程中设置的</span></span><br><span class="line">    predict = inference_network(model)</span><br><span class="line">    <span class="comment"># 获取训练结果</span></span><br><span class="line">    avg_cost, acc = train_network(predict, model)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 此处开始是测试程序</span></span><br><span class="line">    test_program = main_program.clone(for_test=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 优化器</span></span><br><span class="line">    optimizer = optimizer_program()</span><br><span class="line">    <span class="comment"># 告诉优化器在当前平均损失的基础上计算梯度以减少损失</span></span><br><span class="line">    optimizer.minimize(avg_cost)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 执行器，将以上操作放入CPU执行</span></span><br><span class="line">    exe = fluid.Executor(place)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># epoch意思为所有数据项目完成一次前向运算和反向传播的次数</span></span><br><span class="line">    <span class="comment"># 这里因为我们训练时间有限，还是1~3次就够了</span></span><br><span class="line">    EPOCH_NUM = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计图横纵坐标的列表</span></span><br><span class="line">    train_steps=[]</span><br><span class="line">    train_costs=[]</span><br><span class="line">    test_steps=[]</span><br><span class="line">    test_costs=[]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 对训练结果进行损失率检测的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_test</span><span class="params">(program, reader)</span>:</span></span><br><span class="line">        <span class="comment"># 检测次数count</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 输入数据的变量名列表，这里应该就是feed_order中的‘pixel’和‘label’</span></span><br><span class="line">        <span class="comment"># global_block经查应该是fluid的全局作用域</span></span><br><span class="line">        feed_var_list = [</span><br><span class="line">            program.global_block().var(var_name) <span class="keyword">for</span> var_name <span class="keyword">in</span> feed_order</span><br><span class="line">        ]</span><br><span class="line">        <span class="comment"># 数据喂入器DataFeeder负责将数据读取器的输入转换成一种特殊的数据结构中去</span></span><br><span class="line">        <span class="comment"># 从而能够将该数据结构的数据输入到执行器中</span></span><br><span class="line">        feeder_test = fluid.DataFeeder(feed_list=feed_var_list, place=place)</span><br><span class="line">        test_exe = fluid.Executor(place);</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 这个变量是记录包括数据变量名在内的所有数据个数以及对应的损失率的</span></span><br><span class="line">        accumulated = len([avg_cost, acc]) * [<span class="number">0</span>];</span><br><span class="line">        <span class="comment"># 将数据读取器reader中获取到的输入数据通过enumerate转换为索引序列</span></span><br><span class="line">        <span class="keyword">for</span> tid, test_data <span class="keyword">in</span> enumerate(reader()):</span><br><span class="line">            <span class="comment"># 执行训练结果损失率检测的执行器test_exe，喂入测试集数据test_data，得到当前的平均损失率avg_cost_np</span></span><br><span class="line">            avg_cost_np = test_exe.run(</span><br><span class="line">                program=program,</span><br><span class="line">                feed=feeder_test.feed(test_data),</span><br><span class="line">                fetch_list=[avg_cost, acc])</span><br><span class="line">            <span class="comment"># 记录当前的数据个数，这里使用的zip函数将accumulate和avg_cost_np打包成了一个元组进行记录</span></span><br><span class="line">            <span class="comment"># 其中x[1][0]应该是avg_cost_np中的第一项，也就是损失率loss</span></span><br><span class="line">            accumulated = [x[<span class="number">0</span>] + x[<span class="number">1</span>][<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> zip(accumulated, avg_cost_np)]</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回的是accumulated中每一条记录中的x与count相除的结果，为平均每次检测得到的损失率</span></span><br><span class="line">        <span class="keyword">return</span> [x/count <span class="keyword">for</span> x <span class="keyword">in</span> accumulated]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 训练循环函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train_loop</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="comment"># 同样是输入数据的变量名列表，应该就是feed_order中的‘pixel’和‘label’</span></span><br><span class="line">        feed_var_list_loop = [</span><br><span class="line">            main_program.global_block().var(var_name) <span class="keyword">for</span> var_name <span class="keyword">in</span> feed_order</span><br><span class="line">        ]</span><br><span class="line">        feeder = fluid.DataFeeder(feed_list=feed_var_list_loop, place=place)</span><br><span class="line">        <span class="comment"># 开始运行启动程序</span></span><br><span class="line">        exe.run(star_program)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录训练次数</span></span><br><span class="line">        step = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练次数id为pass_id，range生成了一个以epoch次数的</span></span><br><span class="line">        <span class="keyword">for</span> pass_id <span class="keyword">in</span> range(EPOCH_NUM):</span><br><span class="line">            <span class="comment"># 每次训练中的分组训练次数step_id，</span></span><br><span class="line">            <span class="keyword">for</span> step_id, train_data <span class="keyword">in</span> enumerate(train_reader()):</span><br><span class="line">                <span class="comment"># 执行训练执行器，喂入训练集数据train_data，得到当前的平均损失率avg_lost_value</span></span><br><span class="line">                avg_loss_value = exe.run(</span><br><span class="line">                    main_program,</span><br><span class="line">                    feed=feeder.feed(train_data),</span><br><span class="line">                    fetch_list=[avg_cost, acc])</span><br><span class="line">                <span class="comment"># 每50次输出一次训练结果，分别是训练次数，分组训练次数，损失率，预测精度</span></span><br><span class="line">                <span class="keyword">if</span> step_id % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">                    print(<span class="string">"\nPass %d, Batch %d, Cost %f, Acc %f"</span> % (</span><br><span class="line">                        step_id, pass_id, avg_loss_value[<span class="number">0</span>], avg_loss_value[<span class="number">1</span>]))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则单纯输出点表示正在训练</span></span><br><span class="line">                    sys.stdout.write(<span class="string">'.'</span>)</span><br><span class="line">                    sys.stdout.flush()</span><br><span class="line">                    <span class="comment"># 并更新一次训练损失率统计图</span></span><br><span class="line">                    train_steps.append(step)</span><br><span class="line">                    train_costs.append(avg_loss_value[<span class="number">0</span>])</span><br><span class="line">                step += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># 每次训练的全部分组训练结束后，进行一次损失率检测，</span></span><br><span class="line">            avg_cost_test, accuracy_test = train_test(test_program, reader=test_reader)</span><br><span class="line">            <span class="comment"># 输出损失率检测结果</span></span><br><span class="line">            print(<span class="string">'\nTest with Pass &#123;0&#125;, Loss &#123;1:2.2&#125;, Acc &#123;2:2.2&#125;'</span>.format(</span><br><span class="line">                pass_id, avg_cost_test, accuracy_test))</span><br><span class="line">            <span class="comment"># 并更新一次检测损失率统计图</span></span><br><span class="line">            test_steps.append(step)</span><br><span class="line">            test_costs.append(avg_cost_test)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 若模型保存地址为有效，则自动保存本次训练的模型结果</span></span><br><span class="line">            <span class="comment"># 其中从第二个开始的变量意思为：</span></span><br><span class="line">            <span class="comment"># 喂入数据的基本格式（pixel）</span></span><br><span class="line">            <span class="comment"># 保存预测结果所使用的变量组（predict）</span></span><br><span class="line">            <span class="comment"># 执行预测程序（exe=fluid.Executor(place)）</span></span><br><span class="line">            <span class="keyword">if</span> params_dirname <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">if</span> model == <span class="string">'googlenet'</span>:</span><br><span class="line">                    model_out, _, _ = predict</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    model_out = predict</span><br><span class="line">                fluid.io.save_inference_model(params_dirname, [<span class="string">"pixel"</span>], [model_out], exe)</span><br><span class="line">                </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在以上函数和变量定义全部结束后，即可开始训练</span></span><br><span class="line">    train_loop();</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练结束后绘制损失率统计图</span></span><br><span class="line">    %matplotlib inline</span><br><span class="line">    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">    </span><br><span class="line">    train_title = <span class="string">"Train cost"</span></span><br><span class="line">    test_title = <span class="string">"Test cost"</span></span><br><span class="line">    title = <span class="string">"Train cost/Test cost"</span></span><br><span class="line">    <span class="comment"># 标题，横纵坐标</span></span><br><span class="line">    plt.title(title, fontsize=<span class="number">24</span>) </span><br><span class="line">    plt.xlabel(<span class="string">"step"</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    plt.ylabel(<span class="string">"cost"</span>, fontsize=<span class="number">14</span>)</span><br><span class="line">    <span class="comment"># 设置图例</span></span><br><span class="line">    plt.plot(train_steps, train_costs, color=<span class="string">'blue'</span>, label=train_title)</span><br><span class="line">    plt.plot(test_steps, test_costs, color=<span class="string">'red'</span>, label=test_title)</span><br><span class="line">    plt.legend()</span><br><span class="line">    <span class="comment"># 显示统计图</span></span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p>训练主函数train相对较长，而且还内部声明了对训练结果进行损失率检测的train_test、训练循环函数train_loop几个函数，这里绘制了程序流程图以方便理解，如下图所示：</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/train-func.png" alt="训练主函数"></p>
<p>从代码和流程图中，我们可以看出训练主函数的主要工作是：</p>
<ul>
<li>对训练进行一系列的函数调用关系的绑定、变量的声明和初始化以及训练所需的主要元器件实例（执行器、启动函数、主函数、优化器、数据集）的生成</li>
<li>进行实际训练过程中的执行、模型生成、数据生成</li>
<li>训练结束后图表的绘制</li>
</ul>
<p>在这里需要说明的有以下几点：</p>
<ul>
<li><p>在paddlepaddle中损失率为均方差函数得出的，故没有固定单位，但是一般在训练过程中是呈现总体下降的趋势，损失率越低，模型的效果越好。</p>
</li>
<li><p>准确度较容易理解，就是当前模型能够准确识别的样本个数占当前训练样本或测试样本的百分比。</p>
</li>
<li><p>batch_size是指每次训练时输入的样本个数，合理的batch_size设置能够减缓在训练过程中的损失率上下震荡的趋势，使得模型的损失率下降速度更快，精确率提升更加明显。根据经验，过大的batch_size可能会导致损失率下降或精确度提升到某一点后停滞，并且导致每次训练的时间和性能开销增大，过小的batch_size则会导致损失率上下震荡，下降速度减慢。</p>
</li>
<li><p>epoch是指所有样本完成一次前向运算和反向传播的次数，也就是所有样本都参与过训练的次数。epoch决定了整个训练的总时长，如果使用的是GPU，则可以因为并行处理性能高、训练速度较快而将epoch定在30~50甚至更多，而使用CPU则建议1~5，否则将导致训练时间过长，无法及时生成模型文件。</p>
</li>
</ul>
<h5 id="预测主函数"><a href="#预测主函数" class="headerlink" title="预测主函数"></a>预测主函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预测主程序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infer</span><span class="params">(use_cuda, params_dirname=None)</span>:</span></span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">    <span class="comment"># 事实上本次训练使用的是CPU，所以use_cuda应当固定为False</span></span><br><span class="line">    place = fluid.CUDAPlace(<span class="number">0</span>) <span class="keyword">if</span> use_cuda <span class="keyword">else</span> fluid.CPUPlace()</span><br><span class="line">    <span class="comment"># 创建执行器</span></span><br><span class="line">    exe = fluid.Executor(place)</span><br><span class="line">    <span class="comment"># 创建用于预测的局部作用域</span></span><br><span class="line">    inference_scope = fluid.core.Scope()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用于装载需要预测的图片的子函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_image</span><span class="params">(infer_file)</span>:</span></span><br><span class="line">        <span class="comment"># 打开图片</span></span><br><span class="line">        im = Image.open(infer_file)</span><br><span class="line">        </span><br><span class="line">        %matplotlib inline</span><br><span class="line">        <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">        <span class="comment"># 清空plt输出</span></span><br><span class="line">        plt.close()</span><br><span class="line">        <span class="comment"># 输出当前图片</span></span><br><span class="line">        plt.imshow(im)</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="comment"># 将图片拉伸为32 * 32，与训练图片相同的大小</span></span><br><span class="line">        im = im.resize((<span class="number">32</span>, <span class="number">32</span>), Image.ANTIALIAS)</span><br><span class="line">        <span class="comment"># 将图片转换为像素数组</span></span><br><span class="line">        im = numpy.array(im).astype(numpy.float32)</span><br><span class="line">        <span class="comment"># 注意，一般存储图片的像素数组格式为W（宽度）、H（高度）、C（像素通道）</span></span><br><span class="line">        <span class="comment"># 但是paddlepaddle需要将格式转换为CHW格式，所以使用了transpose函数</span></span><br><span class="line">        im = im.transpose((<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># 过滤值为255以上的颜色，也就是进行灰度变换</span></span><br><span class="line">        im = im/<span class="number">255.0</span></span><br><span class="line">        <span class="comment"># 向图片添加一个维度用来模拟为列表结构，事实上该维度只有这张图片一个元素</span></span><br><span class="line">        im = numpy.expand_dims(im, axis=<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 返回处理好的图片</span></span><br><span class="line">        <span class="keyword">return</span> im</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取程序所在的当前位置</span></span><br><span class="line">    cur_dir = os.path.dirname(os.path.realpath(<span class="string">'__file__'</span>))</span><br><span class="line">    <span class="comment"># 设置预测图片</span></span><br><span class="line">    img = load_image(cur_dir + <span class="string">'/image/dog.png'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进入当前的局部作用域</span></span><br><span class="line">    <span class="keyword">with</span> fluid.scope_guard(inference_scope):</span><br><span class="line">        <span class="comment"># 使用fluid.io.load_inference_model去获取以下的信息</span></span><br><span class="line">        <span class="comment"># inference_program：当前的预测程序</span></span><br><span class="line">        <span class="comment"># feed_target_names：喂入数据需要的变量名称</span></span><br><span class="line">        <span class="comment"># fetch_targets：获取数据的目标，通过使用这个目标从而在exe.run中输入fetch_list</span></span><br><span class="line">        [inference_program, feed_target_names, fetch_targets] = fluid.io.load_inference_model(params_dirname, exe)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输入到神经网络的维度数目一般为4D或5D，使用trainpiler这种编译方式可以将输入的数据结构进行转译</span></span><br><span class="line">        <span class="comment"># 转译的目的主要是能够将fluid生成的对应自有fluid解释器、</span></span><br><span class="line">        <span class="comment"># 而非Python解释器（这样速度更快）的protobuf message表示的程序翻译成 C++ 或其他语言的程序</span></span><br><span class="line">        inference_transpiler_program = inference_program.clone()</span><br><span class="line">        t = fluid.transpiler.InferenceTranspiler()</span><br><span class="line">        t.transpile(inference_transpiler_program, place)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将喂入得数据构造成如下结构&#123;feed_target_name: feed_target_data&#125;</span></span><br><span class="line">        <span class="comment"># 预测的结构带有与fetch_targets对应的一系列数据</span></span><br><span class="line">        <span class="comment"># 这里分别使用带有trainpiler转译和不带有转译的程序进行预测</span></span><br><span class="line">        results = exe.run(inference_program,</span><br><span class="line">            feed=&#123;feed_target_names[<span class="number">0</span>]: img&#125;,</span><br><span class="line">            fetch_list=fetch_targets)</span><br><span class="line">            </span><br><span class="line">        transpiler_results = exe.run(inference_transpiler_program,</span><br><span class="line">            feed=&#123;feed_target_names[<span class="number">0</span>]: img&#125;,</span><br><span class="line">            fetch_list=fetch_targets)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 断言，确定以上两次预测的结果(就1个，所以是[0])的长度是否相同</span></span><br><span class="line">        <span class="comment"># 若相同则继续比对结果中的各个项目是否相同</span></span><br><span class="line">        <span class="comment"># 总之，就是在比对转译前后结果是否能够相同</span></span><br><span class="line">        <span class="keyword">assert</span> len(results[<span class="number">0</span>]) == len(transpiler_results[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(results[<span class="number">0</span>])):</span><br><span class="line">            numpy.testing.assert_almost_equal(</span><br><span class="line">                results[<span class="number">0</span>][i], transpiler_results[<span class="number">0</span>][i], decimal=<span class="number">5</span>)</span><br><span class="line">        </span><br><span class="line">         <span class="comment"># 预测标签，这个顺序一般是和训练的模型数据的顺序相同的</span></span><br><span class="line">        label_list = [</span><br><span class="line">            <span class="string">"airplane"</span>, <span class="string">"automobile"</span>, <span class="string">"bird"</span>, <span class="string">"cat"</span>, <span class="string">"deer"</span>, <span class="string">"dog"</span>, <span class="string">"frog"</span>,</span><br><span class="line">            <span class="string">"horse"</span>, <span class="string">"ship"</span>, <span class="string">"truck"</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出预测结果</span></span><br><span class="line">        print(<span class="string">"infer results: %s"</span> % label_list[numpy.argmax(results[<span class="number">0</span>])])</span><br></pre></td></tr></table></figure>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/predict-func.png" alt="预测主函数"></p>
<center>图2.7 预测主函数predict的程序流程图</center>

<h5 id="程序主函数"><a href="#程序主函数" class="headerlink" title="程序主函数"></a>程序主函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(use_cuda)</span>:</span></span><br><span class="line">    <span class="comment"># 如果需要使用GPU的CUDA函数库，则需要判断fluid是否根据cuda进行了编译</span></span><br><span class="line">    <span class="keyword">if</span> use_cuda <span class="keyword">and</span> <span class="keyword">not</span> fluid.core.is_compiled_with_cuda():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意：更改训练模型请更改此处的model变量</span></span><br><span class="line">    model=<span class="string">'googlenet'</span></span><br><span class="line">    <span class="comment"># 模型文件保存路径</span></span><br><span class="line">    save_path = <span class="string">'image_classification_'</span>+model+<span class="string">'.inference.model'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 训练</span></span><br><span class="line">    train(use_cuda=use_cuda, model=model, params_dirname=save_path)</span><br><span class="line">    <span class="comment"># 注意：如果报出optimzer相关的错误，可以尝试在kernel操作中“重启”，之后再从头开始重新运行</span></span><br><span class="line">    <span class="comment"># 这一错误可能是在对部分函数中途修改并重新运行后optimizer不再识别其输入导致的问题</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预测，如果训练已经得出了save_path指定的模型文件</span></span><br><span class="line">    <span class="comment"># 预测程序则可以独立运行，否则不可以运行</span></span><br><span class="line">    infer(use_cuda=use_cuda, params_dirname=save_path)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 根据当前测试环境，使用CPU</span></span><br><span class="line">    main(use_cuda=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>程序主函数main的主要功能是先确定环境变量：使用CPU/GPU、当前使用的模型名称、模型文件保存路径等，再执行训练主函数和预测主函数，是整个程序的最顶层模块。</p>
<h4 id="编写神经网络模型代码"><a href="#编写神经网络模型代码" class="headerlink" title="编写神经网络模型代码"></a>编写神经网络模型代码</h4><p>注：由于在“实验原理”章节中，对于各神经网络模型的关键技术原理和关键模块结构已经进行了说明，此处代码部分对于这些内容不再重复解释。</p>
<p>在整体上，神经网络模型的实现主要是基于paddlepaddle提供的卷积层、池化层、全连接层等函数API以及层与层之间的连接来实现的，各神经网络的共性的地方在于以下2点：</p>
<ul>
<li>经过若干个卷积、池化层结构之后，在最后输出结果之前的一层全连接层中都要经历一次softmax归一化，通过softmax归一化得到每个类别的概率，softmax能够将输入映射为0-1之间的实数，作为取到某个分类的概率，作为最终的输出结果。</li>
<li>在每一组神经网络之间，常用dropout层对结果按照一定概率随机丢弃一些特征，以防止过拟合；同时也常用batchnorm，将每次输入的数据分布进行规范化，让其均匀分布在当前层上，从而加速神经网络的训练速度、同样防止过拟合。</li>
</ul>
<h5 id="VGG模型"><a href="#VGG模型" class="headerlink" title="VGG模型"></a>VGG模型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vgg模型定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码来自：http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vgg_bn_drop</span><span class="params">(input)</span>:</span></span><br><span class="line">    <span class="comment"># 创建神经网络的公用函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv_block</span><span class="params">(ipt, num_filter, groups, dropouts)</span>:</span></span><br><span class="line">        <span class="comment"># 返回根据传入参数创建的神经网络</span></span><br><span class="line">        <span class="keyword">return</span> fluid.nets.img_conv_group(</span><br><span class="line">            <span class="comment"># 图像输入</span></span><br><span class="line">            input=ipt,</span><br><span class="line">            <span class="comment"># 池化窗口大小为2*2</span></span><br><span class="line">            pool_size=<span class="number">2</span>,</span><br><span class="line">            <span class="comment"># 池化窗口移动的步长</span></span><br><span class="line">            pool_stride=<span class="number">2</span>,</span><br><span class="line">            <span class="comment"># 该神经网络层组的过滤器数量，可以认为是神经元个数</span></span><br><span class="line">            conv_num_filter=[num_filter] * groups,</span><br><span class="line">            <span class="comment"># 过滤器大小，默认值为3</span></span><br><span class="line">            conv_filter_size=<span class="number">3</span>,</span><br><span class="line">            <span class="comment"># 激活函数的类型，这里选用RELU</span></span><br><span class="line">            conv_act=<span class="string">'relu'</span>,</span><br><span class="line">            <span class="comment"># 在每一层后使用batchnorm以加速神经网络训练速度</span></span><br><span class="line">            <span class="comment"># batchnorm能够将每次输入的数据分布进行规范化</span></span><br><span class="line">            conv_with_batchnorm=<span class="literal">True</span>,</span><br><span class="line">            <span class="comment"># 对于每一层进行batchnorm后的dropout概率</span></span><br><span class="line">            <span class="comment"># dropout是避免过拟合的手段，按照一定概率随机丢弃一些特征</span></span><br><span class="line">            conv_batchnorm_drop_rate=dropouts,</span><br><span class="line">            <span class="comment"># 池化类型为最大池化，提取每个池化窗口中的最显著特征</span></span><br><span class="line">            pool_type=<span class="string">'max'</span>)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># 以下各函数中最后一个列表为每一层结束后dropout的概率</span></span><br><span class="line">    <span class="comment"># 一般在两组卷积层之间不使用dropout</span></span><br><span class="line">    <span class="comment"># 第1组卷积层，2次连续卷积，卷积核数目64</span></span><br><span class="line">    conv1 = conv_block(input, <span class="number">64</span>, <span class="number">2</span>, [<span class="number">0.3</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 第2组卷积层，2次连续卷积，卷积核数目128</span></span><br><span class="line">    conv2 = conv_block(conv1, <span class="number">128</span>, <span class="number">2</span>, [<span class="number">0.4</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 第3组卷积层，3次连续卷积，卷积核数目为256</span></span><br><span class="line">    conv3 = conv_block(conv2, <span class="number">256</span>, <span class="number">3</span>, [<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 第4组卷积层，3次连续卷积，卷积核数目为512</span></span><br><span class="line">    conv4 = conv_block(conv3, <span class="number">512</span>, <span class="number">3</span>, [<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0</span>])</span><br><span class="line">    <span class="comment"># 第5组卷积层，3次连续卷积，卷积核数目为512</span></span><br><span class="line">    conv5 = conv_block(conv4, <span class="number">512</span>, <span class="number">3</span>, [<span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后一层结束后添加一层概率为0.5的dropout层</span></span><br><span class="line">    drop = fluid.layers.dropout(x=conv5, dropout_prob=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 添加全连接层，维度数为512</span></span><br><span class="line">    fc1 = fluid.layers.fc(input=drop, size=<span class="number">512</span>, act=<span class="literal">None</span>)</span><br><span class="line">    <span class="comment"># 在全连接层结束后添加batchnorm防止过拟合</span></span><br><span class="line">    bn = fluid.layers.batch_norm(input=fc1, act=<span class="string">'relu'</span>)</span><br><span class="line">    <span class="comment"># 添加概率为0.5的dropout层</span></span><br><span class="line">    drop2 = fluid.layers.dropout(x=bn, dropout_prob=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 添加全连接层，维度数为512</span></span><br><span class="line">    fc2 = fluid.layers.fc(input=drop2, size=<span class="number">512</span>, act=<span class="literal">None</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 最后，添加预测用的全连接层，映射到类别维度大小的向量，本次数据类别一共10种</span></span><br><span class="line">    <span class="comment"># 通过softmax归一化得到每个类别的概率，softmax是将输入映射为0-1之间的实数，作为取到某个分类的概率</span></span><br><span class="line">    <span class="comment"># 可以认为是一个分类器</span></span><br><span class="line">    predict = fluid.layers.fc(input=fc2, size=<span class="number">10</span>, act=<span class="string">'softmax'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出最终的结果</span></span><br><span class="line">    <span class="keyword">return</span> predict</span><br></pre></td></tr></table></figure>
<h5 id="ResNet模型"><a href="#ResNet模型" class="headerlink" title="ResNet模型"></a>ResNet模型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># resnet模型定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码来自：http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下为resnet_cifar10需要用到的工具函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># conv_bn_layer为自带batchnorm的神经网络层</span></span><br><span class="line"><span class="comment"># input为输入，ch_out为滤波器个数，该个数与输出图像通道相同，故赋值为channel_out=ch_out</span></span><br><span class="line"><span class="comment"># filter_size为过滤器大小，stride为窗口移动的步长</span></span><br><span class="line"><span class="comment"># padding为填充格式，VALID对于多出来的数据直接丢弃，SAME将多出来的数据继续填充到下一层的额外行和列</span></span><br><span class="line"><span class="comment"># act为激活函数，这里使用RELU函数</span></span><br><span class="line"><span class="comment"># bias_attr为False，说明不需要得到单个卷积核卷积图片的结果</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">conv_bn_layer</span><span class="params">(input,</span></span></span><br><span class="line"><span class="function"><span class="params">                  ch_out,</span></span></span><br><span class="line"><span class="function"><span class="params">                  filter_size,</span></span></span><br><span class="line"><span class="function"><span class="params">                  stride,</span></span></span><br><span class="line"><span class="function"><span class="params">                  padding,</span></span></span><br><span class="line"><span class="function"><span class="params">                  act=<span class="string">'relu'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                  bias_attr=False)</span>:</span></span><br><span class="line">    tmp = fluid.layers.conv2d(</span><br><span class="line">        input=input,</span><br><span class="line">        filter_size=filter_size,</span><br><span class="line">        num_filters=ch_out,</span><br><span class="line">        stride=stride,</span><br><span class="line">        padding=padding,</span><br><span class="line">        act=<span class="literal">None</span>,</span><br><span class="line">        bias_attr=bias_attr)</span><br><span class="line">    <span class="keyword">return</span> fluid.layers.batch_norm(input=tmp, act=act)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shortcut为残差模块的“直连路径”</span></span><br><span class="line"><span class="comment"># 在resnet中引入残差模块后，解决了网络层数加深导致准确度下降的问题</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shortcut</span><span class="params">(input, ch_in, ch_out, stride)</span>:</span></span><br><span class="line">    <span class="comment"># 残差模块输入和输出特征通道数不等时，采用1x1卷积的升维操作</span></span><br><span class="line">    <span class="keyword">if</span> ch_in != ch_out:</span><br><span class="line">        <span class="keyword">return</span> conv_bn_layer(input, ch_out, <span class="number">1</span>, stride, <span class="number">0</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 残差模块输入和输出通道相等时，采用直连操作</span></span><br><span class="line">        <span class="keyword">return</span> input</span><br><span class="line"></span><br><span class="line"><span class="comment"># basicblock为基础残差模块，由两组3x3卷积组成的路径和一条"直连"路径组成</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">basicblock</span><span class="params">(input, ch_in, ch_out, stride)</span>:</span></span><br><span class="line">    <span class="comment"># 由两组3x3卷积组成的路径</span></span><br><span class="line">    tmp = conv_bn_layer(input, ch_out, <span class="number">3</span>, stride, <span class="number">1</span>)</span><br><span class="line">    tmp = conv_bn_layer(tmp, ch_out, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, act=<span class="literal">None</span>, bias_attr=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 一条“直连”路径</span></span><br><span class="line">    short = shortcut(input, ch_in, ch_out, stride)</span><br><span class="line">    <span class="comment"># 使用fluid自动在每一层后添加这一残差模块的输入</span></span><br><span class="line">    <span class="keyword">return</span> fluid.layers.elementwise_add(x=tmp, y=short, act=<span class="string">'relu'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># layer_warp为一组残差模块，由若干个残差模块堆积而成</span></span><br><span class="line"><span class="comment"># 这里的block_func事实上指的就是basicblock</span></span><br><span class="line"><span class="comment"># ch_in和ch_out分别为输入输出通道</span></span><br><span class="line"><span class="comment"># count为残差模块的个数，stride为窗口移动步长</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">layer_warp</span><span class="params">(block_func, input, ch_in, ch_out, count, stride)</span>:</span></span><br><span class="line">    tmp = block_func(input, ch_in, ch_out, stride)</span><br><span class="line">    <span class="comment"># 每组中第一个残差模块滑动窗口大小与其他可以不同，以用来减少特征图在垂直和水平方向的大小</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, count):</span><br><span class="line">        tmp = block_func(tmp, ch_out, ch_out, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># resnet_cifar10模型主函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resnet_cifar10</span><span class="params">(ipt, depth=<span class="number">32</span>)</span>:</span></span><br><span class="line">    <span class="comment"># 除第一层卷积层和最后一层全连接层之外</span></span><br><span class="line">    <span class="comment"># 要求三组 layer_warp 总的含参层数能够被6整除</span></span><br><span class="line">    <span class="comment"># 即 resnet_cifar10 的 depth 要满足 (depth−2) </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 因此深度的可能取值： 20, 32, 44, 56, 110, 1202</span></span><br><span class="line">    <span class="keyword">assert</span> (depth - <span class="number">2</span>) % <span class="number">6</span> == <span class="number">0</span></span><br><span class="line">    n = (depth - <span class="number">2</span>) // <span class="number">6</span></span><br><span class="line">    nStages = &#123;<span class="number">16</span>, <span class="number">64</span>, <span class="number">128</span>&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 底层输入连接一层带batchnorm的卷积层</span></span><br><span class="line">    conv1 = conv_bn_layer(ipt, ch_out=<span class="number">16</span>, filter_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 连接3组残差模块</span></span><br><span class="line">    res1 = layer_warp(basicblock, conv1, <span class="number">16</span>, <span class="number">16</span>, n, <span class="number">1</span>)</span><br><span class="line">    res2 = layer_warp(basicblock, res1, <span class="number">16</span>, <span class="number">32</span>, n, <span class="number">2</span>)</span><br><span class="line">    res3 = layer_warp(basicblock, res2, <span class="number">32</span>, <span class="number">64</span>, n, <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 对网络做均值池化，可以看到pool_type=‘avg’表示均值池化</span></span><br><span class="line">    pool = fluid.layers.pool2d(</span><br><span class="line">        input=res3, pool_size=<span class="number">8</span>, pool_type=<span class="string">'avg'</span>, pool_stride=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 添加全连接层作为预测层，通过softmax归一化得到每个类别的概率</span></span><br><span class="line">    predict = fluid.layers.fc(input=pool, size=<span class="number">10</span>, act=<span class="string">'softmax'</span>)</span><br><span class="line">    <span class="keyword">return</span> predict</span><br></pre></td></tr></table></figure>
<h5 id="GoogleNet模型"><a href="#GoogleNet模型" class="headerlink" title="GoogleNet模型"></a>GoogleNet模型</h5><p>我们获得的初始GoogleNet模型代码使用的是早期的paddlepaddle版本，因此我们花费了一些时间查阅了paddlepaddle官网的API文档，研究了不同版本之间的API对应关系和调用方式上的差异。最终，我们成功地将该模型代码移植到了AI Studio在线项目平台上的paddlepaddle V1.4版本上。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># googlenet模型定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码来自：https://www.cnblogs.com/charlotte77/p/8066867.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下为googlenet需要用到的工具函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># inception为一个inceoption网络，目前已经发展到了inceptionV4和inception-resnet</span></span><br><span class="line"><span class="comment"># inception主要的特点是在同一层级上运行多个不同尺寸的卷积层，这一特性解决了多个问题</span></span><br><span class="line"><span class="comment"># 1. 消除了信息分布的均匀程度对卷积核大小的选取影响</span></span><br><span class="line"><span class="comment"># 2. 减缓了网络层数过深导致的梯度损失以及过拟合</span></span><br><span class="line"><span class="comment"># 3. 缓解了简单堆叠多层网络导致的计算资源的消耗</span></span><br><span class="line"><span class="comment"># 但是这个特点同样带来了缺陷：</span></span><br><span class="line"><span class="comment"># 池化层不会改变特征通道数，拼接后会导致特征的通道数较大，经过几层这样的模块堆积后，通道数会越来越大，导致参数和计算量也随之增大</span></span><br><span class="line"><span class="comment"># 因此，inception还通过引入3个1*1卷积层进行降维，减少通道数</span></span><br><span class="line"><span class="comment"># 下面的版本是inceptionv1版本，v2引入batchnorm，v3对卷积层进一步分解，v4引入了res-net</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些参数的意思为：</span></span><br><span class="line"><span class="comment"># name：整个inception的名称</span></span><br><span class="line"><span class="comment"># channels：通道个数</span></span><br><span class="line"><span class="comment"># filter1、filter3R、filter3、filter5R、filter5、proj：各个卷积层的过滤器数量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inception</span><span class="params">(name, input, channels, filter1, filter3R, filter3, filter5R,</span></span></span><br><span class="line"><span class="function"><span class="params">              filter5, proj)</span>:</span></span><br><span class="line">    <span class="comment"># 1*1卷积层_1</span></span><br><span class="line">    cov1 = fluid.layers.conv2d(</span><br><span class="line">        input=input,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=filter1,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1*1卷积层_3r</span></span><br><span class="line">    cov3r = fluid.layers.conv2d(</span><br><span class="line">        input=input,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=filter3R,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 1*1卷积层_3r的下一层3*3卷积层</span></span><br><span class="line">    cov3 = fluid.layers.conv2d(</span><br><span class="line">        input=cov3r,</span><br><span class="line">        filter_size=<span class="number">3</span>,</span><br><span class="line">        num_filters=filter3,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1*1卷积层_5r</span></span><br><span class="line">    cov5r = fluid.layers.conv2d(</span><br><span class="line">        input=input,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=filter5R,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 1*1卷积层_5r的下一层5*5卷积层</span></span><br><span class="line">    cov5 = fluid.layers.conv2d(</span><br><span class="line">        input=cov5r,</span><br><span class="line">        filter_size=<span class="number">5</span>,</span><br><span class="line">        num_filters=filter5,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3*3最大池化层</span></span><br><span class="line">    pool1 = fluid.layers.pool2d(</span><br><span class="line">        input=input,</span><br><span class="line">        pool_size=<span class="number">3</span>,</span><br><span class="line">        pool_type=<span class="string">"max"</span>,</span><br><span class="line">        pool_stride=<span class="number">1</span>,</span><br><span class="line">        pool_padding=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 3*3最大池化层的下一层1*1卷积层</span></span><br><span class="line">    covprj = fluid.layers.conv2d(</span><br><span class="line">        input=pool1,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=proj,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 全连接层将以上的结果汇总处理</span></span><br><span class="line">    cat = fluid.layers.concat(input=[cov1, cov3, cov5, covprj], axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> cat</span><br><span class="line"></span><br><span class="line"><span class="comment"># googlenet模型主函数</span></span><br><span class="line"><span class="comment"># class_dim为当前类别的维度个数，这里一共有10个类，因此填10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">googlenet</span><span class="params">(input, class_dim)</span>:</span></span><br><span class="line">    <span class="comment"># stage 1 </span></span><br><span class="line">    <span class="comment"># 7*7卷积层</span></span><br><span class="line">    conv1 = fluid.layers.conv2d(</span><br><span class="line">        input=input,</span><br><span class="line">        filter_size=<span class="number">7</span>,</span><br><span class="line">        num_filters=<span class="number">64</span>,</span><br><span class="line">        stride=<span class="number">2</span>,</span><br><span class="line">        padding=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 3*3最大池化层</span></span><br><span class="line">    pool1 = fluid.layers.pool2d(</span><br><span class="line">        input=conv1, pool_size=<span class="number">3</span>, pool_type=<span class="string">"max"</span>, pool_stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 2</span></span><br><span class="line">    <span class="comment"># 1*1卷积层</span></span><br><span class="line">    conv2_1 = fluid.layers.conv2d(</span><br><span class="line">        input=pool1,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=<span class="number">64</span>,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 3*3卷积层</span></span><br><span class="line">    conv2_2 = fluid.layers.conv2d(</span><br><span class="line">        input=conv2_1,</span><br><span class="line">        filter_size=<span class="number">3</span>,</span><br><span class="line">        num_filters=<span class="number">192</span>,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 3*3最大池化层</span></span><br><span class="line">    pool2 = fluid.layers.pool2d(</span><br><span class="line">        input=conv2_2, pool_size=<span class="number">3</span>, pool_type=<span class="string">'max'</span>, pool_stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 3</span></span><br><span class="line">    <span class="comment"># 2组inception+1个3*3最大池化层</span></span><br><span class="line">    ince3a = inception(<span class="string">"ince3a"</span>, pool2, <span class="number">192</span>, <span class="number">64</span>, <span class="number">96</span>, <span class="number">128</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    ince3b = inception(<span class="string">"ince3b"</span>, ince3a, <span class="number">256</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">192</span>, <span class="number">32</span>, <span class="number">96</span>, <span class="number">64</span>)</span><br><span class="line">    pool3 = fluid.layers.pool2d(</span><br><span class="line">        input=ince3b, pool_size=<span class="number">3</span>, pool_type=<span class="string">'max'</span>, pool_stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 4</span></span><br><span class="line">    <span class="comment"># 5组inception+1个3*3最大池化层</span></span><br><span class="line">    ince4a = inception(<span class="string">"ince4a"</span>, pool3, <span class="number">480</span>, <span class="number">192</span>, <span class="number">96</span>, <span class="number">208</span>, <span class="number">16</span>, <span class="number">48</span>, <span class="number">64</span>)</span><br><span class="line">    ince4b = inception(<span class="string">"ince4b"</span>, ince4a, <span class="number">512</span>, <span class="number">160</span>, <span class="number">112</span>, <span class="number">224</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">    ince4c = inception(<span class="string">"ince4c"</span>, ince4b, <span class="number">512</span>, <span class="number">128</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">    ince4d = inception(<span class="string">"ince4d"</span>, ince4c, <span class="number">512</span>, <span class="number">112</span>, <span class="number">144</span>, <span class="number">288</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">64</span>)</span><br><span class="line">    ince4e = inception(<span class="string">"ince4e"</span>, ince4d, <span class="number">528</span>, <span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">    pool4 = fluid.layers.pool2d(</span><br><span class="line">        input=ince4e, pool_size=<span class="number">3</span>, pool_type=<span class="string">'max'</span>, pool_stride=<span class="number">2</span>, pool_padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># stage 5</span></span><br><span class="line">    <span class="comment"># 2组inception+1个7*7最大池化层</span></span><br><span class="line">    ince5a = inception(<span class="string">"ince5a"</span>, pool4, <span class="number">832</span>, <span class="number">256</span>, <span class="number">160</span>, <span class="number">320</span>, <span class="number">32</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">    ince5b = inception(<span class="string">"ince5b"</span>, ince5a, <span class="number">832</span>, <span class="number">384</span>, <span class="number">192</span>, <span class="number">384</span>, <span class="number">48</span>, <span class="number">128</span>, <span class="number">128</span>)</span><br><span class="line">    pool5 = fluid.layers.pool2d(</span><br><span class="line">        input=ince5b,</span><br><span class="line">        pool_size=<span class="number">7</span>,</span><br><span class="line">        pool_stride=<span class="number">7</span>,</span><br><span class="line">        pool_type=<span class="string">"avg"</span>)</span><br><span class="line">    <span class="comment"># 添加丢弃概率为0.4的dropout层避免过拟合</span></span><br><span class="line">    drop1 = fluid.layers.dropout(x=pool5, dropout_prob=<span class="number">0.5</span>)</span><br><span class="line">    <span class="comment"># 最后一层全连接层进行主损失率out的输出，softmax归一化每个类别的概率</span></span><br><span class="line">    out = fluid.layers.fc(</span><br><span class="line">        input=drop1, size=class_dim, act=<span class="string">'softmax'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于计算损失率分量out1的第一个辅助的分类器</span></span><br><span class="line">    <span class="comment"># 5*5均值池化，注意这里的输入为ince4a的输出，也就是在生成out中途的输出</span></span><br><span class="line">    pool_o1 = fluid.layers.pool2d(</span><br><span class="line">        input=ince4a,</span><br><span class="line">        pool_size=<span class="number">5</span>,</span><br><span class="line">        pool_stride=<span class="number">3</span>,</span><br><span class="line">        pool_type=<span class="string">"avg"</span>,</span><br><span class="line">        pool_padding=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 1*1卷积</span></span><br><span class="line">    conv_o1 = fluid.layers.conv2d(</span><br><span class="line">        input=pool_o1,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=<span class="number">128</span>,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 带有激活函数RELU的全连接</span></span><br><span class="line">    fc_o1 = fluid.layers.fc(</span><br><span class="line">        input=conv_o1,</span><br><span class="line">        size=<span class="number">1024</span>,</span><br><span class="line">        act=<span class="string">"relu"</span>)</span><br><span class="line">    <span class="comment"># 添加丢弃概率为0.4的dropout层避免过拟合</span></span><br><span class="line">    drop2 = fluid.layers.dropout(x=fc_o1, dropout_prob=<span class="number">0.7</span>)</span><br><span class="line">    <span class="comment"># 最后一层全连接层softmax归一化后输出的out1</span></span><br><span class="line">    out1 = fluid.layers.fc(</span><br><span class="line">        input=drop2, size=class_dim, act=<span class="string">'softmax'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用于计算损失率分量out2的第二个辅助的分类器</span></span><br><span class="line">    <span class="comment"># 5*5均值池化，这里的输入为ince4d的输出，同样是在生成out中途的输出</span></span><br><span class="line">    pool_o2 = fluid.layers.pool2d(</span><br><span class="line">        input=ince4d,</span><br><span class="line">        pool_size=<span class="number">5</span>,</span><br><span class="line">        pool_stride=<span class="number">3</span>,</span><br><span class="line">        pool_type=<span class="string">"avg"</span>,</span><br><span class="line">        pool_padding=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 1*1卷积</span></span><br><span class="line">    conv_o2 = fluid.layers.conv2d(</span><br><span class="line">        input=pool_o2,</span><br><span class="line">        filter_size=<span class="number">1</span>,</span><br><span class="line">        num_filters=<span class="number">128</span>,</span><br><span class="line">        stride=<span class="number">1</span>,</span><br><span class="line">        padding=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 带有激活函数RELU的全连接</span></span><br><span class="line">    fc_o2 = fluid.layers.fc(</span><br><span class="line">        input=conv_o2,</span><br><span class="line">        size=<span class="number">1024</span>,</span><br><span class="line">        act=<span class="string">"relu"</span>)</span><br><span class="line">    <span class="comment"># 添加丢弃概率为0.4的dropout层避免过拟合</span></span><br><span class="line">    drop3 = fluid.layers.dropout(x=fc_o2, dropout_prob=<span class="number">0.7</span>)</span><br><span class="line">    <span class="comment"># 最后一层全连接层softmax归一化后输出的out1</span></span><br><span class="line">    out2 = fluid.layers.fc(</span><br><span class="line">        input=drop3, size=class_dim, act=<span class="string">'softmax'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出损失率的三个分量</span></span><br><span class="line">    <span class="keyword">return</span> out, out1, out2</span><br></pre></td></tr></table></figure>
<h5 id="Inception-V4模型"><a href="#Inception-V4模型" class="headerlink" title="Inception-V4模型"></a>Inception-V4模型</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># inception_v4模型定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码来自：https://github.com/PaddlePaddle/models/blob/43cdafbb97e52e6d93cc5bbdc6e7486f27665fc8/PaddleCV/image_classification/models/inception_v4.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里使用了面向对象的封装</span></span><br><span class="line"><span class="comment"># 因为不同的inception版本中的同名函数例如conv_bn_layer（带batchnorm的卷积层）的具体实现是不同的</span></span><br><span class="line"><span class="comment"># 所以为了防止同名函数定义的互相覆盖，使用类的封装思想比较合理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InceptionV4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"using inception v4."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型主函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">net</span><span class="params">(self, input, class_dim=<span class="number">1000</span>)</span>:</span></span><br><span class="line">        <span class="comment"># STEP 1 inception_sterm模块</span></span><br><span class="line">        <span class="comment"># stem模块其实就是多次卷积＋２次池化，采用了Inception论文里提到的卷积＋池化并行的结构</span></span><br><span class="line">        <span class="comment"># 在同时也使用了多个1*1卷积，之前的googlenet（inception_v1）中也提到过</span></span><br><span class="line">        <span class="comment"># 这是一种降维操作，能够通过减少通道数从而减少因为并行结构带来的巨大计算量</span></span><br><span class="line">        x = self.inception_stem(input)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># STEP 2 4层inception_A模块+1层reduction模块</span></span><br><span class="line">        <span class="comment"># inception_A、B、C模块之间内在结构各有不同，在该算法论文中没有详细的解答，应该是一种经验性的结构</span></span><br><span class="line">        <span class="comment"># reduction起到了作为之前版本中的一层单层池化层的作用，同样采用了卷积+池化并行的结构</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">            x = self.inceptionA(x, name=str(i + <span class="number">1</span>))</span><br><span class="line">        x = self.reductionA(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># STEP 3 7层inception_B模块+1层reduction模块</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            x = self.inceptionB(x, name=str(i + <span class="number">1</span>))</span><br><span class="line">        x = self.reductionB(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># STEP 4 3层inception_C模块+1层reduction模块</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            x = self.inceptionC(x, name=str(i + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 平均池化，不同于最大池化提取特征，这是在保留背景信息</span></span><br><span class="line">        pool = fluid.layers.pool2d(</span><br><span class="line">            input=x, pool_size=<span class="number">8</span>, pool_type=<span class="string">'avg'</span>, global_pooling=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># dropout操作用来减少过拟合</span></span><br><span class="line">        drop = fluid.layers.dropout(x=pool, dropout_prob=<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里做了一次运算，stdv是标准差的意思</span></span><br><span class="line">        stdv = <span class="number">1.0</span> / math.sqrt(drop.shape[<span class="number">1</span>] * <span class="number">1.0</span>)</span><br><span class="line">        <span class="comment"># 这里传入的initializer.Uniform是随机均匀分布初始化器的意思</span></span><br><span class="line">        <span class="comment"># 这里的全连接层的各个神经元权重使用了随机均匀分布初始化的方式</span></span><br><span class="line">        <span class="comment"># 一般的初始化方式有正态分布和随机均匀分布两种，两者优劣没有定论，但经验上看，均匀分布的随机数能够让更多的权重接近于0</span></span><br><span class="line">        out = fluid.layers.fc(</span><br><span class="line">            input=drop,</span><br><span class="line">            size=class_dim,</span><br><span class="line">            param_attr=ParamAttr(</span><br><span class="line">                initializer=fluid.initializer.Uniform(-stdv, stdv),</span><br><span class="line">                name=<span class="string">"final_fc_weights"</span>),</span><br><span class="line">            bias_attr=ParamAttr(</span><br><span class="line">                initializer=fluid.initializer.Uniform(-stdv, stdv),</span><br><span class="line">                name=<span class="string">"final_fc_offset"</span>),</span><br><span class="line">            act=<span class="string">'softmax'</span>)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 带batchnorm的卷积层函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv_bn_layer</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                      data,</span></span></span><br><span class="line"><span class="function"><span class="params">                      num_filters,</span></span></span><br><span class="line"><span class="function"><span class="params">                      filter_size,</span></span></span><br><span class="line"><span class="function"><span class="params">                      stride=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      padding=<span class="number">0</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      groups=<span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      act=<span class="string">'relu'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                      name=None)</span>:</span></span><br><span class="line">        <span class="comment"># 和之前resnet使用的卷积层定义基本一致，只是添加了一些name名称，此处不再赘述</span></span><br><span class="line">        conv = fluid.layers.conv2d(</span><br><span class="line">            input=data,</span><br><span class="line">            num_filters=num_filters,</span><br><span class="line">            filter_size=filter_size,</span><br><span class="line">            stride=stride,</span><br><span class="line">            padding=padding,</span><br><span class="line">            groups=groups,</span><br><span class="line">            act=<span class="literal">None</span>,</span><br><span class="line">            param_attr=ParamAttr(name=name + <span class="string">"_weights"</span>),</span><br><span class="line">            bias_attr=<span class="literal">False</span>,</span><br><span class="line">            name=name)</span><br><span class="line">        bn_name = name + <span class="string">"_bn"</span></span><br><span class="line">        <span class="comment"># batchnorm也是如此，基本一致</span></span><br><span class="line">        <span class="keyword">return</span> fluid.layers.batch_norm(</span><br><span class="line">            input=conv,</span><br><span class="line">            act=act,</span><br><span class="line">            name=bn_name,</span><br><span class="line">            param_attr=ParamAttr(name=bn_name + <span class="string">"_scale"</span>),</span><br><span class="line">            bias_attr=ParamAttr(name=bn_name + <span class="string">"_offset"</span>),</span><br><span class="line">            moving_mean_name=bn_name + <span class="string">'_mean'</span>,</span><br><span class="line">            moving_variance_name=bn_name + <span class="string">'_variance'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># inception_stem层，具体结构可以参考论文中的图像，</span></span><br><span class="line">    <span class="comment"># 基本原理还是和googlenet一样，并行处理的卷积+池化以及1*1卷积降维</span></span><br><span class="line">    <span class="comment"># 具体到结构为什么这么设计可以认为是经验性的，论文没有深入讨论</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inception_stem</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        conv = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">32</span>, <span class="number">3</span>, stride=<span class="number">2</span>, act=<span class="string">'relu'</span>, name=<span class="string">"conv1_3x3_s2"</span>)</span><br><span class="line">        conv = self.conv_bn_layer(conv, <span class="number">32</span>, <span class="number">3</span>, act=<span class="string">'relu'</span>, name=<span class="string">"conv2_3x3_s1"</span>)</span><br><span class="line">        conv = self.conv_bn_layer(</span><br><span class="line">            conv, <span class="number">64</span>, <span class="number">3</span>, padding=<span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"conv3_3x3_s1"</span>)</span><br><span class="line"></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=conv, pool_size=<span class="number">3</span>, pool_stride=<span class="number">2</span>, pool_type=<span class="string">'max'</span>)</span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            conv, <span class="number">96</span>, <span class="number">3</span>, stride=<span class="number">2</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem1_3x3_s2"</span>)</span><br><span class="line">        concat = fluid.layers.concat([pool1, conv2], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            concat, <span class="number">64</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem2_3x3_reduce"</span>)</span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            conv1, <span class="number">96</span>, <span class="number">3</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem2_3x3"</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            concat, <span class="number">64</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem2_1x7_reduce"</span>)</span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            conv2,</span><br><span class="line">            <span class="number">64</span>, (<span class="number">7</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_stem2_1x7"</span>)</span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            conv2,</span><br><span class="line">            <span class="number">64</span>, (<span class="number">1</span>, <span class="number">7</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_stem2_7x1"</span>)</span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            conv2, <span class="number">96</span>, <span class="number">3</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem2_3x3_2"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([conv1, conv2], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            concat, <span class="number">192</span>, <span class="number">3</span>, stride=<span class="number">2</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_stem3_3x3_s2"</span>)</span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=concat, pool_size=<span class="number">3</span>, pool_stride=<span class="number">2</span>, pool_type=<span class="string">'max'</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([conv1, pool1], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br><span class="line"></span><br><span class="line">    <span class="comment"># inception_A模块，同样不再赘述</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inceptionA</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=data, pool_size=<span class="number">3</span>, pool_padding=<span class="number">1</span>, pool_type=<span class="string">'avg'</span>)</span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            pool1, <span class="number">96</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_a"</span> + name + <span class="string">"_1x1"</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">96</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_a"</span> + name + <span class="string">"_1x1_2"</span>)</span><br><span class="line"></span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">64</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_a"</span> + name + <span class="string">"_3x3_reduce"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">96</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            padding=<span class="number">1</span>,</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_a"</span> + name + <span class="string">"_3x3"</span>)</span><br><span class="line"></span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            data,</span><br><span class="line">            <span class="number">64</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_a"</span> + name + <span class="string">"_3x3_2_reduce"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">96</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            padding=<span class="number">1</span>,</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_a"</span> + name + <span class="string">"_3x3_2"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">96</span>,</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            padding=<span class="number">1</span>,</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_a"</span> + name + <span class="string">"_3x3_3"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([conv1, conv2, conv3, conv4], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br><span class="line"></span><br><span class="line">    <span class="comment"># reduction_A模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reductionA</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=data, pool_size=<span class="number">3</span>, pool_stride=<span class="number">2</span>, pool_type=<span class="string">'max'</span>, pool_padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">384</span>, <span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_a_3x3"</span>)</span><br><span class="line"></span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">192</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_a_3x3_2_reduce"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3, <span class="number">224</span>, <span class="number">3</span>, padding=<span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_a_3x3_2"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3, <span class="number">256</span>, <span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_a_3x3_3"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([pool1, conv2, conv3], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br><span class="line"></span><br><span class="line">    <span class="comment"># inception_B模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inceptionB</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=data, pool_size=<span class="number">3</span>, pool_padding=<span class="number">1</span>, pool_type=<span class="string">'avg'</span>)</span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            pool1, <span class="number">128</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x1"</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">384</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x1_2"</span>)</span><br><span class="line"></span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">192</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x7_reduce"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">224</span>, (<span class="number">1</span>, <span class="number">7</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x7"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">7</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_7x1"</span>)</span><br><span class="line"></span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            data,</span><br><span class="line">            <span class="number">192</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_7x1_2_reduce"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">192</span>, (<span class="number">1</span>, <span class="number">7</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x7_2"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">224</span>, (<span class="number">7</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_7x1_2"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">224</span>, (<span class="number">1</span>, <span class="number">7</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_1x7_3"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">7</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_b"</span> + name + <span class="string">"_7x1_3"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([conv1, conv2, conv3, conv4], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br><span class="line"></span><br><span class="line">    <span class="comment"># reduction_B模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reductionB</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=data, pool_size=<span class="number">3</span>, pool_stride=<span class="number">2</span>, pool_type=<span class="string">'max'</span>, pool_padding=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">192</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_b_3x3_reduce"</span>)</span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            conv2, <span class="number">192</span>, <span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_b_3x3"</span>)</span><br><span class="line"></span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">256</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, padding=<span class="number">1</span>,name=<span class="string">"reduction_b_1x7_reduce"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">1</span>, <span class="number">7</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"reduction_b_1x7"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">320</span>, (<span class="number">7</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">3</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"reduction_b_7x1"</span>)</span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            conv3, <span class="number">320</span>, <span class="number">3</span>, stride=<span class="number">2</span>, act=<span class="string">'relu'</span>, name=<span class="string">"reduction_b_3x3_2"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat([pool1, conv2, conv3], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br><span class="line"></span><br><span class="line">    <span class="comment"># inception_C模块</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inceptionC</span><span class="params">(self, data, name=None)</span>:</span></span><br><span class="line">        pool1 = fluid.layers.pool2d(</span><br><span class="line">            input=data, pool_size=<span class="number">3</span>, pool_padding=<span class="number">1</span>, pool_type=<span class="string">'avg'</span>)</span><br><span class="line">        conv1 = self.conv_bn_layer(</span><br><span class="line">            pool1, <span class="number">256</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x1"</span>)</span><br><span class="line"></span><br><span class="line">        conv2 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">256</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x1_2"</span>)</span><br><span class="line"></span><br><span class="line">        conv3 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">384</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x1_3"</span>)</span><br><span class="line">        conv3_1 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x3"</span>)</span><br><span class="line">        conv3_2 = self.conv_bn_layer(</span><br><span class="line">            conv3,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_3x1"</span>)</span><br><span class="line"></span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            data, <span class="number">384</span>, <span class="number">1</span>, act=<span class="string">'relu'</span>, name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x1_4"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">448</span>, (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x3_2"</span>)</span><br><span class="line">        conv4 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">512</span>, (<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_3x1_2"</span>)</span><br><span class="line">        conv4_1 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">            padding=(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_1x3_3"</span>)</span><br><span class="line">        conv4_2 = self.conv_bn_layer(</span><br><span class="line">            conv4,</span><br><span class="line">            <span class="number">256</span>, (<span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">            padding=(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">            act=<span class="string">'relu'</span>,</span><br><span class="line">            name=<span class="string">"inception_c"</span> + name + <span class="string">"_3x1_3"</span>)</span><br><span class="line"></span><br><span class="line">        concat = fluid.layers.concat(</span><br><span class="line">            [conv1, conv2, conv3_1, conv3_2, conv4_1, conv4_2], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> concat</span><br></pre></td></tr></table></figure>
<h4 id="训练和预测"><a href="#训练和预测" class="headerlink" title="训练和预测"></a>训练和预测</h4><p>为了能够更好地评价不同神经网络模型的训练性能、实际预测效果等，我们采用控制变量法，使用相同的训练和预测流程设计，训练使用的参数统一为batch_size=128、epoch=3，预测使用的待预测图像为一张狗的照片。运行程序、进行训练和预测的主要流程如下所示：</p>
<ul>
<li>首先，我们需要保证项目之前的输出被全部清空，且在“Kernel操作”中进行过至少一次的“重启”操作。</li>
<li>之后，在最后一个cell的程序主函数中的model变量中确定对应模型的名称，若只需要使用已生成的模型文件进行预测而不需要再次训练，可以注释掉train训练主函数，只运行predict预测主函数。</li>
<li>最后，选中第一个cell，点击“Notebook操作”中的“运行当前及下方所有”，开始程序的运行。</li>
</ul>
<p>各模型的具体运行结果截图可以参见下一章节“实验数据”。</p>
<h3 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h3><p>在训练和预测流程执行完毕后，对于各个模型程序输出的原始数据结果截图如下所示：</p>
<h4 id="VGG模型-1"><a href="#VGG模型-1" class="headerlink" title="VGG模型"></a>VGG模型</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/data-vgg.png" alt="VGG 模型的运行结果"></p>
<center>图 3.1 VGG模型的运行结果（仅训练数据输出）</center>

<p>可能是由于最终训练结果的精确度过低，在预测过程中出现了报错的情况，因此此处没有预测结果。</p>
<h4 id="ResNet模型-1"><a href="#ResNet模型-1" class="headerlink" title="ResNet模型"></a>ResNet模型</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/data-resnet.png" alt="ResNet 模型的运行结果"></p>
<center>图3.2 ResNet模型的训练和预测结果</center>

<h4 id="GoogleNet模型-1"><a href="#GoogleNet模型-1" class="headerlink" title="GoogleNet模型"></a>GoogleNet模型</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/data-googlenet.png" alt="GoogleNet 模型的运行结果"></p>
<center>图3.3 GoogleNet模型的训练和预测结果</center>

<h4 id="Inception-V4模型-1"><a href="#Inception-V4模型-1" class="headerlink" title="Inception-V4模型"></a>Inception-V4模型</h4><p>由于在理论上Inception-V4模型应当是GoogleNet（Inception-V1）的改进，但是首次训练和预测后的结果都完全差于GoogleNet，于是我们查询了该模型代码来源的GitHub仓库上的参数设置，发现batch_size应当由128改为256。</p>
<p>在针对该模型设置该特有参数值之后，我们进行了第二次的额外训练和预测。两次训练和预测的原始数据如下所示：</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/data-inception-v4-1.png" alt="Inception-v4 模型的首次运行结果"></p>
<center>图3.4 Inception-V4模型首次运行时的训练和预测结果</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/data-inception-v4-2.png" alt="Inception-v4 模型修改后的运行结果"></p>
<center>图3.5 Inception-V4模型修改batch_size之后<br>再次运行时的训练和预测结果</center>

<h3 id="实验数据处理"><a href="#实验数据处理" class="headerlink" title="实验数据处理"></a>实验数据处理</h3><h4 id="VGG模型数据图表"><a href="#VGG模型数据图表" class="headerlink" title="VGG模型数据图表"></a>VGG模型数据图表</h4><p>由于在“实验数据”环节所述的程序报错的关系，未能够通过python代码自动生成损失率图表，此处使用Excel生成相关图表：</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-vgg-1.png" alt="vgg 训练数据图表"></p>
<center>图4.1 VGG训练数据图表</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-vgg-2.png" alt="VGG 测试数据图表"></p>
<center>图4.2 VGG测试数据图表</center>

<p>可以看出，VGG模型在当前训练环境下，训练过程中损失率震荡较大，下降速率较慢，准确率同样在上下波动且上升速率较慢，而使用测试数据集生成的测试数据基本保持不变。而且准确率相当低，在10%左右徘徊，说明VGG模型在当前环境下的综合性能较差。</p>
<h4 id="ResNet模型数据图表"><a href="#ResNet模型数据图表" class="headerlink" title="ResNet模型数据图表"></a>ResNet模型数据图表</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-resnet-1.png" alt="vgg 损失率数据图表"></p>
<center>图4.3 实验程序生成的ResNet的训练和测试损失率图表</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-resnet-2.png" alt="vgg 准确率数据图表"></p>
<center>图4.4 ResNet的训练和测试准确率图表</center>

<p>ResNet模型在当前训练环境下，训练过程中损失率震荡较小，下降速率在训练初期较快，之后趋于平缓。虽然测试过程中的损失率虽然震荡较大，但是参照训练过程，确实维持在一个合理的区间内。</p>
<p>在训练和测试过程中，ResNet模型的准确率都保持着不断升高的趋势，最终的准确率接近70%。</p>
<p>但是，在实际的预测过程中，ResNet模型却将带预测的图片分类为了horse马，说明在实际应用过程中，该模型仍存在可以提升的空间。</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/dog-resnet.png" alt="restnet 实际预测结果"></p>
<center>图4.5 ResNet模型实际预测结果</center>

<h4 id="GoogleNet模型数据图表"><a href="#GoogleNet模型数据图表" class="headerlink" title="GoogleNet模型数据图表"></a>GoogleNet模型数据图表</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-googlenet-1.png" alt="googlenet 损失率数据图表"></p>
<center>图4.6 实验程序生成的GoogleNet的训练和测试损失率图表</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-googlenet-2.png" alt="googlenet 准确率数据图表"></p>
<center>图4.7 GoogleNet的训练和测试准确率图表</center>

<p>GoogleNet模型在当前训练环境下，训练过程中损失率几乎没有震荡，下降速率在训练初期极快，之后趋于平缓且不断逼近0。测试过程中的损失率曲线与训练过程曲线近乎重合。以上现象说明了在当前环境下，该模型的训练效果相当出色。</p>
<p>在训练和测试过程中，GoogleNet模型的准确率都保持着不断升高的趋势，最终的准确率在60%左右。</p>
<p>除了下降速率曲线之外，该模型还有如下2点令人印象深刻之处：</p>
<ul>
<li>训练速度快：相比其他模型，该模型的训练耗时相当少，当其他模型需要5~10秒才能训练完一个pass时，该模型只需1秒左右的时间，因此训练速度极快。我们认为训练速度快的主要原因是：该模型的网络层数相较于其他模型更少，且3个子网络分别输出损失率并加权求和的操作有助于优化器更加精确地计算出当前梯度，从而更准确地调整网络中各层神经元的权重参数。</li>
<li>模型实际预测结果精准：如下图所示，在实际预测的过程中，该模型是唯一一个将该图片正确分类为dog狗的，可以看出该模型在实际应用方面的准确度相当高，虽然数据层面的准确率60%略逊于ResNet的70%。</li>
</ul>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/dog-googlenet.png" alt="GoogleNet 模型实际预测结果"></p>
<center>图4.8 GoogleNet模型实际预测结果</center>

<h4 id="Inception-V4模型数据图表"><a href="#Inception-V4模型数据图表" class="headerlink" title="Inception-V4模型数据图表"></a>Inception-V4模型数据图表</h4><p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-inception-v4-1.png" alt="inception-v4 损失率数据图表"></p>
<center>图4.9 实验程序生成的Inception-V4的训练和测试损失率图表</center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-inception-v4-2.png" alt="inception-v4 损失率数据图表"></p>
<center>图4.10 Inception-V4的训练和测试准确率图表</center>

<p>Inception-V4模型在当前训练环境下，训练过程中损失率震荡严重，下降速率缓慢。测试过程中的损失率曲线与训练过程曲线同样近乎重合。以上现象说明了在当前环境下该模型训练效果较差。</p>
<p>在训练和测试过程中，Inception-V4模型的准确率都保持着不断升高的趋势，但是最终的准确率在30%左右。</p>
<p>在实际预测中，该模型将带预测图片分类为了truck卡车，说明其模型准确度确实不高。</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/dog-inception-v4-1.png" alt="Inception-v4 模型实际预测结果"></p>
<center>图4.11 Inception-v4 模型实际预测结果</center>

<p>我们在“实验数据”环节就已经根据程序输出的实验数据提出了“为何作为GoogleNet的迭代版本，Inception-V4反而在性能和实际效果上不如GoogleNet”的疑问并根据相关资料修改了batch_size为256，并进行了第二次的训练和预测。实验数据处理如下所示：</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-inception-v4-3.png" alt="修改后inception-v4 损失率数据图表"></p>
<center>图4.12 调整参数第二次训练后<br><br>实验程序生成的Inception-V4的训练和测试损失率图表<br></center>

<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/graph-inception-v4-4.png" alt="修改后inception-v4 准确率数据图表"></p>
<center>图4.13 调整参数第二次训练后<br><br>Inception-V4的训练和测试准确率图表<br></center>

<p>可以看出，Inception-V4模型在修改参数后的训练环境下，训练过程中损失率震荡有所收敛，但下降速率依旧缓慢。测试过程中的损失率曲线与训练过程曲线同样近乎重合。以上现象说明了在当前环境下该模型训练效果仍然较差。</p>
<p>在训练和测试过程中，Inception-V4模型的准确率都保持着不断升高的趋势，但是最终的准确率还是在30%左右。<br>在实际预测中，该模型将带预测图片分类为了automobile轿车，说明其模型准确度仍然不高</p>
<p><img src="/2019/06/29/Different-Deep-Learning-Methods-for-Image-Classification-on-CIFAR-10/dog-inception-v4-2.png" alt="修改后Inception-v4 模型实际预测结果"></p>
<center>图4.11 调整参数第二次训练后<br><br>GoogleNet模型实际预测结果<br></center>

<p>我们初步怀疑调整参数后效果仍然较差的原因有如下两点：</p>
<ul>
<li>epoch的次数仍然偏少，因为Inception_V4的网络层数明显多于GoogleNet，因此需要更长时间的训练才能够获得一个较好的模型，但由于使用CPU训练速度较慢，实验时间有限，暂时不考虑进行更多次的实验。</li>
<li>据Inception_V4对应的论文《Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning》中的描述，该模型的设计主要考虑到了TensorFlow等框架在内存分配等方面的优化设计，因此也存在着paddlepaddle不支持这些特性导致的模型性能表现的不佳。</li>
</ul>
<h3 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h3><h4 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h4><p>针对在“实验数据处理”章节中对实验数据的图表绘制处理和初步分析，我们能够得出以下综合分析结果：</p>
<ul>
<li>使用控制变量法在相同环境（尤其是采用相同参数）下的不同模型进行的性能评价结果，这一方法存在着很大的局限性。本次实验尤为突出的表现正是Inception系列的V1（GoogleNet）和V4之间的可以称之为逆转性的结果。在batch_size=128、epoch=3的条件下，V1在训练速度、训练数据展示的效果、实际预测效果上都优于V4。而出于对这一反常问题的好奇，我们将batch_size按照V4代码的初始来源处的参数改为了batch_size=256，结果效果改善程度有限。这些说明了控制变量法并不能够全面地衡量不同模型之间的性能和实际效果。</li>
<li>在当前环境下，GoogleNet和ResNet在各项实验数据指标上优于其他模型，而GoogleNet为最优。ResNet仅在准确率的数据层面上的70%略胜于GoogleNet的60%，而GoogleNet无论是在训练所需时间、损失率曲线的震荡程度、损失率曲线的下降速率、以及实际预测的准确程度都明显优于ResNet，且是唯一一个正确分类了带预测图片的模型。</li>
<li>但是这并不意味着Inception系列的Inception模块设计不存在缺陷，也并不意味着Inception系列不应该引入ResNet的结构设计，相反，ResNet的残差模块的结构设计在实际研究和应用过程中，确实有其“提升深层次网络训练结果的准确度和收敛速度”的独到之处。只不过由于实验时间的关系，我们并未继续引入Inception-ResNet-V1、Inception-ResNet-V2等两者相结合的模型，并进行进一步的实验和分析。</li>
</ul>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><h5 id="实验结论"><a href="#实验结论" class="headerlink" title="实验结论"></a>实验结论</h5><p>本次实验基于百度AI Stuido平台的在线项目平台，使用了包括VGG、ResNet、GoogleNet（Inception-V1）、Inception-V4等图像分类神经网络模型以及CIFAR10数据集，对相同环境条件下的不同模型在训练和预测过程中的性能开销、数据指标变化情况、实际预测情况等进行了详细的分析讨论。尽管通过实验表明，本次实验所使用的控制变量法存在着一定的局限性，但是本次实验仍然得出了GoogleNet（代表Inception系列）、ResNet在性能指标和实际效果上较为优秀的结论，这肯定了Inception模块、残差模块的结构设计在模型训练、实际预测等多方面相较于传统的多层神经网络存在着相当大的优势。</p>
<p>本次实验目的步骤明确、实验过程较为顺利、对实验结果的也进行了较为细致的处理和分析，是一次虽然存在问题，但在一定程度上较为成功的人工智能课程实验。</p>
<h5 id="成果收获"><a href="#成果收获" class="headerlink" title="成果收获"></a>成果收获</h5><p>经过本次实验，我们团队成员收获了以下成果：</p>
<ul>
<li>通过研读paddlepaddle官方教程和文档以及其他网上相关资料、编写、移植以及逐行注释不同模型代码、处理分析实验数据等方式，我们锻炼了团队合作完成“查阅人工智能相关文献、理解相关基本概念、使用代码实现相应模型的结构设计、对实验数据进行处理和分析”的一整套人工智能领域研究流程的实战能力。</li>
<li>通过对paddlepaddle框架的学习，我们初步掌握了深度学习框架、以及其他辅助用途的python库的基本使用方式，了解了使用深度学习框架的需要进行的“数据处理、参数设置、模型训练、测试集测试、结果输出”等一般流程。</li>
<li>通过这次实验，我们也巩固了团队合作的情况下完成实验的任务分配、进度协调、成员沟通等综合能力。</li>
</ul>
<h5 id="待改进的地方"><a href="#待改进的地方" class="headerlink" title="待改进的地方"></a>待改进的地方</h5><p>经过本次实验，我们认为仍然存在以下待改进的地方：</p>
<ul>
<li>实验对不同模型的评估比较方法存在问题。控制单一变量法并不能够全面地让不同模型发挥出应有的性能效果，应当考虑给予不同模型以其目前研究水平下最佳的环境配置，通过基于单一测试数据的多次实际预测效果测试来衡量不同模型的性能，其结果会更好。</li>
<li>未能引入更多较为新型的图像分类模型例如Inception-ResNet系列模型等，进行范围更加广泛的比较和分析。</li>
</ul>
<h3 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h3><p>最后，在整篇文章的结尾，我还是要一如既往地感谢本次与我合作完成这一项目的搭档：Jet Lian，他主要负责本次项目的相关文献资料的查阅和汇总，VGG、ResNet、Inception-V4模型代码的编写、注释，实验程序执行和实验数据结果的处理、分析，“实验内容与步骤”之后的实验报告的撰写。</p>
<p>在他的合作之下，我才能够完成我自己的工作内容：实验方案选取、实验环境初始化、项目训练和预测函数等模块结构的搭建，基于paddlepaddle早期版本GoogleNet模型代码的移植、编写和注释，“实验内容与步骤”及之前的实验报告撰写。</p>
<p>作为室友兼搭档，我个人是十分敬佩他分析问题、解决问题和实际编码的强大综合能力的，像他这样成绩优秀且技术能力过硬的同学，在USTB的CS专业中乃至SCCE学院中都是罕见的。真的十分荣幸，能够在这三年的时光中与他为友，在技术成长的道路上并肩前行。</p>
<p>同时，我也十分感谢《人工智能》专业选修课的任课老师王睿老师、以及本次和AI专选课合作的百度AI Studio在线实验平台，正是老师和工作人员们的通力合作和不懈努力，为我们本届CS学生创造了一次实际体验深度学习训练到预测全过程的宝贵机会。希望这样的机会在未来的SCCE学院乃至整个行业会越来越多，再次感谢这些为技术知识的传播做出贡献的人们！</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol>
<li>百度paddlepaddle官网教程《深度学习基础教程》的《图像分类》章节：<br><a href="http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html" target="_blank" rel="noopener">http://paddlepaddle.org/documentation/docs/zh/1.4/beginners_guide/basics/image_classification/index.html</a></li>
<li>基于paddlepaddle的inception-v4模型代码：<br><a href="https://github.com/PaddlePaddle/models/blob/43cdafbb97e52e6d93cc5bbdc6e7486f27665fc8/PaddleCV/image_classification/models/inception_v4.py" target="_blank" rel="noopener">https://github.com/PaddlePaddle/models/blob/43cdafbb97e52e6d93cc5bbdc6e7486f27665fc8/PaddleCV/image_classification/models/inception_v4.py</a></li>
<li>基于paddlepaddle旧版的googlenet模型（本文中展示的是基于该项目移植到新版paddlepaddle后的代码）：<br><a href="https://www.cnblogs.com/charlotte77/p/8066867.html" target="_blank" rel="noopener">https://www.cnblogs.com/charlotte77/p/8066867.html</a></li>
<li>Google Inception系列论文《Inception-v4, Inception-ResNet and the Impact of Residual Connections on Learning》：<br><a href="https://www.aaai.org/ocs/index.php/AAAI/AAAI17/paper/viewPDFInterstitial/14806/14311" target="_blank" rel="noopener">https://www.aaai.org/ocs/index.php/AAAI/AAAI17/paper/viewPDFInterstitial/14806/14311</a></li>
</ol>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Notes About Recent Projects 3</title>
    <url>/2018/06/28/Notes-About-Recent-Projects-3/</url>
    <content><![CDATA[<blockquote>
<p>The most stupid work<br>might be the most important one to cherish.</p>
</blockquote>
<p>此处收录一些近期的项目笔记，<br>这次真的是最近正在干的事情了。</p>
<a id="more"></a>
<p>没上锁的原因？<br>是因为我从校会网络部光荣退休了吧。。。<br>讲点别的项目。</p>
<h2 id="贝壳计通讲师团"><a href="#贝壳计通讲师团" class="headerlink" title="贝壳计通讲师团"></a>贝壳计通讲师团</h2><p>项目访问方式：</p>
<p><img src="https://raw.githubusercontent.com/lmy98129/weapp-ustb/master/QRCODE.jpg" alt="QRCODE"></p>
<ol>
<li>扫描上方的小程序码</li>
<li>微信小程序搜索“贝壳计通讲师团”</li>
<li><a href="https://github.com/lmy98129/weapp-ustb" target="_blank" rel="noopener">Github</a></li>
</ol>
<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP1.PNG" alt="WEAPP1"></p>
<p><center>小程序主界面，更多预览请直接打开小程序或阅读本文后续内容</center><br></p>
<p>这是北京科技大学计算机与通信工程学院学生讲师团的官方小程序，管理方是北京科技大学计算机与通信工程学院学生讲师团，开发和维护方是北京科技大学计算机与通信工程学院的计算机科学与技术专业大二学生本人以及我的搭档fafnir，<strong>本人作为小程序的主要开发者之一，完成了本小程序的数据库结构设计、前端小程序开发、Node.js后端开发工作，并进行了多次版本迭代</strong>。搭档fafnir完成的工作主要为开发基于Python的Django Xadmin搭建的小程序后台管理网站。</p>
<p>项目创建的具体时间应与本博客的创建时间相差不多，开发时间长达3个月，上线时间已达1个月，经历两次大改。目前最新版本为v0.4.1。<br><strong>小程序前端基于腾讯微信小程序开发工具的原生组件，后端基于Node.js框架Express，数据库使用MySQL，数据库访问使用Node.js的MySQL库。其中，前端的通信模块以及后端的数据库访问模块均采用Promise异步编程封装。</strong></p>
<blockquote>
<p>注：我们计划在将本程序进行适当重构后，将本程序的前后端代码适时发布至GitHub。<br>当前程序内的敏感信息较多，公布后风险较大故暂不考虑。</p>
<p>后续：前端代码已发布至<a href="https://github.com/lmy98129/weapp-ustb" target="_blank" rel="noopener">Github</a></p>
</blockquote>
<h3 id="项目技术细节"><a href="#项目技术细节" class="headerlink" title="项目技术细节"></a>项目技术细节</h3><p>本项目的最初需求来源是：在2017秋季学期计通学院学生讲师团旧有线上预约平台网站开发维护人员即将毕业离校，讲师团负责人员联系辅导员提出了寻找学生进行下一代线上辅导预约平台的开发和维护工作的需求，最终确定采用小程序的形式进行开发，并招募了开发人员。原定计划为寒假一个多月时间内完成开发任务，但由于人员技术水平有限，以及在开发过程中遇到的种种挫折，我们前后花费了将近3个月的时间，经历两次大改才将目前接近成品的版本v0.4.1付诸上线使用。</p>
<h4 id="项目第一版"><a href="#项目第一版" class="headerlink" title="项目第一版"></a>项目第一版</h4><p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP2.PNG" alt="WEAPP2"></p>
<p><center>第一版小程序主界面，更多预览请阅读本文后续内容</center><br></p>
<p>项目的第一版完成了基本的需求分析、技术选型、数据库表设计、设备部署以及初步的技术实现等工作。其中需求分析与数据库表设计均由我来完成，并根据MySQL的通行命名规范，编写了本项目的第一份需求分析以及数据库表结构稿件。<strong>出于安全考虑，不在此处公布数据库各表的具体字段。</strong>由于我们与需求方之间初期的沟通较少，导致我们对于需求方的理解有一定的偏差，但根据我们之后的需求更改情况，可以看出大方向上是无误的。</p>
<h5 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h5><p>我们在第一版设计时的具体需求（大部分为开发方在开发过程中，帮助需求方总结的需求）为：</p>
<ul>
<li>小程序前端搭载学生端和讲师端两套代码，在用户登录过程中，使用微信提供的用户id查询数据库结果决定显示哪一界面，普通用户默认为学生用户。（虽然在历次提交审查中，<strong>微信方面的小程序测试人员并未对此提出任何疑问</strong>，但可以说确实是一种逃避审查的潜在手段，希望微信方面改进审查机制加以防范）</li>
<li>讲师发布课程内容，包括课程名称、日期、时间、地点、人数上限、备注等，其中人数上限、地点、备注为选填项。（<strong>早期版本中未考虑到人数上限问题，是后期加入的字段</strong>）</li>
<li>学生可以进入课程列表对讲师发布的课程进行预约或取消预约，其中达到人数上限、课程取消等情况下提示学生不得预约，课程列表发生的更改将在触发课程列表本身更改的同时，实时触发首页列表的刷新。（<strong>课程超时不得预约的功能较为复杂，也是后期加入的字段</strong>）</li>
<li>学生端以及讲师端首页均显示自己已预约的课程或已发布的课程情况，以及对课程进行相应的编辑操作：学生可以取消课程预约，讲师可以取消、删除、编辑课程，讲师的编辑操作也将触发其首页列表的刷新。</li>
<li>在课程列表以及首页中点击单个课程卡片可以查看课程详情。</li>
<li>“我的”页面中普通学生用户可以申请成为讲师，需提交真实姓名以及电话号码，通过后台管理网站的管理员核对后通过认证成为讲师。</li>
<li>后台管理网站应该能自由编辑、删除任何讲师发布的课程，应在开发后期对讲师每月授课情况统计，并进行展示（<strong>截至文章发布，授课情况统计功能暂未全部完成</strong>）。</li>
</ul>
<h5 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h5><p>根据以上的需求分析，大致能够分成以下的数据库表（具体字段不予公布）</p>
<ol>
<li>用户预约总表</li>
<li>讲师课程列表</li>
<li>管理员认证讲师资格列表</li>
<li>管理员账户列表</li>
</ol>
<h5 id="程序功能"><a href="#程序功能" class="headerlink" title="程序功能"></a>程序功能</h5><p>从这些数据库表可以分析得出的功能表如下：</p>
<ol>
<li>用户<ol>
<li>查看当前可预约课程列表</li>
<li>提交预约</li>
<li>取消预约</li>
<li>查看自己当前的预约</li>
<li>提交讲师认证申请</li>
</ol>
</li>
<li>讲师<ol>
<li>查看当前已发布课程以及预约情况（预约人数）</li>
<li>提交课程</li>
<li>取消课程</li>
<li>修改课程</li>
</ol>
</li>
<li>管理员<ol>
<li>查看并编辑当前所有课程以及预约</li>
<li>操作讲师认证申请</li>
<li>查看当前所有讲师每月的授课情况</li>
</ol>
</li>
</ol>
<h5 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h5><p>项目第一版的技术选型由fafnir完成，总体情况是采用了腾讯云提供的<a href="https://github.com/tencentyun/wafer" target="_blank" rel="noopener">wafer小程序一站式解决方案</a>，具体来说应该是wafer1，选择的理由是相比于wafer2中服务器无法取得完整访问权的形式，wafer1可以直接在服务器上部署后台管理网站。（<strong>虽然后来的经费结算显示，使用wafer2方案可能会更经济一些</strong>，而且截至文章发布，腾讯云已经不再主推wafer1，并撤换下了多个wafer小程序一站式解决方案的访问入口，当前能够全新购买的解决方案的只剩下基于开发者工具的wafer2方案，两者之间的不同以及基本架构可以<a href="https://cloud.tencent.com/developer/article/1007109" target="_blank" rel="noopener">看这里</a>）当时的具体项目选型如下：</p>
<table>
<thead>
<tr>
<th>技术模块</th>
<th>采用技术</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>小程序前端</td>
<td>wafer小程序一站式解决方案小程序demo</td>
<td><a href="https://github.com/tencentyun/wafer-client-demo" target="_blank" rel="noopener">项目地址</a>，与后端通信采用的是<a href="https://github.com/tencentyun/wafer-client-sdk" target="_blank" rel="noopener">wafer自带的腾讯云SDK</a>，采用的是基于socket的全双工信道通信，部分界面元素直接复用了demo中的界面</td>
</tr>
<tr>
<td>服务器后端</td>
<td>wafer小程序站式解决方案Node.js后端demo</td>
<td><a href="https://github.com/tencentyun/wafer-node-server-demo" target="_blank" rel="noopener">项目地址</a>，部署于wafer一站式解决方案的业务服务器上，基于Node.js框架Express，与前端通信采用的同样是<a href="https://github.com/tencentyun/wafer-node-server-sdk" target="_blank" rel="noopener">wafer自带的腾讯云SDK</a>，采用的是基于socket的全双工信道通信，前后端的会话通信可以直接通过API地址进行，但是信道通信必须经过一站式解决方案的信道服务器进行（<strong>请记住这一点，在之后的版本迭代中就发生了问题</strong>），与数据库通信采用的是Node.js的MySQL库的线程池模式（<strong>此时并未对其进行任何的封装</strong>）</td>
</tr>
<tr>
<td>数据库</td>
<td>MySQL 5.6</td>
<td>部署于wafer一站式解决方案的云数据库上，通过wafer一站式解决方案的信道服务器进行远程访问</td>
</tr>
<tr>
<td>后台管理网站</td>
<td>基于Python的Django Xadmin</td>
<td>部署于wafer一站式解决方案的业务服务器上，与后端访问操作同一数据库</td>
</tr>
</tbody>
</table>
<h5 id="开发难点及笔记"><a href="#开发难点及笔记" class="headerlink" title="开发难点及笔记"></a>开发难点及笔记</h5><h6 id="JavaScript的异步单线程特性"><a href="#JavaScript的异步单线程特性" class="headerlink" title="JavaScript的异步单线程特性"></a>JavaScript的异步单线程特性</h6><p>由于对Node.js乃至JavaScript的异步单线程的特性，尤其是回调函数的理解还较为浅薄（可能也是在之前并未直接接触过前后端通信以及数据库通信的原因造成的。是的我之前的工作真的就是改改开源PHP项目的代码，没怎么认真研读过代码以及文档），所以在设计后端服务器与数据库通信模块时，仍然将思路停留在C/C++之类的线性思路上，例如有如下代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> res = <span class="string">'nothing'</span>;</span><br><span class="line">connection.query(<span class="string">"USE "</span>+database);</span><br><span class="line">connection.query(<span class="string">'SELECT * FROM '</span>+databaseForm, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span> (results) &#123;</span><br><span class="line">        res = results;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure></p>
<p>其执行结果按照我的想象应该是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nothing</span><br><span class="line">(查询的结果)</span><br><span class="line">(查询的结果)</span><br></pre></td></tr></table></figure></p>
<p>结果是：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nothing</span><br><span class="line">(查询的结果)</span><br><span class="line">nothing</span><br></pre></td></tr></table></figure></p>
<p>相当于查询结果并未真正传给变量<code>res</code>，若我想在第二个<code>console.log(res);</code>的位置进行查询结果向前端的回传，则回传的结果将仍是<code>nothing</code>。具体原因？简单来说就是JavaScript作为一种在浏览器引擎中工作的语言，在大多数情况下只能单线程运行，此时只能先将一些阻塞整个线程运行的工作进行挂起处理（就例如前后端通信，若后端在某次查询时迟迟不回传，不应该将这个查询之外的其他工作全部停止，选择等待查询结果的到来，而是将其挂起，当后端查询结果回传时，再回过头来进行查询结果的处理等与查询结果相关的工作），这个挂起处理就是通过回调函数<code>callback</code>实现的，也就是上面第二个<code>connection.query</code>中的<code>function</code>函数。因此，正确的实现应该是:<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">connection.query(<span class="string">"USE "</span>+database);</span><br><span class="line">connection.query(<span class="string">'SELECT * FROM '</span>+databaseForm, <span class="function"><span class="keyword">function</span> (<span class="params">error, results, fields</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    <span class="keyword">if</span> (results) &#123;</span><br><span class="line">        TunnelService.emit(tunnelId, messageId, results); <span class="comment">//直接在回调函数中进行回传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h6 id="Node-js中MySQL库的单语句查询、参数化查询等防注入机制"><a href="#Node-js中MySQL库的单语句查询、参数化查询等防注入机制" class="headerlink" title="Node.js中MySQL库的单语句查询、参数化查询等防注入机制"></a>Node.js中MySQL库的单语句查询、参数化查询等防注入机制</h6><p>后端服务器与MySQL通信使用的库为Node.js通用的MySQL库，安装命令为<code>npm install mysql</code>。根据我们后期的开发经验，事实上不应该使用该库而应该使用更加专业的ORM框架（<a href="https://baike.baidu.com/item/ORM/3583252" target="_blank" rel="noopener">ORM的定义</a>）来方便我们对数据库操作命令进行js化的直接编写，而非只用SQL语句进行直接查询，虽然学习SQL语句也不是一件坏事。是的，本项目基本上用到的也就是增删改查、左联右联内联、COUNT计数、建表建库等基本SQL语句。</p>
<p>但是，问题在于该MySQL库本身的最佳实践中提到了其参数化查询、单语句查询的等防注入攻击的机制。其中参数化查询并非开发难点，此处可以略过，但是其默认单语句查询的功能实在是增加了开发难度。也就是必须在单条SQL语句当中完成所有查询，不允许进行多次查询后通过中间变量进行合并得到最终结果。这一设定的出发点是好的，万一API接口被传入一些带“;”的参数，且允许多语句查询，我们并不知道这些参数是否会导致SQL注入攻击的发生。</p>
<p>诚然，大多数查询通过本人的努力都实现了单语句查询的效果，虽然SQL语句看起来又臭又长，外人难以读懂（这也是我反思之后决定日后学习ORM的主要原因之一）。但是若出现某些根据上一次查询结果进行分支操作的情况，单语句查询就显得十分吃力了。例如，我们遇到了这一种情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line">    &quot;开始查询&quot;--&gt;&quot;查询某记录是否存在&quot;</span><br><span class="line">    if &quot;该记录存在吗？&quot; then</span><br><span class="line">        --&gt; [yes] &quot;将原记录的删除状态解除并修改其内容&quot;</span><br><span class="line">        --&gt; &quot;返回结果&quot;</span><br><span class="line">    else</span><br><span class="line">        --&gt; [no] &quot;新增一条记录&quot;</span><br><span class="line">        --&gt; &quot;返回结果&quot;</span><br><span class="line">    endif</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
<p><center>如果因SSL证书问题无法查看上方的流程图，可以使用其他非Chrome内核的浏览器或使用桌面端浏览器阅读本文</center><br></p>
<p>所以在项目的第一版中，我们采用了Node.js的<code>async</code>库中的<code>waterfall</code>进行同步顺序编程，<br><strong>之后的版本我发现了Promise是个好东西（虽然理解起来有难度）</strong><br><strong>然后就把通信模块统统重写了个遍</strong><br>在MySQL通信模块中解决这一问题的一个库函数实例如下：<br>也可以看出采用了参数化查询的防注入机制，以及MySQL的线程池。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> mysqlReserveClassStu(tunnelId, messageId, openId, classId, nickName) &#123;</span><br><span class="line">  <span class="keyword">var</span> tasks = [<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">error,connection</span>) </span>&#123;</span><br><span class="line">      connection.query(<span class="string">"SELECT * FROM user_reserve WHERE class_id=? AND user_id=?"</span>, [classId, openId], <span class="function"><span class="keyword">function</span> (<span class="params">error, results_1, fields</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">        <span class="keyword">if</span> (results_1) &#123;</span><br><span class="line">          connection.release();</span><br><span class="line">          callback(error, results_1);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">results_1, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(results_1[<span class="number">0</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">      pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">error,connection</span>) </span>&#123;</span><br><span class="line">        connection.query(<span class="string">"INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())"</span>,</span><br><span class="line">        [openId,nickName,classId], <span class="function"><span class="keyword">function</span>(<span class="params">error, results_2, fields</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">          <span class="keyword">if</span>(results_2) &#123;</span><br><span class="line">            connection.release();</span><br><span class="line">            TunnelService.emit(tunnelId, messageId, results_2);</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">error,connection</span>) </span>&#123;</span><br><span class="line">        connection.query(<span class="string">"UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?"</span>,</span><br><span class="line">        [classId,openId], <span class="function"><span class="keyword">function</span>(<span class="params">error,results_3, fields</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">          <span class="keyword">if</span>(results_3) &#123;</span><br><span class="line">            connection.release();</span><br><span class="line">            TunnelService.emit(tunnelId, messageId, results_3);</span><br><span class="line">            callback(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span>.waterfall(tasks, <span class="function"><span class="keyword">function</span>(<span class="params">error, results</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这个代码块确定没把数据库表的字段抖出来了吗。。。<br>emmmm，还好吧。各位高抬贵手，高抬贵手。。。</p>
</blockquote>
<h6 id="前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题"><a href="#前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题" class="headerlink" title="前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题"></a>前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题</h6><p>这里由于我自己也记不大清楚当初的处理思路（尤其是小程序前端在处理过程中使用的“幻数”），<br>很可能都是我无意识情况下的“瞎调试”的成果。<br><strong>这个说实话我是极其不提倡这么干的，虽然有的时候的确有用</strong><br>此处提供各模块的关键代码供大家参阅：<br>服务器后端MySQL通信模块上的初始化操作，关键就是设置时区到正确的时间<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.env.TZ = <span class="string">'Asia/Shanghai'</span>;</span><br><span class="line"><span class="keyword">var</span> pool;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlExecute</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> mysqlInit() &#123;</span><br><span class="line">    pool = mysql.createPool(&#123;</span><br><span class="line">    connectionLimit: <span class="number">10</span>,</span><br><span class="line">    host     : mysqlHost,</span><br><span class="line">    user     : mysqlUser,</span><br><span class="line">    password : mysqlPassword,</span><br><span class="line">    database : mysqlDatabase,</span><br><span class="line">    timezone : process.env.TZ</span><br><span class="line">    &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>小程序前端的时间处理相关代码format，关键就是正则表达式+暴力剪切+暴力连接<br>（其中用了微信开发者工具的默认小程序demo里面的util.js时间处理函数）<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currentDate = utils.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="keyword">var</span> currentDateAnnual = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> classContentStr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeFormat = <span class="function">(<span class="params">str</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> start = str[i].class_timestart;</span><br><span class="line">        <span class="keyword">var</span> end = str[i].class_timend;</span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(str[i].class_date.slice(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">        date = date.getFullYear() + <span class="string">"年"</span> +</span><br><span class="line">        (<span class="built_in">parseInt</span>(date.getMonth()) + <span class="number">1</span>).toString() + <span class="string">"月"</span> +</span><br><span class="line">        date.getDate() + <span class="string">"日"</span>;</span><br><span class="line">        start = start.slice(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (start.slice(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">"0"</span>) &#123;</span><br><span class="line">            start = start.slice(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        &#125;</span><br><span class="line">            end = end.slice(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> (end.slice(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">"0"</span>) &#123;</span><br><span class="line">            end = end.slice(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        str[i].class_date = date;</span><br><span class="line">        str[i].class_timestart = start;</span><br><span class="line">        str[i].class_timend = end</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateFormat = <span class="function">(<span class="params">options, that</span>) =&gt;</span> &#123;</span><br><span class="line">    that.setData(&#123; </span><br><span class="line">        dateIndex: currentDate,</span><br><span class="line">        ateLimitStart: currentDate,</span><br><span class="line">    &#125;);</span><br><span class="line">    currentDateAnnual.setFullYear(currentDateAnnual.getFullYear() + <span class="number">1</span>);</span><br><span class="line">    currentDateAnnual.setDate(currentDateAnnual.getDate() - <span class="number">1</span>);</span><br><span class="line">    that.setData(&#123; <span class="attr">dateLimitEnd</span>: currentDateAnnual &#125;);</span><br><span class="line">    <span class="keyword">if</span> (options.class_content != <span class="literal">null</span>) &#123;</span><br><span class="line">        classContentStr = <span class="built_in">JSON</span>.parse(options.class_content);</span><br><span class="line">        <span class="keyword">if</span> (classContentStr.student_limit == <span class="string">'0'</span>) &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                studentLimit: <span class="string">''</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                studentLimit: classContentStr.student_limit</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        classContentStr.class_date = classContentStr.class_date.replace(<span class="string">"年"</span>, <span class="string">"-"</span>);</span><br><span class="line">        classContentStr.class_date = classContentStr.class_date.replace(<span class="string">"月"</span>, <span class="string">"-"</span>);</span><br><span class="line">        classContentStr.class_date = classContentStr.class_date.replace(<span class="string">"日"</span>, <span class="string">""</span>);</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">            className: classContentStr.class_name,</span><br><span class="line">            classIntro: classContentStr.class_intro,</span><br><span class="line">            dateIndex: classContentStr.class_date,</span><br><span class="line">            classPlace: classContentStr.class_place,</span><br><span class="line">            timeEndIndex: classContentStr.class_timend,</span><br><span class="line">            timeStartIndex: classContentStr.class_timestart,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> classContentStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    timeFormat: timeFormat,</span><br><span class="line">    dateFormat: dateFormat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>看着相当的难受啊，这x一样的代码风格😂<br>没毛病，（下一版）会改的会改的🙏<br>（没错，之后的版本我直接把那个又臭又长的<code>classContentStr</code>给改了。。。）</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(str[i].class_date.slice(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line"> <span class="comment">//这里得到的结果格式应该类似于yyyy-mm-dd</span></span><br><span class="line">date = date.getFullYear() + <span class="string">"年"</span> +</span><br><span class="line">        (<span class="built_in">parseInt</span>(date.getMonth()) + <span class="number">1</span>).toString() + <span class="string">"月"</span> +</span><br><span class="line">        date.getDate() + <span class="string">"日"</span>;</span><br></pre></td></tr></table></figure>
<p>想看幻数的同学看上面，我把它截取下来了。<br>是这样的：月份数诡异地被我加了一个1，然后居然就对了。。。<br>我也不知道这个到底是怎么一回事，在JavaScript里有什么奇异的原理导致了这个结果，有人知道的话可以告诉我吗?</p>
<blockquote>
<p>后续：我查到了，因为getMonth()是以数组形式来存储月份的，下标是0~11</p>
</blockquote>
<h6 id="人数上限的数据格式转换，以及人数已满等状态下阻止用户预约"><a href="#人数上限的数据格式转换，以及人数已满等状态下阻止用户预约" class="headerlink" title="人数上限的数据格式转换，以及人数已满等状态下阻止用户预约"></a>人数上限的数据格式转换，以及人数已满等状态下阻止用户预约</h6><blockquote>
<p>你还别说，我一边写这个笔记，一边还在最新版本的小程序里发现各种蜜汁有趣的bug呢😂</p>
</blockquote>
<p>人数上限作为讲师发布课程时的一个选填项，可以说是本项目数据处理的一个难点，其处理方式在本项目中也起到了一种模范的形式<br>难点在于：人数上限分为两种情况：“无上限”和存在数字上限，我们只能利用0这个数字来表示“无上限”，因为基本上不可能开设一个人也没有的课程，至少的人数上限也应该是1。但是反过来说，用户在填写表单时不可能特别将无上限填写为0，这在用户体验上只有留空才更加符合一般的表单填写习惯。</p>
<p>所以我们在用户点击上传按钮触发的函数中就将人数上限进行处理转换：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> studentLimitFormat;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">this</span>.data.studentLimit == <span class="string">''</span>)&#123;</span><br><span class="line">    studentLimitFormat = <span class="string">'0'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    studentLimitFormat = <span class="keyword">this</span>.data.studentLimit;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//之后传到后端的就是studentLimitFormat</span></span><br></pre></td></tr></table></figure></p>
<p>并在从后端回传的过程中也一样进行相应的处理，这里以课程内容页代码为例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(classContentStr.student_limit == <span class="string">'0'</span>)&#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    studentLimit: <span class="string">'无上限'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    studentLimit: classContentStr.student_limit</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>同时，也应当在人数已满时阻止用户预约。在微信小程序中，我们使用<code>&lt;block wx:if&gt;</code>的wxml标签形式进行分类，通过条件判断来决定显示何种按钮，并只在“预约”和“取消预约”按钮上添加相应的函数钩子，这里以课程列表的上传按钮为例：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;item.student_sum &gt;= item.student_limit &amp;&amp; item.student_limit &gt; 0&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"reserve-button"</span> <span class="attr">data-content</span>=<span class="string">'&#123;&#123;item&#125;&#125;'</span>&gt;</span></span><br><span class="line">        人数已满</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;item.status == 0&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"reserve-button"</span> <span class="attr">data-content</span>=<span class="string">'&#123;&#123;item&#125;&#125;'</span>&gt;</span></span><br><span class="line">        已取消</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;item.reserve_status == null || item.reserve_status != 1&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"reserve-button"</span> <span class="attr">bindtap</span>=<span class="string">"bindReserve"</span> <span class="attr">data-content</span>=<span class="string">'&#123;&#123;item&#125;&#125;'</span>&gt;</span></span><br><span class="line">        预约</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;item.reserve_status == 1&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"reserve-button"</span> <span class="attr">bindtap</span>=<span class="string">"bindCancelReserve"</span> <span class="attr">data-content</span>=<span class="string">'&#123;&#123;item&#125;&#125;'</span>&gt;</span>          </span><br><span class="line">        取消预约</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当然，我们也在后端数据库表的设计中，将讲师课程表的人数上限字段的默认值设置为0。这算是最后一道防线吧，防止其他非法输入对数据的影响。</p>
<h6 id="提交表单前的各种格式检查"><a href="#提交表单前的各种格式检查" class="headerlink" title="提交表单前的各种格式检查"></a>提交表单前的各种格式检查</h6><p>是的，以人数上限的数据上传前进行处理为范本，我们普遍采用了<code>if() { return; }</code>的形式对非法输入进行检查，而这些非法输入的多样性之丰富，远远超出了我们的想象。例如：<br>有时间的非法输入，直接用正则表达式替换掉时间中的冒号+暴力的数字比较（<code>new Date</code>说实话多此一举了）：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.data.timeStartIndex.replace(<span class="regexp">/:/g</span>, <span class="string">""</span>)) &gt; <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.data.timeEndIndex.replace(<span class="regexp">/:/g</span>, <span class="string">""</span>)))&#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">        title: <span class="string">'提示'</span>,</span><br><span class="line">        content: <span class="string">'开始时间应小于结束时间'</span>,</span><br><span class="line">        showCancel: <span class="literal">false</span>,</span><br><span class="line">        confirmColor: <span class="string">'#17abe3'</span>,</span><br><span class="line">        confirmText: <span class="string">'好的'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有人数上限输入非数字时，调用<code>isNaN()</code>函数的同时防止将留空代表“无上限”也拦截：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">isNaN</span>(<span class="keyword">this</span>.data.studentLimit) &amp;&amp; !(<span class="keyword">this</span>.data.studentLimit == <span class="literal">undefined</span>)) &#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">        title: <span class="string">'提示'</span>,</span><br><span class="line">        content: <span class="string">'人数上限应输入数字'</span>,</span><br><span class="line">        showCancel: <span class="literal">false</span>,</span><br><span class="line">        confirmColor: <span class="string">'#17abe3'</span>,</span><br><span class="line">        confirmText: <span class="string">'好的'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>甚至对是否产生了无效的预约时间也进行了合法性检查：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((currentDate &gt; selectedDate) || ((currentDate == selectedDate) &amp;&amp; (currentTime &gt; selectedTime)) &#123;</span><br><span class="line">    wx.showModal(&#123;</span><br><span class="line">        title: <span class="string">'提示'</span>,</span><br><span class="line">        content: <span class="string">'预约时间应大于当前时间'</span>,</span><br><span class="line">        showCancel: <span class="literal">false</span>,</span><br><span class="line">        confirmColor: <span class="string">'#17abe3'</span>,</span><br><span class="line">        confirmText: <span class="string">'好的'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们在合法性检查上花费了大量的时间，但也只能够对非法情况进行枚举性质的检测，若有一些我们不了解的业界最佳实践，欢迎联系我们探讨这一问题。</p>
<h5 id="程序测试"><a href="#程序测试" class="headerlink" title="程序测试"></a>程序测试</h5><p>程序测试确实是开发过程当中的重要一环，由于团队资源有限，且微信账号确实具有不可模拟性，所以我们在不足以拿到足够的微信测试账号以及测试机时，借助微信开发者工具和自己的手机号，建立了一个仅有两个核心测试账号、一台安卓测试机的测试体系（后期在发现iOS独有bug时，我们也找了临时的iPhone测试机和测试微信账号）。</p>
<ul>
<li>两个测试账号一个默认为普通学生用户，另一个通过后台管理网站通过讲师认证注册为讲师（在后台管理网站还未部署时，其实是通过手工向数据库表加入记录实现的），两号均在微信公众平台上注册为开发者</li>
<li>一般情况下，在PC端微信开发者工具上登录其中一个用户，手机端也登录这一用户，以测试学生端或讲师端在开发者工具的模拟器和实机上效果是否一致，也可以通过远程调试定位实机上的bug</li>
<li>若想测试讲师端与学生端的数据互动效果，可以在开发者工具登录一个用户，另一个用户在手机上通过微信最新版本的“切换用户”功能登录小程序</li>
<li>若想测试多个教师或多个学生产生数据的效果，可以通过后台管理网站同时认证讲师或取消讲师认证来实现身份上的同一性。</li>
<li>若想在临时的iPhone测试机上进行远程调试，记得先将该机的测试微信号加入开发者列表，如此方能远程调试成功，测试结束后记得再删除即可。</li>
</ul>
<h5 id="小程序最终界面"><a href="#小程序最终界面" class="headerlink" title="小程序最终界面"></a>小程序最终界面</h5><p>UI设计上大量采用了腾讯云一站式小程序解决方案小程序demo的配色和界面元素。<br>（其实就是没精力去设计UI啦。。。）<br>基本设计思想更偏向WP式的平面风格</p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP2.PNG" alt="WEAPP2"></p>
<p><center>第一版小程序主界面（此时小程序名称还没改）</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP3.PNG" alt="WEAPP3"></p>
<p><center>第一版小程序主界面（无预约时显示的欢迎+提示语）</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP4.JPEG" alt="WEAPP4"></p>
<p><center>第一版小程序课程列表</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP5.JPEG" alt="WEAPP5"></p>
<p><center>第一版小程序讲师端主界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP6.JPEG" alt="WEAPP6"></p>
<p><center>第一版小程序讲师端编辑课程界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP7.JPEG" alt="WEAPP7"></p>
<p><center>第一版小程序“我的”页面</center><br></p>
<h4 id="项目第二版"><a href="#项目第二版" class="headerlink" title="项目第二版"></a>项目第二版</h4><p>项目第二版的迭代原因是十分偶然的。由于<a href="https://developers.weixin.qq.com/blogdetail?action=get_post_info&amp;lang=zh_CN&amp;token=&amp;docid=000aee01f98fc0cbd4b6ce43b56c01" target="_blank" rel="noopener">微信官方对于小程序用户登录API的调整</a>影响了wafer1一站式解决方案中的腾讯云小程序SDK以及Node.js服务器端SDK通过信道服务器对用户身份进行认证的正常操作进行，导致了SDK提供的信道全双工通信对于新注册用户不再可用，最终使小程序的大多数功能处于不可用状态。（据悉，wafer2的SDK信道登录方式暂未受到影响，估计是腾讯方面在wafer1逐渐下架的情况下忽视了使用wafer1的老用户，测试不全面而导致这一情况发生）</p>
<p>为了解决这一重大bug，我们团队仔细研读了微信官方的登录API调整公告以及腾讯云SDK文档，最终采用了“添加首次登录用户认证界面+全面弃用信道通信方式并采用原生通信方式全面重写”的改进方案。<strong>值得一提的是，在重写过程中我们着重采用了JavaScript中的异步Promise编程，对小程序前端通信模块、后端服务器MySQL通信模块进行封装重写。在开发过程中，本人收获了更多的JS异步编程经验，并对Promise为代表的异步编程解决方案有了更加深刻的理解</strong></p>
<p>由于第二版着重于bug的修复和代码的重写，并未对UI界面设计做出太多调整，所以此处不再展示小程序主界面截图。若想知道第一版与最新版UI变化为何如此之大，请继续往下阅读，感谢您的理解！</p>
<h5 id="开发难点及笔记-1"><a href="#开发难点及笔记-1" class="headerlink" title="开发难点及笔记"></a>开发难点及笔记</h5><h6 id="微信登录API调整后小程序前端后端相应的修复解决方案"><a href="#微信登录API调整后小程序前端后端相应的修复解决方案" class="headerlink" title="微信登录API调整后小程序前端后端相应的修复解决方案"></a>微信登录API调整后小程序前端后端相应的修复解决方案</h6><p>根据微信官方的说法，若想像之前那样获得完备的用户基本信息:</p>
<blockquote>
<p>必须使用<code>&lt;button&gt;</code>组件，并将<code>open-type</code>指定为<code>getUserInfo</code>类型，用户允许授权后，可获取用户基本信息。</p>
</blockquote>
<p>而另一种使用<code>&lt;open-data&gt;</code>组件展示用户信息的方式，就真的只有展示功能了。。。可能也是我太菜，根本没办法在JS获取到组件内部加载出来的用户信息。</p>
<p>所以就相当于只能让用户点击一次按钮来完成整个用户信息获取的工作。根据我们当初设计的数据库表结构，用户信息，尤其是其唯一标识码openId，在本项目中起到了相当关键的作用，若不能获取这些信息，则根本无法正常使用小程序的各项基本功能，所以我们在小程序的首页设计了一个遮罩层，若未进行用户信息授权的话，用户看见的只有遮罩层上的提示和用户授权登录的按钮。</p>
<p>我们具体的实现结果如下所示:<br>wxml代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;!hasUserInfo&#125;&#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"auth-page"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"auth-page-note"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"../../images/reserve-hl.png"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">text</span>&gt;</span>请允许微信授权登录后\n继续使用小程序<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"auth-page-button"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;canIUse&#125;&#125;"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"bindGetUserInfo"</span>&gt;</span></span><br><span class="line">                授权登录</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"auth-page-uncomp-note"</span> <span class="attr">wx:else</span>&gt;</span></span><br><span class="line">                不支持授权登录，请升级微信版本</span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>JS代码（index页面内的钩子函数）：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bindGetUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.detail.userInfo)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> userInfo = e.detail.userInfo;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户授权：'</span>, userInfo);</span><br><span class="line"></span><br><span class="line">    wx.setStorageSync(<span class="string">'nickName'</span>,userInfo.nickName);</span><br><span class="line">    wx.setStorageSync(<span class="string">'avatarUrl'</span>, userInfo.avatarUrl);</span><br><span class="line">    auth.showAuthPage(<span class="keyword">this</span>);   </span><br><span class="line"></span><br><span class="line">    wx.showToast(&#123;</span><br><span class="line">      title: <span class="string">"正在登录"</span>,</span><br><span class="line">      icon: <span class="string">"loading"</span>,</span><br><span class="line">      duration: <span class="number">1500</span>,</span><br><span class="line">      mask: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//说实话有点蠢这里，设置了一个硬性的1.5s时间，主要是因为貌似有点bug，</span></span><br><span class="line">    <span class="comment">//我如果设置wx.showToast一直显示，然后在用户信息拿到后再调用wx.hideToast，</span></span><br><span class="line">    <span class="comment">//经常性失灵，很绝望。可能真的是只能在当前页面中的js调用。但是很奇怪的是，wx.stopPullDownRefresh就不用这么干。。。</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'用户授权：拒绝'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<p>JS代码（上面调用的auth所在的auth.js）：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> showAuthPage = <span class="function"><span class="params">that</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(wx.getSetting) &#123;</span><br><span class="line">        wx.getSetting(&#123;</span><br><span class="line">            success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">var</span> auth = res.authSetting,</span><br><span class="line">                nickName = wx.getStorageSync(<span class="string">'nickName'</span>),</span><br><span class="line">                hasUserInfo;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"授权情况："</span>, auth);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (auth[<span class="string">'scope.userInfo'</span>] &amp;&amp; nickName)</span><br><span class="line">                    hasUserInfo = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> </span><br><span class="line">                    hasUserInfo = <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"授权标记："</span>, hasUserInfo);                    </span><br><span class="line">                that.setData(&#123;</span><br><span class="line">                    hasUserInfo: hasUserInfo</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    showAuthPage: showAuthPage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>感觉上小程序的底层应该也是像Vue、Angular、React那样写了一个有DOM更新之类功能的前端引擎，基本上hasUserInfo更新了之后，那个遮罩层直接就消失了，DOM更新的速度相当快。也有人吐槽小程序的JS风格就像Vue+React。。。</p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP8.PNG" alt="WEAPP8"></p>
<p><center>第二版小程序用户登录授权页面（请忽略那个远程调试用的黑框😂）</center><br></p>
<h6 id="前端通信模块以及后端MySQL通信模块的重写和Promise封装"><a href="#前端通信模块以及后端MySQL通信模块的重写和Promise封装" class="headerlink" title="前端通信模块以及后端MySQL通信模块的重写和Promise封装"></a>前端通信模块以及后端MySQL通信模块的重写和Promise封装</h6><p>有人说，你们不是又重新实现了用户信息获取了吗？为什么还是不能用原来的信道通信方式？而且再不济重新写一个socket类型的通信方式岂不美哉（可以实现全局广播，这样可以及时通知用户是否有数据发生了更改）？</p>
<blockquote>
<p>emmmm，技术菜，只是主要原因之一。（我承认我确实还不会写socket。。。）</p>
</blockquote>
<p>关键是那个腾讯云SDK它就是用<strong>原来的登录方式</strong>（划重点）获取用户信息的啊，现在微信方面彻头彻尾地改了，你不去重写它，还有其他办法吗？</p>
<p>第一步，先别急着把采用信道通信的代码全删了，至少通信时数据的格式你得看看吧。</p>
<p>然后，我确实菜，所以只能在前端通信模块乖乖地上原生wx.request请求了。。。真的，我就觉得这就是AJAX啊。<br>首先还是先写一个简单的<code>post</code>函数，把wx.request定制化封装一下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> post = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            url: config.service.testUrl,</span><br><span class="line">            data: obj,</span><br><span class="line">            success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.data.results) &#123;</span><br><span class="line">                    resolve(res.data.results);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    reject(res.data.error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                reject(<span class="string">'网络出错'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么要用promise对wx.request进行封装呢？理由很简单，依然是我们之前提到的JavaScript的单线程特性，需要使用回调函数<code>callback()</code>对一些可能阻塞整个JS代码执行的操作进行封装，让它们先挂起，让代码先继续执行下去，等需要进行这些操作的时候再回过头来执行——这就是<strong>异步非阻塞的编程模式</strong>。而大部分可以调用的函数都提供了回调的使用方法，以及你自己定义的函数也可以提供回调。</p>
<p>回调作为一种异步编程的解决方法，看起来很美好。但如果在这样的一种场景下你估计就笑不出来了：</p>
<blockquote>
<p>例如，你向后端的一个API请求一个数据。好，数据拿到了，现在你要根据这个数据再去请求后端的另一个API的数据……<br>如此下去，你请求了3个API，OK，你终于拿到了想要的最终数据，然后你还要将这个数据处理一下才能展示到界面里面</p>
</blockquote>
<p>这样的话，你写的代码大概像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">                wx.request(&#123;</span><br><span class="line">                    <span class="comment">//...</span></span><br><span class="line">                    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="comment">//format your final data.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果再多几次回调函数的嵌套，估计你自己看这代码也差不多要阵亡了。没错，这就是所谓的<strong>回调地狱</strong>。<br>后端与MySQL之类的数据库通信也同理，你输入了一条SQL语句的结果是下一条SQL语句的内容……</p>
<p>那么除了疯狂地筑起一个回调金字塔之外，还有什么别的办法能够解决异步非阻塞编程问题呢？Promise就是其中之一。当然我之前用的async也是一种，但是那个写起来说实话更加别扭，至少Promise允许你用封装函数的方式进行编程，显然比写一些蜜汁有趣的函数数组正常多了。</p>
<p>好了，我之前提到了我用Promise封装了一个<code>post</code>函数，现在我就展示一个使用Promise解决异步问题的实例：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initUserInfo = <span class="function">(<span class="params">that</span>) =&gt;</span> &#123;</span><br><span class="line">  wx.login(&#123;</span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(res.code) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'获取用户登录凭证：'</span>, res.code);</span><br><span class="line"></span><br><span class="line">        post(&#123;</span><br><span class="line">          <span class="string">'msgType'</span>: <span class="string">'wxAuth'</span>, </span><br><span class="line">          <span class="string">"code"</span>: res.code</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"收到消息："</span>, res);</span><br><span class="line">          getApp().data.openId = res;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> post(&#123;</span><br><span class="line">            <span class="string">'msgType'</span>: <span class="string">'checkIsTeachAuth'</span>,</span><br><span class="line">            <span class="string">'openId'</span>: getApp().data.openId</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"收到消息："</span>, res);</span><br><span class="line">          <span class="keyword">if</span> (res.isTeachAuth == <span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            getApp().data.isTeachmodeGlobal = <span class="number">2</span>;</span><br><span class="line">            getApp().data.teacherRealName = res.realName;</span><br><span class="line">            getApp().data.teacherAuthId = res.teacherId;</span><br><span class="line">            getApp().data.teachAuthStatus = res.status;</span><br><span class="line"></span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              isTeachMode: <span class="number">2</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> post(&#123;</span><br><span class="line">              <span class="string">'msgType'</span>: <span class="string">'getClassDataTeach'</span>,</span><br><span class="line">              <span class="string">'openId'</span>: getApp().data.openId</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            getApp().data.isTeachmodeGlobal = <span class="number">1</span>;</span><br><span class="line">            getApp().data.teachAuthStatus = res.status;</span><br><span class="line"></span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              isTeachMode: <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> post(&#123;</span><br><span class="line">              <span class="string">'msgType'</span>: <span class="string">'getReservedClass'</span>,</span><br><span class="line">              <span class="string">'openId'</span>: getApp().data.openId</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"收到消息："</span>, res);</span><br><span class="line">          <span class="keyword">if</span> (getApp().data.isTeachmodeGlobal == <span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              reserveArray: format.timeFormat(res).reverse(),</span><br><span class="line">              emptyNote: <span class="string">''</span>,</span><br><span class="line">              emptyIntro: <span class="string">''</span>,</span><br><span class="line">              emptyUserName: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> (res[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                emptyNote: welcomeQuote,</span><br><span class="line">                emptyIntro: userWelcomeIntro,</span><br><span class="line">                emptyUserName: <span class="literal">false</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            wx.stopPullDownRefresh();  </span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            that.setData(&#123;</span><br><span class="line">              classArray: format.timeFormat(res).reverse(),</span><br><span class="line">              emptyNote: <span class="string">''</span>,</span><br><span class="line">              emptyIntro: <span class="string">''</span>,</span><br><span class="line">              emptyUserName: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">if</span> (res[<span class="number">0</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">              that.setData(&#123;</span><br><span class="line">                emptyNote: getApp().data.teacherRealName + <span class="string">" 欢迎！"</span>,</span><br><span class="line">                emptyIntro: teacherWelcomeIntro,</span><br><span class="line">                emptyUserName: <span class="literal">false</span></span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            wx.stopPullDownRefresh();</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'发生错误：'</span>, error);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'获取用户登录态失败：'</span>, res.errMsg);        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>是不是超长无比。。。再联想一下刚才我演示的回调地狱，用回调不知道要套多少层了。。。<br>而且一个<code>post</code>函数可以反复使用，因为其传入的参数只有一个obj，就是发送到后端的json数据包，除此之外其他的操作都可以快速的复用，并且从后端返回的数据结果也可以由Promise传到下一个<code>.then</code>函数中。</p>
<p>除了<code>post</code>之外，我也仿造了信道通信方式，搞了一个<code>emit</code>函数。信道通信方式其实更加地先进，它是将所有的信道监听函数在初始化页面的时候就规定好了，也就是说把所有接收到后端数据之后的<code>success</code>操作都先写好了，之后再到需要向后端服务器发送数据的地方调用<code>emit</code>函数，这样也更加地灵活，发送数据时只管输入数据的格式和内容就OK了。</p>
<p>但是，本项目基本上除了用户在初始化数据或表单时需要将后端返回的数据进行存储和展示操作外，其他的通信操作基本上属于更新数据的范畴，也就是后端返回数据更新成功的结果后，只需调用一下数据刷新函数让服务器将更新好的数据回传即可。既然<code>emit</code>函数的功能如此确定，我也就直接将它封装好了，当然也得用用Promise了，既然都写好了，再多写个回调版本的函数就浪费了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emit = <span class="function">(<span class="params">obj,that</span>) =&gt;</span> &#123;</span><br><span class="line">    post(obj).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'收到消息：'</span>, res);</span><br><span class="line">        <span class="keyword">if</span> (getApp().data.isTeachModeGlobal == <span class="number">2</span>)</span><br><span class="line">            getApp().data.isTeachDataUpdated = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            getApp().data.isStuDataUpdated = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj.msgType == <span class="string">'reserveClass'</span> || obj.msgType == <span class="string">'editClass'</span> </span><br><span class="line">        || obj.msgType == <span class="string">'classDataUpload'</span>) &#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">                icon: <span class="string">'success'</span>,</span><br><span class="line">                title: <span class="string">'数据上传成功'</span>,</span><br><span class="line">                duration: <span class="number">3000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        wx.startPullDownRefresh(&#123;</span><br><span class="line">            success: that.onPullDownRefresh</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'发生错误：'</span>, error);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>emit</code>函数实际用起来也就是这样的，多传了一个this指针而已：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">req.emit(&#123;</span><br><span class="line">  <span class="string">'msgType'</span>: <span class="string">'reserveClass'</span>,</span><br><span class="line">  <span class="string">'openId'</span>: getApp().data.openId,</span><br><span class="line">  <span class="string">'nickName'</span>: wx.getStorageSync(<span class="string">'nickName'</span>),</span><br><span class="line">  <span class="string">'classId'</span>: e.currentTarget.dataset.content.id</span><br><span class="line">&#125;,<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></p>
<p>既然后端MySQL通信模块也要Promise封装，那么肯定也是要先定义一个用Promise封装的函数<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> queryProm(sql, params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        pool.getConnection(<span class="function">(<span class="params">error,connection</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(error) &#123; reject(error); <span class="keyword">throw</span> error; &#125; </span><br><span class="line">            connection.query(sql, params, (error, results, fields) =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(results) &#123;</span><br><span class="line">                    resolve(results);</span><br><span class="line">                    connection.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，我后来也发现其实大部分的操作其实都只需要一步回调就能解决问题了，所以我也写了一个回调版本的<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> query(sql, params, callback) &#123;</span><br><span class="line">    pool.getConnection(<span class="function">(<span class="params">error,connection</span>) =&gt;</span> &#123;</span><br><span class="line">      connection.query(sql, params, (error, results, fields) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">        <span class="keyword">if</span> (results) &#123;</span><br><span class="line">          callback(error, results);</span><br><span class="line">          connection.release();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后这里也有一个比较模棱两可的经验，就是前端传到后端的json数据包内定义了<code>msgType</code>，可以在传入后端的地址是同一个时，根据msgType消息的类型进行不同的操作。<br>具体操作在后端是怎样分类的，我这里用了比较原始的switch-case语句，但是说实话，这样会造成代码整体的可读性下降。因为消息类型一多，全挤在一层switch里面了，修改和查找都相当困难，这也是我需要改进的地方——代码的合理化、层次化和结构化。</p>
<p>最后用Promise的效果就是这样的（这个就是之前在项目第一版中用async写过的那个操作）：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'reserveClass'</span>: </span><br><span class="line">    sql.queryProm(<span class="string">"SELECT * FROM user_reserve WHERE class_id=? AND user_id=?"</span>, </span><br><span class="line">            [req.query.classId, req.query.openId]</span><br><span class="line">        ).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(response[<span class="number">0</span>] == <span class="literal">null</span>) </span><br><span class="line">                <span class="keyword">return</span> sql.queryProm(</span><br><span class="line">                    <span class="string">"INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())"</span>,</span><br><span class="line">                    [req.query.openId, req.query.nickName, req.query.classId]</span><br><span class="line">                );</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> sql.queryProm(</span><br><span class="line">                    <span class="string">"UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?"</span>,</span><br><span class="line">                    [req.query.classId, req.query.openId]</span><br><span class="line">                );</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            res.send(&#123;<span class="attr">results</span>: response&#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            res.send(&#123;<span class="attr">error</span>: err&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不要啥都写res，想啥呢</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></p>
<p>这个“想啥呢”的注释是这样的，Express框架本身有一个回传数据功能的对象参数叫res，然后我写函数也习惯把数据本身叫res，这下好了，相当于我用回传的数据去调用他的成员函数send()，这一个数据哪儿来的send()函数啊？当然前端就没有收到任何回传的数据了。我纳闷了很久怎么Promise好好的就不能用了呢，最后登了服务器上去翻了翻log才发现问题，这也充分说明log在debug中的极端重要性。</p>
<p>当然用回调的效果是这样的： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">'cancelReserve'</span>:</span><br><span class="line">    sql.query(<span class="string">"UPDATE user_reserve SET status=0 WHERE class_id=? AND user_id=?"</span>,[req.query.classId, req.query.openId], (error, results) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(error) </span><br><span class="line">            res.send(&#123;<span class="attr">error</span>: error&#125;);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            res.send(&#123;<span class="attr">results</span>: results&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
<p>那么既然也在服务器后端弃用了信道通信所在的腾讯云SDK，我也采用了Express原生的路由方式来将请求定位到以上MySQL通信模块所在的文件上。</p>
<h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><blockquote>
<p>别看我，我就是凑个小节数的，要不然就一个笔记太尴尬了。。。</p>
</blockquote>
<p>本次版本迭代，通过添加用户授权登录界面、从底层用原生请求方式重写前端通信模块和后端MySQL通信模块，并使用Promise进行异步编程封装，基本上修复了信道通信因登录API调整而无法使用，导致整个程序无法正常运行的bug。</p>
<h4 id="项目第三版"><a href="#项目第三版" class="headerlink" title="项目第三版"></a>项目第三版</h4><p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP1.PNG" alt="WEAPP1"></p>
<p><center>小程序第三版主界面，更多预览请直接打开小程序或阅读本文后续内容</center><br></p>
<p>项目第三版的迭代原因是需求方提议加入普通学生用户端也能够发起一对一辅导预约，然后讲师能够对此进行接单的“辅导预约”功能。<br>我们开发方也趁着本次迭代的机会，对小程序的前端界面UI进行了大范围的重写，从而能够彻底弃用原先大范围采用腾讯云一站式小程序解决方案小程序demo的配色和界面元素的旧UI。</p>
<p><strong>在此特别感谢Jason Gao同学以及他的“有通知”小程序对本项目UI重写提供的设计参考和技术支持！</strong></p>
<p>在新UI的开发过程中的技术难点在于：</p>
<ol>
<li>取消了微信小程序的顶部、底部菜单栏后，小程序界面对于不同尺寸以及刘海屏手机的适配；</li>
<li>取消了底部菜单栏后，自行开发的底部菜单栏的路由结构问题；</li>
<li>取消了顶部菜单栏后，下拉刷新、返回导航、页面标题等顶部菜单栏功能不再实用的情况下的自主开发。</li>
<li>tab标签式导航栏的实现</li>
</ol>
<p>同时，我们也修复了众多之前两个版本未发现的、以及在本版本开发过程中遇到的逻辑功能上的bug，例如：</p>
<ol>
<li>预约时间相对于当前时间已经过期的未采取过期处理；</li>
<li>未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况；</li>
<li>对于人数上限、备注等留空项目的前端数据处理不当；</li>
<li>iOS系统下“我的页面”用户头像被背景图案覆盖的问题；</li>
<li>还有其他的一些细节小bug；</li>
</ol>
<h5 id="开发难点及笔记-2"><a href="#开发难点及笔记-2" class="headerlink" title="开发难点及笔记"></a>开发难点及笔记</h5><p>在谈UI开发之前，我首先得回答这个问题：为什么要隐藏顶部菜单栏以及底部菜单栏呢？</p>
<p>理由有两个：</p>
<ul>
<li>功能上的需要：主要是微信小程序自带的底部菜单栏定制性奇差，必须得每一个菜单项对应的路径、图标、颜色、文字，乃至菜单项的数量，全部都在<code>app.json</code>里写死了，而且样式清一色都是死板的文字/图标/文字+图标，无法进行更高级别的个性化定制。就像本项目这样<strong>加一个高度明显超出菜单栏本身的大大的加号按钮</strong>，或者加一点其他的特殊样式，用微信小程序自带的底部菜单栏都是无法实现的。同理，微信小程序自带的顶部菜单栏同样也无法像本项目这样<strong>放置一个可点击的刷新按钮</strong>。</li>
<li>设计上的需要：从本文中的小程序界面效果图可以看出，这种底色完全一致的、通透的视觉效果，明显区别于直接采用微信小程序自带方案的其他大多数小程序的界面，是十分夺人眼球的设计（虽然直接采用微信小程序自带方案也可以做得相当美观）。</li>
</ul>
<h6 id="UI难点之一：屏幕尺寸适配"><a href="#UI难点之一：屏幕尺寸适配" class="headerlink" title="UI难点之一：屏幕尺寸适配"></a>UI难点之一：屏幕尺寸适配</h6><p><strong>微信小程序事实上就是一种webview套壳应用的变体</strong>，这个是众所周知的事情了。所以不难联想到当使用微信小程序自带的顶部菜单栏时，小程序的wxml界面自上而下渲染的<strong>起点</strong>，应当是在顶部菜单栏的下方的，就像一般的带标题栏的安卓webview页面，都是顶部的元素帮助撑起了手机系统顶部的状态栏以及顶部的菜单栏在内的一个相当大的高度。<br>如果隐藏了顶部菜单栏的话，就会出现wxml界面直接从状态栏下方开始渲染的情况，而且一般状态栏都是最顶层的，也就是说状态栏会遮挡一部分wxml内容。。。大概像下面这样：</p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP9.PNG" alt="WEAPP9"></p>
<p><center>在iPhone X上有刘海的话就更加尴尬了。。。</center><br></p>
<p>所以需要的就是将这一部分的位置空出来，尤其是对iPhone X的刘海要额外进行适配（后来在开发者工具中的测试我们也发现了iPhone 4/iPhone 5这一类小尺寸屏幕的手机也需要额外适配）。所以我们的思路就是动态定义包裹所有其他元素的<code>&lt;view class=&quot;root&quot;&gt;</code>的<code>padding-top</code>wxss属性。尽管wxss无法使用JS进行动态更改，wxml还是能用JS进行动态更改的。所以就想出了动态定义<code>class</code>属性的内容就OK了，代码如下——<br>wxml代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"root &#123;&#123;isIpx?'root-ipx':''&#125;&#125; &#123;&#123;isIp4?'root-ip4':''&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>JS代码：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">wx.getSystemInfo(&#123;</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(res.model == <span class="string">'iPhone X'</span>)&#123;</span><br><span class="line">            getApp().data.isIpx = <span class="literal">true</span>;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                isIpx: getApp().data.isIpx</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(res.model == <span class="string">'iPhone 5'</span> || res.model == <span class="string">'iPhone 4'</span>)&#123;</span><br><span class="line">            getApp().data.isIp4 = <span class="literal">true</span>;</span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                isIp4: getApp().data.isIp4</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>wxss代码：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.root-ip4</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">30</span>rpx; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.root-ipx</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">60</span>rpx; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是在之后的测试中发现，一旦预约课程的表单变长，可以滚动起来了以后，状态栏底下会出现本来应该被遮罩了的表单。。这是因为<code>padding-top</code>只是把顶部元素下移了，状态栏本身是透明的，所以肯定无法遮罩滚动到顶部的表单。解决方法和上面是一样的，自己再定义一个<code>&lt;view&gt;</code>元素，用来遮挡状态栏底部的其他元素就OK了，同样要对特殊尺寸的屏幕做适配，此处就不再赘述了。</p>
<h6 id="UI难点之二：自行开发的底部菜单栏的路由结构"><a href="#UI难点之二：自行开发的底部菜单栏的路由结构" class="headerlink" title="UI难点之二：自行开发的底部菜单栏的路由结构"></a>UI难点之二：自行开发的底部菜单栏的路由结构</h6><p>为什么要如此强调路由结构呢？因为你需要知道你当前用底部菜单栏打开的页面是哪一个。否则底部菜单栏如何将当前打开页面对应的按钮进行高亮或者其他处理，来对用户形成一种辅助的标识呢？我们在这里使用了一个<strong>相当讨巧的办法</strong>来解决这个问题：</p>
<p>我们并不删除底部菜单栏在<code>app.json</code>中的代码使之彻底消失，只是通过微信小程序API函数<code>wx.hideTabBar</code>对其进行隐藏，这样其基本的路由结构依然存在，无需另外写一个公共的路由代码。页面跳转可以使用<code>wx.switchTab</code>。然后由于自定义的底部菜单栏是重复出现在页面上的，准确来说应该是首页和“我的”页面上，所以我们采用了微信小程序的模板类型元素<code>&lt;template&gt;</code>来进行代码的复用：<br>wxml代码的写法是：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"tabbar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabbar-wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabbar-index"</span> <span class="attr">bindtap</span>=<span class="string">"tabbarRoute"</span> <span class="attr">data-index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;indexActive?'/images/index-hl.png':'/images/index.png'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"color: &#123;&#123;indexActive?'#17abe3':'#bfbfbf'&#125;&#125;"</span>&gt;</span></span><br><span class="line">        首页</span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabbar-reserve"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"/images/new-hl.png"</span> <span class="attr">bindtap</span>=<span class="string">"tabbarRoute"</span> <span class="attr">data-index</span>=<span class="string">"1"</span> &gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"tabbar-user"</span> <span class="attr">bindtap</span>=<span class="string">"tabbarRoute"</span> <span class="attr">data-index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;userpageActive?'/images/user-hl.png':'/images/user.png'&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">style</span>=<span class="string">"color: &#123;&#123;userpageActive?'#17abe3':'#bfbfbf'&#125;&#125;"</span>&gt;</span></span><br><span class="line">        我的</span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在对应的页面中引用的方法也很简单<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"/template/tabbar"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"tabbar"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...tabStatus&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其中，三点运算符表示传进<code>tabStatus</code>的全部子成员（这个<code>tabStatus</code>有两个成员：<code>indexActive</code>和<code>userpageActive</code>），也就意味着上面代码块里的<code>&lt;template&gt;</code>中的所有<code>indexActive</code>和<code>userpageActive</code>不用再写成<code>tabStatus.indexActive</code>和<code>tabStatus.userpageActive</code>了，很方便吧，这可是ES6的特性哦！<br>wxss的代码也贴一下，这样也可以直接套用样式：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tabbar-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90</span>rpx;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">35</span>rpx;</span><br><span class="line">  <span class="attribute">border-top</span>: .<span class="number">5px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">256</span>,<span class="number">256</span>,<span class="number">256</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabbar-wrap</span> <span class="selector-tag">view</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabbar-wrap</span> <span class="selector-class">.tabbar-reserve</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">bottom</span>:<span class="number">30</span>rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabbar-wrap</span> <span class="selector-tag">view</span> <span class="selector-tag">image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabbar-wrap</span> <span class="selector-class">.tabbar-reserve</span> <span class="selector-tag">image</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">115</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115</span>rpx;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;  </span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tabbar-wrap</span> <span class="selector-tag">view</span> <span class="selector-tag">view</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">25</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1</span>rpx;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>以上操作的教程来源是<a href="https://blog.csdn.net/w10322331/article/details/80351713" target="_blank" rel="noopener">这里</a>。</p>
<h6 id="UI难点之三：重写返回导航、页面标题和刷新组件"><a href="#UI难点之三：重写返回导航、页面标题和刷新组件" class="headerlink" title="UI难点之三：重写返回导航、页面标题和刷新组件"></a>UI难点之三：重写返回导航、页面标题和刷新组件</h6><p>既然隐藏了顶部菜单栏，可以说也相当于在打开新页面时也失去了微信小程序自动生成的标题和返回按钮，然后下拉刷新也别扭了很多（尤其是在iPhone X上，你下拉刷新的时候根本看不到那个刷新动画。。。），这就意味着以上功能全部都得自主开发。</p>
<p>我的解决方案也异常简单，返回导航直接使用微信小程序的API函数<code>wx.navigateBack</code>，刷新也不过是在图标上绑定钩子函数，这里的主要难点在于<strong>刷新动画的协调性</strong>。<br>具体怎么说呢？wxss本质上就是CSS，刷新动画的一般实现都是一个圆形刷新图标的旋转，而这个旋转一般都是CSS的效果。但是若像本项目一样使用带箭头的圆环，则会出现一个很尴尬的情况：<br>当你正在“加载数据”这一状态时，圆环是不停旋转的，而当“数据加载结束”时，圆环需要处于一个静止的状态。若将静止状态设置为一个固定的图片，例如说刷新图标的箭头处于图标的正12点方向，则你会发现，”加载数据”这一状态结束时，箭头并不一定处于正12点，而在切换到“数据加载结束”这一状态时，箭头突然就跳到了正12点方向。</p>
<p>可以先看看“有通知”小程序的刷新动画实现方法，基本上就是点击刷新后固定地转一圈，这样既避免了上述尴尬的情况，也可以让用户体验到类似于“转了一圈就加载了”的“快速加载”的观感。</p>
<p>那么我们是如何实现的呢？可以说是一次很成功的尝试吧：让“数据加载结束”这一静止状态不再是一张固定的图片，而是在下一次加载时箭头直接从之前停下的方向继续开始转动！这样给用户的体验就不再是十分突兀的，反而有一种很自然自然的流畅感和美感。</p>
<p>实现方法也很简单，设定好不同状态下的CSS属性即可，只不过需要JS在与后端通信的加载过程中向wxml里刷新图标的<code>style=&quot;&quot;</code>传入不同的变量，以启用或关闭不同的动画。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.line</span> <span class="selector-class">.title-wrap</span> <span class="selector-class">.refresh-button</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">45</span>rpx <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">90</span>rpx;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10</span>rpx;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">15</span>rpx;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6d6d72</span>;</span><br><span class="line">  <span class="attribute">animation</span>: spin <span class="number">800ms</span> infinite linear;  </span><br><span class="line">  <span class="attribute">animation-play-state</span>: paused;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span> <span class="selector-class">.title-wrap</span> <span class="selector-class">.refresh-button</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">animation-play-state</span>: running;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> spin &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">60%</span> <span class="number">55%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">60%</span> <span class="number">55%</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">transform-origin</span>: <span class="number">60%</span> <span class="number">55%</span>;  </span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: <span class="number">60%</span> <span class="number">55%</span>;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这个<code>animation-play-state</code>相当关键，就是这一属性支持了我们的刷新开始和结束的自然切换。</p>
<p>哦对了，貌似还有页面标题没讲，这个其实就是自己添加标题写在相应的位置，如果需要动态标题则往wxml中添加变量。注意给返回、刷新之类的按钮留好位置即可。</p>
<h6 id="UI难点之四：tab标签式导航栏的实现"><a href="#UI难点之四：tab标签式导航栏的实现" class="headerlink" title="UI难点之四：tab标签式导航栏的实现"></a>UI难点之四：tab标签式导航栏的实现</h6><p>这个说实话网络上教程相当多，但是这里仍然有一些亮点，例如在高亮标签下的“下划线”。这并不是简单的用CSS的下划线属性实现的，而是使用了CSS的伪类概念。说实话，在后来其他项目的开发过程中，我才真正开始理解并有意识地使用起了伪类，给某一页面元素的正上方或正下方添加一些附属元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"navbar"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tabbar标签式导航栏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;navArrayStu&#125;&#125;"</span> <span class="attr">data-index</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123;currentNavTab==index?'active':''&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"unique"</span> <span class="attr">bindtap</span>=<span class="string">"bindNavbarTap"</span>&gt;</span></span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;currentNavTab==0&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当currentNavTab==0时显示这里的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;currentNavTab==1&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当currentNavTab==1时显示这里的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">bindNavbarTap(e) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">    currentNavTab: e.currentTarget.dataset.index</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">40</span>rpx;</span><br><span class="line">  <span class="attribute">font-weight</span>: lighter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-class">.item</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 伪类的使用 */</span></span><br><span class="line"><span class="selector-class">.navbar</span> <span class="selector-class">.item</span><span class="selector-class">.active</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">20</span>rpx;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5</span>rpx;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#6d6d72</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理"><a href="#BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理" class="headerlink" title="BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理"></a>BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理</h6><p>过期处理说实话确实是个败笔，因为这个东西本来应该是后端完成的东西，我却非常不厚道的在小程序里面加入了这个功能（不是在批评某些“大前端”思想，但是这个确实后端来做会更好一点，毕竟数据量一大还不如后端处理好了再发给前端，某些过期数据的体积也可以适当压缩一下，况且<strong>我到现在都还没做分页</strong>，感觉药丸。。。）。而且这个过期处理确实挺重要的，在这种预约类小程序里面，所以我也在寻找更好的解决方案，希望（如果有坚持读到这里的）大佬能够联系我提供一些建议，不胜感激！</p>
<p>我的想法是一拿到数据就交给某个工具函数去处理数据，处理完之后再返回数据。这里我直接把过期处理添加到了时间处理函数里面，具体工具函数如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> curDate= utils.formatTime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line"><span class="keyword">var</span> curDateFull = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timeFormat = <span class="function">(<span class="params">str, contentType</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentType == <span class="string">'class'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> start = str[i].class_timestart;</span><br><span class="line">      <span class="keyword">var</span> end = str[i].class_timend;</span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(str[i].class_date.slice(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">      <span class="keyword">var</span> itemDate = str[i].class_date;      </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType == <span class="string">'course'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> start = str[i].course_timestart;</span><br><span class="line">      <span class="keyword">var</span> end = str[i].course_timend;</span><br><span class="line">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(str[i].course_date.slice(<span class="number">0</span>, <span class="number">10</span>));</span><br><span class="line">      <span class="keyword">var</span> itemDate = str[i].course_date;      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> curTime = curDateFull.toLocaleString(<span class="string">'chinese'</span>, &#123; <span class="attr">hour12</span>: <span class="literal">false</span> &#125;).slice(<span class="number">10</span>, <span class="number">18</span>).replace(<span class="regexp">/:/g</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">var</span> itemTime = start.replace(<span class="regexp">/:/g</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 过期处理在这儿⬇️</span></span><br><span class="line">    <span class="comment">// 如果该记录的日期本身就小于当前的日期，一定过期</span></span><br><span class="line">    <span class="comment">// 如果该记录的日期与当前日期相同，但时间比当前时间要早，也一定过期</span></span><br><span class="line">    <span class="keyword">if</span>((itemDate &lt; curDate) || ((itemDate == curDate) &amp;&amp; (curTime &gt; itemTime)) )&#123;</span><br><span class="line">      str[i].overtime = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      str[i].overtime = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    date = date.getFullYear() + <span class="string">"年"</span> +</span><br><span class="line">      (<span class="built_in">parseInt</span>(date.getMonth()) + <span class="number">1</span>).toString() + <span class="string">"月"</span> +</span><br><span class="line">      date.getDate() + <span class="string">"日"</span>;</span><br><span class="line">    start = start.slice(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (start.slice(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">"0"</span>) &#123;</span><br><span class="line">      start = start.slice(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    end = end.slice(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end.slice(<span class="number">0</span>, <span class="number">1</span>) == <span class="string">"0"</span>) &#123;</span><br><span class="line">      end = end.slice(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (contentType == <span class="string">'class'</span>) &#123;</span><br><span class="line">      str[i].class_date = date;</span><br><span class="line">      str[i].class_timestart = start;</span><br><span class="line">      str[i].class_timend = end</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType == <span class="string">'course'</span>) &#123;</span><br><span class="line">      str[i].course_date = date;</span><br><span class="line">      str[i].course_timestart = start;</span><br><span class="line">      str[i].course_timend = end</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"时间处理后："</span>, str);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况"><a href="#BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况" class="headerlink" title="BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况"></a>BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况</h6><p>“辅导预约”这个功能事实上也就是用户“课程预约”功能的一个翻转：讲师自由发布课程，多个用户预约一个讲师的课程，人数上限可以有也可以不设置。反之，用户自由发布辅导需求，多个讲师预约一个用户的课程，但是是一对一的课程，所以人数上限其实是1。但我这里没有再使用人数上限的功能了，而是采用了一个很清奇的绑定思路：多表左联合查询。</p>
<p>这个说实话也是个败笔😂（没错，包括上面那个在内，你在本文看到的所有bug解决的思路，都是些让你觉得很滑稽的解决方式，因为我当时是真的没办法快速找到一些最佳实践的。。。）<br>正常情况下的思路应该是要去维护一个新的数据库字段，就是“是否已经有讲师预约”这样的一个标志字段。<br>但是我这里的处理思路就很清奇，既然已经被讲师预约了的话，那是不是可以让用户的预约数据库表和讲师的接单数据库表进行一个左联合查询，然后如果某个字段联合查询后查询不到讲师的信息（例如昵称nickname之类的）就可以认为是未被讲师接单呢？反之是不是就可以被认为是已经被接单呢？<br>这个清奇的思路事实上是很差劲的，因为这个涉及到一个查询效率的问题，联合查询总的来说肯定要比单表查询要慢很多，数据一多肯定影响性能，而且这样返回前台数据不可避免地泄露了讲师的信息。</p>
<p>当然，还是那句老话，安全起见，后端数据库表结构以及相应的SQL查询语句我是不可能公开的。所以这里就只有描述，没有代码了。</p>
<h6 id="BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当"><a href="#BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当" class="headerlink" title="BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当"></a>BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当</h6><p>这是个相当玄学的问题，什么叫“处理不当”呢？这涉及到用户体验与数据库管理之间的矛盾。用户当然希望这样的功能实现：在填写的时候，“人数上限”一栏留空，就代表人数上限为无上限，填入数字再表示有一个确定的上限，“备注”留空，就代表没有备注，填入备注就代表有一段备注。但是数据库管理的时候，一个字段的格式一般是固定的，我不可能为了存储“无上限”这一信息就让一个人数上限的字段同时支持整型数和字符或者别的什么，所以我只能无奈地让数字0代表无上限。同时，备注也可以存储为一个“NULL”来代表无备注。但是问题来了，当上传到后端时，前端至少需要对数据做一个预处理：把人数上限从<code>undefined</code>改成0，把备注从<code>undefined</code>改成NULL。我当时就考虑到这里，但是后来才发现：等等，那后端返回到前端呢？不是也得再经历一次相反的转换吗？</p>
<p>大概就是这样一个逻辑：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (classItem.student_limit == <span class="string">'0'</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        studentLimit: <span class="string">'无上限'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        studentLimit: classItem.student_limit</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (classItem.student_sum == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        studentSum: <span class="string">'0'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        studentSum: classItem.student_sum</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (classItem.class_intro == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    classItem.class_intro = <span class="string">"无"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题"><a href="#BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题" class="headerlink" title="BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题"></a>BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题</h6><p>这个确实是个意想不到的BUG，在正式上线之后才发现Safari浏览器的渲染引擎存在着这样的bug：当一个具有<code>transform</code>的CSS属性的元素作为背景，而另外一个图片元素在其上方时，将不能够通过<code>z-index</code>属性来控制它们的层级关系。</p>
<p>之后的解决方案是从网上搜索得出的<strong>“以毒攻毒”法</strong>。是的，你没有看错，这个方法就是用<code>transform</code>来解决<code>transform</code>带来的问题的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-img</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140</span>rpx;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">140</span>rpx;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">50</span>rpx auto <span class="number">30</span>rpx;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#bfbfbf</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100</span>rpx) <span class="comment">/* 这个就是解决办法，“以毒攻毒”，简单粗暴 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.colored-top</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">35</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#17abe3</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">8deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="其他小BUG"><a href="#其他小BUG" class="headerlink" title="其他小BUG"></a>其他小BUG</h6><p>这里将会根据项目当前进度，及时更新一些其他的小BUG以及处理方式，也就相当于一些后续了~</p>
<h5 id="小程序最终界面-1"><a href="#小程序最终界面-1" class="headerlink" title="小程序最终界面"></a>小程序最终界面</h5><p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP1.PNG" alt="WEAPP1"></p>
<p><center>小程序第三版主界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP10.jpeg" alt="WEAPP1"></p>
<p><center>用户课程预约界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP11.jpeg" alt="WEAPP1"></p>
<p><center>用户辅导预约界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP12.jpeg" alt="WEAPP1"></p>
<p><center>讲师辅导接单界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP13.jpeg" alt="WEAPP1"></p>
<p><center>讲师辅导接单界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP14.jpeg" alt="WEAPP1"></p>
<p><center>讲师发布课程界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP15.jpeg" alt="WEAPP1"></p>
<p><center>“我的”界面</center><br></p>
<p><img src="/2018/06/28/Notes-About-Recent-Projects-3/WEAPP16.jpeg" alt="WEAPP1"></p>
<p><center>“关于”界面</center><br></p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote>
<p>先。。。先容我吐槽一下吧。<br>讲了挺多的，确实，一看发现上千行了😂（至少在markdown里面是这样，1.3k），我打算以后有机会的话拆成两篇文章发布。<br>写的时间跨度一个月吧，因为各种事情，写写停停，甚至在某几次提笔重新开始继续写下去的时候，都发现自己都不知道之前到底写了什么，现在该写什么，写的初心是什么。都快被各种事情给搞忘了。<br>所以说，要想系统性的总结一个东西，很难。<br>况且我这个小程序至少前端代码是必须要放到GitHub上去的，要想再系统性地整理并分享一个东西，更难。</p>
</blockquote>
<p>首要的，我还是非常感谢明导和郑导、感谢搭档王云程同学（@fafnir）、感谢提供过帮助的高亦非同学（Jason Gao）以及感谢计通学院学生讲师团，给予了我这次项目实战的宝贵机会。如果没有这次实战机会的话，估计我也很难得出如此系统的经验，并写出内容如此（冗长而）丰富的文章了吧。这是一次从零开始、至少是从需求开始的一次系统性的开发，虽然过程不免因为个人水平仍处于成长期、个人其他事务的干扰等各种原因有着种种波折起伏，但是所有的过程都是在从宏观到微观、从代码开发到客户沟通再到界面设计，几乎是全方位地锻炼我的各种能力。</p>
<p>所以，再次感谢在开发过程中给予了我各种帮助和指导的所有人，谢谢大家！</p>
<blockquote>
<p>最后，这是本站的第七篇正式发文，感谢阅读。<br>如有意见和建议，欢迎通过首页的联系方式联系作者。<br>本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。</p>
</blockquote>
]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
</search>
