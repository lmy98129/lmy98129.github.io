<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Training Configuration for Yolo-darknet]]></title>
    <url>%2F2018%2F11%2F28%2FTraining-Configuration-for-Yolo-darknet%2F</url>
    <content type="text"><![CDATA[Everything’s coming up roses. 续上次的笔记分享yolo-darknet神经网络训练全过程的配置经验 前言由于本文中描述的yolo-darknet训练配置流程来源较多，而且训练配置时间为今年暑期，距离本文完稿时间较远，因此本文不可避免地会存在一定的失误和错漏。恳请发现问题的读者不吝赐教，通过首页的联系方式向作者提出宝贵意见。 数据集的标注、修改数据集的采集来源以及采集方式属于项目内容，此处暂时不便叙述。对于采集得到的数据集，尤其是针对yolo-darknet的图片数据集，应当至少满足如下的要求： 文件名称中不应当出现中文 多次采集得到的文件应当分开命名前缀，否则存在同名文件覆盖的问题 最好是同一种后缀格式，例如jpg格式。后缀大写JPG和小写jpg，darknet不会认为是同一种文件类型而报错。另外，png格式比较灵活，可以强行改成jpg后缀且内容仍可以读取 本项目中除了采集了原始数据之外，也通过python脚本对图片素材进行翻转、随机颜色等基本变换来对数据集规模进行扩充。此为额外操作，不影响yolo-darknet训练过程。 数据集的标注采用的是基于python的ImageLabel，标注界面是可视化的，流程基本上是： 设置你标注的物体对应的标签，例如dog，cat等，可以设置默认标签 打开素材文件夹到程序中，设置当前的标签，对图片进行逐个画框标注 标注后自动生成数个xml文件，xml文件的内容一般如下 1234567891011121314151617181920212223242526&lt;annotation&gt; &lt;folder&gt;图片文件夹&lt;/folder&gt; &lt;filename&gt;图片名称&lt;/filename&gt; &lt;path&gt;图片路径&lt;/path&gt; &lt;source&gt; &lt;database&gt;Unknown&lt;/database&gt; &lt;/source&gt; &lt;size&gt; &lt;width&gt;600&lt;/width&gt; &lt;height&gt;338&lt;/height&gt; &lt;depth&gt;3&lt;/depth&gt; &lt;/size&gt; &lt;segmented&gt;0&lt;/segmented&gt; &lt;object&gt; &lt;name&gt;标签名字&lt;/name&gt; &lt;pose&gt;Unspecified&lt;/pose&gt; &lt;truncated&gt;0&lt;/truncated&gt; &lt;difficult&gt;0&lt;/difficult&gt; &lt;bndbox&gt; &lt;xmin&gt;291&lt;/xmin&gt; &lt;ymin&gt;76&lt;/ymin&gt; &lt;xmax&gt;412&lt;/xmax&gt; &lt;ymax&gt;192&lt;/ymax&gt; &lt;/bndbox&gt; &lt;/object&gt;&lt;/annotation&gt; 基本上就是对于标注的方框的位置和大小的记录。标注生成的是整个VOC数据集文件夹，一般有两个文件夹：图片文件夹Image和标记文件夹xml。标记文件夹中每一个xml文件的文件名基本上都对应了的图片文件夹中的图片文件。 应当注意的是，一旦移动了xml文件夹或整个数据集文件夹，必须将所有xml文件中的图片文件夹、图片路径改成对应的新文件夹、新路径，否则必然报错。 但问题是，一旦数据集规模像本项目一样巨大时，人工逐个更改xml就十分困难。所以需要python脚本进行批量文件处理。此处摘录一部分代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445# coding=utf-8import osimport xml.etree.ElementTree as ETimport sysreload(sys)sys.setdefaultencoding('utf8') path = "/home/blean/VOC/validateImage/"oldpath = "/home/blean/VOC/pos/"newpath = "/home/blean/VOC/Image/"filelist = os.listdir(path)i = 0for files in filelist: if os.path.splitext(files)[1] != ".jpg" and os.path.splitext(files)[1] != ".txt": tmp = os.path.splitext(files)[0] os.rename(path+files, path+tmp+".jpg") # 强行将非jpg的后缀，例如JPG大写后缀或png后缀更改成jpg print path+files i = i + 1 else: continue tree = ET.parse(path+files) root = tree.getroot() filename = root.findall('filename')[0].text tmp = os.path.splitext(filename)[0] # 寻找xml文件中对应的文件名 print path+tmp+".xml" os.rename(path+files, path+tmp+".xml") # 同样地将xml文件名改成后缀修改后的图片文件名 root.findall('path')[0].text = tmp.replace(oldpath, newpath) # 修改路径 tmp = root.findall('filename')[0].text if tmp.find("捕获") != -1: print tmp root.findall('filename')[0].text = tmp.replace("捕获", "buhuo") tree.write(path+files) # 修改某些中文文件名 root.findall('folder')[0].text = tmp.replace("pos", "Image") # 修改图片文件夹名称print i# 打印总数 注：以上代码是本人为了修正数据集格式自行编写的，具有很强的临时性，是不同功能的python代码之间的整合，如果不需要某些功能，可以将对应代码手动注释掉 训练数据集和验证数据集的拆分数据集应当分成训练集和验证集，以便于对训练效果进行评估。这里作者直接参考了这篇CSDN上的文章《YOLO训练自己的数据集》中的python脚本，内容摘录如下： &gt; 下载链接：http://pan.baidu.com/s/1hs22I7U 密码：wdv0 运行traindata.py：生成trainImage文件夹，存放训练图片；生成trainImageXML文件夹，存放训练图片xml标签；生成validateImage文件夹，存放验证集图片；生成validateImageXML文件夹，存放验证集图片的xml标签。 运行trans.py，生成trainImageLabelTxt文件夹，存放训练图片通过xml标签转化得到的txt文件（若在训练过程提示txt文件找不到，则把此文件夹下的txt文件夹移动到trainImage文件夹）；生成validateImageLabelTxt文件夹，道理一样。 另外得到的trainImagePath.txt和validateImagePath.txt存放着训练图片和验证图片的路径。&gt; 下载好的python脚本一般不能立即用，根据运行python脚本出现的报错，应当对其进行相应的修改，例如： 12classes = ["cat"] #把这个标签改成你自己的数据集中标记的标签#那个sets看起来很奇怪，但是不用改也能用。python研究的少，暂时不知道具体原因 对darknet的配置和更改darknet本身并非完全开箱即用的图像识别训练框架，因此需要对它进行有针对性的配置和必要的更改。此处同样是根据《YOLO训练自己的数据集》以及其他几篇文章的指导和建议进行配置的，主要有以下几点： 对darknet的cfg/voc.data进行配置12345classes= 标签类别总数train = 填之前脚本生成的训练集文件列表trainImageId.txtvalid = 填之前脚本生成的验证集文件列表validateImagePath.txtnames = data/xxx.namesbackup = 存放训练结果模型的路径 在data文件夹下的names文件中，每行写一条标签名称 对要使用的神经网络版本yolo2-voc对应的配置文件yolo2-voc.cfg，应当更改以下几处： 将最后的[region]层神经网络的配置中的classes改为1（即标记类别的总数） 将最后一个[convolutional]卷积层中的filter改为30（filter的公式filters=(classes+ coords+ 1) (NUM) ，我的是(1+4+1) 5=30） 注：这里coords可以认为是坐标，设置的标记是一个方框则取4。NUM是神经网络的层数。filter公式的来源请参见国外开发者们的讨论：https://groups.google.com/forum/#!topic/darknet/B4rSpOo84yg 训练在yolo的官网下载预训练模型，地址：http://pjreddie.com/media/files/darknet53.conv.74 并执行训练命令： 1./darknet detector train cfg/voc.data cfg/yolov2-voc.cfg darknet53.conv.74 之后便开始了对神经网络的训练，在1000次训练之内，每100次就在backup文件夹中生成一次权重模型，在1000次训练以上，每10000次生成一次权重模型。本项目的最终训练次数达到了50000次。 上图为训练到500次左右时的结果截图 训练生成的模型文件 批量测试、评估以及需要对darknet进行的相应修改本人之前的笔记中曾经提到了使用单张图片测试，以及连接计算机摄像头、网络视频推流进行实时识别的命令，命令内容大致如下： 单张图片：1./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg 电脑摄像头：1./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights 手机摄像头（通过网络视频实时推流，使用工具为IP摄像头APP）： 1./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video 得到的效果大致如下： 实地场景： 网络图片： 但是，可以看出这样手动输入命令进行逐个测试的方法，在测试上文中提到的从标记数据集中拆分出来的有一定数量图片的验证集时十分地不友好。而且必须手工收集每次测试中得到的准确度信息、手工进行统计计算。 所以这里参考了CSDN上的另一篇文章《YOLOv3批量测试图片并保存在自定义文件夹下》以及简书上的一篇文章《Darknet 评估训练好的网络的性能》对darknet中的example文件夹下的detector.c文件中的代码进行更改，以便于进行批量测试、统计、评估模型在验证集上的准确度，并输出结果： 修改validate_detector_recall函数定义和调用为： 12void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)validate_detector_recall(datacfg, cfg, weights); 修改validate_detector_recall的初始化代码 修改前：12list *plist = get_paths("data/voc.2007.test");char **paths = (char **)list_to_array(plist); 修改后：1234list *options = read_data_cfg(datacfg);char *valid_images = option_find_str(options, "valid", "/home/blean/VOC/validateImagePath.txt");list *plist = get_paths(valid_images);char **paths = (char **)list_to_array(plist); 修改结束后需要重新编译darknet主程序，命令如下 1make -j8 在完成上述修改后即可使用darknet的recall命令进行评估测试并输出结果 1./darknet detector recall cfg/voc.data cfg/yolov2-voc.cfg backup/yolov2-voc_50000.weights -out drowning_recall.txt 输出的结果如下： 1234567891011121314151617 Number Correct Total Rps/Img IOU Recall 0 1 1 RPs/Img: 23.00 IOU: 71.42% Recall:100.00% 1 2 2 RPs/Img: 19.00 IOU: 66.04% Recall:100.00% 2 3 3 RPs/Img: 31.00 IOU: 65.52% Recall:100.00% 3 4 4 RPs/Img: 31.75 IOU: 65.22% Recall:100.00% 4 5 5 RPs/Img: 29.40 IOU: 65.55% Recall:100.00% 5 6 6 RPs/Img: 29.67 IOU: 67.34% Recall:100.00% 6 6 7 RPs/Img: 32.00 IOU: 60.25% Recall:85.71% 7 7 8 RPs/Img: 35.12 IOU: 59.75% Recall:87.50% 8 8 9 RPs/Img: 33.11 IOU: 60.55% Recall:88.89% 9 8 10 RPs/Img: 33.20 IOU: 59.48% Recall:80.00%10 9 11 RPs/Img: 34.00 IOU: 59.27% Recall:81.82%11 10 12 RPs/Img: 33.00 IOU: 59.65% Recall:83.33%12 11 13 RPs/Img: 32.00 IOU: 60.33% Recall:84.62%13 12 14 RPs/Img: 30.64 IOU: 60.85% Recall:85.71%14 12 14 RPs/Img: 29.60 IOU: 60.85% Recall:85.71%15 13 15 RPs/Img: 29.62 IOU: 61.41% Recall:86.67% 其中各项参数的解释如下： Number表示处理到第几张图片。 Correct表示正确的识别出了多少bbox（即标记目标物体的方框）。这个值算出来的步骤是这样的，丢进网络一张图片，网络会预测出很多bbox，每个bbox都有其置信概率，概率大于threshold的bbox与实际的bbox，也就是labels中txt的内容计算IOU，找出IOU最大的bbox，如果这个最大值大于预设的IOU的threshold，那么correct加1。 Total表示实际有多少个bbox。 Rps/img表示平均每个图片会预测出来多少个bbox。 IOU： 这个是预测出的bbox和实际标注的bbox的交集 除以 他们的并集。显然，这个数值越大，说明预测的结果越好。 Recall召回率， 意思是检测出物体的个数 除以 标注的所有物体个数。通过代码我们也能看出来就是Correct除以Total的值。 可以从最后一条代表处理了全部验证集的统计结果看出，经过验证集的检验，训练得出的模型识别目标物体的总正确率大致在86%左右，可以说训练效果较为理想。 参考资料 YOLO-darknet官网https://pjreddie.com/darknet/yolo/ YOLO训练自己的数据集：https://blog.csdn.net/qq_34484472/article/details/73135354 YOLOv3批量测试图片并保存在自定义文件夹下：https://blog.csdn.net/mieleizhi0522/article/details/79989754 Darknet 评估训练好的网络的性能：https://blog.csdn.net/mieleizhi0522/article/details/79989754 Environment-Configuration-for-Yolo-darknet | NeXT （就是之前的那篇笔记）https://lmy98129.github.io/2018/02/20/Environment-Configuration-for-Yolo-darknet 最后，这是本站的第八篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 3]]></title>
    <url>%2F2018%2F06%2F28%2FNotes-About-Recent-Projects-3%2F</url>
    <content type="text"><![CDATA[The most stupid workmight be the most important one to cherish. 此处收录一些近期的项目笔记，这次真的是最近正在干的事情了。 没上锁的原因？是因为我从校会网络部光荣退休了吧。。。讲点别的项目。 贝壳计通讲师团项目访问方式： 扫描上方的小程序码 微信小程序搜索“贝壳计通讲师团” Github 项目简介 小程序主界面，更多预览请直接打开小程序或阅读本文后续内容 这是北京科技大学计算机与通信工程学院学生讲师团的官方小程序，管理方是北京科技大学计算机与通信工程学院学生讲师团，开发和维护方是北京科技大学计算机与通信工程学院的计算机科学与技术专业大二学生本人以及我的搭档fafnir，本人作为小程序的主要开发者之一，完成了本小程序的数据库结构设计、前端小程序开发、Node.js后端开发工作，并进行了多次版本迭代。搭档fafnir完成的工作主要为开发基于Python的Django Xadmin搭建的小程序后台管理网站。 项目创建的具体时间应与本博客的创建时间相差不多，开发时间长达3个月，上线时间已达1个月，经历两次大改。目前最新版本为v0.4.1。小程序前端基于腾讯微信小程序开发工具的原生组件，后端基于Node.js框架Express，数据库使用MySQL，数据库访问使用Node.js的MySQL库。其中，前端的通信模块以及后端的数据库访问模块均采用Promise异步编程封装。 注：我们计划在将本程序进行适当重构后，将本程序的前后端代码适时发布至GitHub。当前程序内的敏感信息较多，公布后风险较大故暂不考虑。 后续：前端代码已发布至Github 项目技术细节本项目的最初需求来源是：在2017秋季学期计通学院学生讲师团旧有线上预约平台网站开发维护人员即将毕业离校，讲师团负责人员联系辅导员提出了寻找学生进行下一代线上辅导预约平台的开发和维护工作的需求，最终确定采用小程序的形式进行开发，并招募了开发人员。原定计划为寒假一个多月时间内完成开发任务，但由于人员技术水平有限，以及在开发过程中遇到的种种挫折，我们前后花费了将近3个月的时间，经历两次大改才将目前接近成品的版本v0.4.1付诸上线使用。 项目第一版 第一版小程序主界面，更多预览请阅读本文后续内容 项目的第一版完成了基本的需求分析、技术选型、数据库表设计、设备部署以及初步的技术实现等工作。其中需求分析与数据库表设计均由我来完成，并根据MySQL的通行命名规范，编写了本项目的第一份需求分析以及数据库表结构稿件。出于安全考虑，不在此处公布数据库各表的具体字段。由于我们与需求方之间初期的沟通较少，导致我们对于需求方的理解有一定的偏差，但根据我们之后的需求更改情况，可以看出大方向上是无误的。 需求分析我们在第一版设计时的具体需求（大部分为开发方在开发过程中，帮助需求方总结的需求）为： 小程序前端搭载学生端和讲师端两套代码，在用户登录过程中，使用微信提供的用户id查询数据库结果决定显示哪一界面，普通用户默认为学生用户。（虽然在历次提交审查中，微信方面的小程序测试人员并未对此提出任何疑问，但可以说确实是一种逃避审查的潜在手段，希望微信方面改进审查机制加以防范） 讲师发布课程内容，包括课程名称、日期、时间、地点、人数上限、备注等，其中人数上限、地点、备注为选填项。（早期版本中未考虑到人数上限问题，是后期加入的字段） 学生可以进入课程列表对讲师发布的课程进行预约或取消预约，其中达到人数上限、课程取消等情况下提示学生不得预约，课程列表发生的更改将在触发课程列表本身更改的同时，实时触发首页列表的刷新。（课程超时不得预约的功能较为复杂，也是后期加入的字段） 学生端以及讲师端首页均显示自己已预约的课程或已发布的课程情况，以及对课程进行相应的编辑操作：学生可以取消课程预约，讲师可以取消、删除、编辑课程，讲师的编辑操作也将触发其首页列表的刷新。 在课程列表以及首页中点击单个课程卡片可以查看课程详情。 “我的”页面中普通学生用户可以申请成为讲师，需提交真实姓名以及电话号码，通过后台管理网站的管理员核对后通过认证成为讲师。 后台管理网站应该能自由编辑、删除任何讲师发布的课程，应在开发后期对讲师每月授课情况统计，并进行展示（截至文章发布，授课情况统计功能暂未全部完成）。 数据库表根据以上的需求分析，大致能够分成以下的数据库表（具体字段不予公布） 用户预约总表 讲师课程列表 管理员认证讲师资格列表 管理员账户列表 程序功能从这些数据库表可以分析得出的功能表如下： 用户 查看当前可预约课程列表 提交预约 取消预约 查看自己当前的预约 提交讲师认证申请 讲师 查看当前已发布课程以及预约情况（预约人数） 提交课程 取消课程 修改课程 管理员 查看并编辑当前所有课程以及预约 操作讲师认证申请 查看当前所有讲师每月的授课情况 技术选型项目第一版的技术选型由fafnir完成，总体情况是采用了腾讯云提供的wafer小程序一站式解决方案，具体来说应该是wafer1，选择的理由是相比于wafer2中服务器无法取得完整访问权的形式，wafer1可以直接在服务器上部署后台管理网站。（虽然后来的经费结算显示，使用wafer2方案可能会更经济一些，而且截至文章发布，腾讯云已经不再主推wafer1，并撤换下了多个wafer小程序一站式解决方案的访问入口，当前能够全新购买的解决方案的只剩下基于开发者工具的wafer2方案，两者之间的不同以及基本架构可以看这里）当时的具体项目选型如下： 技术模块 采用技术 备注 小程序前端 wafer小程序一站式解决方案小程序demo 项目地址，与后端通信采用的是wafer自带的腾讯云SDK，采用的是基于socket的全双工信道通信，部分界面元素直接复用了demo中的界面 服务器后端 wafer小程序站式解决方案Node.js后端demo 项目地址，部署于wafer一站式解决方案的业务服务器上，基于Node.js框架Express，与前端通信采用的同样是wafer自带的腾讯云SDK，采用的是基于socket的全双工信道通信，前后端的会话通信可以直接通过API地址进行，但是信道通信必须经过一站式解决方案的信道服务器进行（请记住这一点，在之后的版本迭代中就发生了问题），与数据库通信采用的是Node.js的MySQL库的线程池模式（此时并未对其进行任何的封装） 数据库 MySQL 5.6 部署于wafer一站式解决方案的云数据库上，通过wafer一站式解决方案的信道服务器进行远程访问 后台管理网站 基于Python的Django Xadmin 部署于wafer一站式解决方案的业务服务器上，与后端访问操作同一数据库 开发难点及笔记JavaScript的异步单线程特性由于对Node.js乃至JavaScript的异步单线程的特性，尤其是回调函数的理解还较为浅薄（可能也是在之前并未直接接触过前后端通信以及数据库通信的原因造成的。是的我之前的工作真的就是改改开源PHP项目的代码，没怎么认真研读过代码以及文档），所以在设计后端服务器与数据库通信模块时，仍然将思路停留在C/C++之类的线性思路上，例如有如下代码：12345678910var res = 'nothing';connection.query("USE "+database);connection.query('SELECT * FROM '+databaseForm, function (error, results, fields) &#123; if (error) throw error; if (results) &#123; res = results; console.log(res); &#125;&#125;);console.log(res); 其执行结果按照我的想象应该是：123nothing(查询的结果)(查询的结果) 结果是：123nothing(查询的结果)nothing 相当于查询结果并未真正传给变量res，若我想在第二个console.log(res);的位置进行查询结果向前端的回传，则回传的结果将仍是nothing。具体原因？简单来说就是JavaScript作为一种在浏览器引擎中工作的语言，在大多数情况下只能单线程运行，此时只能先将一些阻塞整个线程运行的工作进行挂起处理（就例如前后端通信，若后端在某次查询时迟迟不回传，不应该将这个查询之外的其他工作全部停止，选择等待查询结果的到来，而是将其挂起，当后端查询结果回传时，再回过头来进行查询结果的处理等与查询结果相关的工作），这个挂起处理就是通过回调函数callback实现的，也就是上面第二个connection.query中的function函数。因此，正确的实现应该是:1234567connection.query("USE "+database);connection.query('SELECT * FROM '+databaseForm, function (error, results, fields) &#123; if (error) throw error; if (results) &#123; TunnelService.emit(tunnelId, messageId, results); //直接在回调函数中进行回传 &#125;&#125;); Node.js中MySQL库的单语句查询、参数化查询等防注入机制后端服务器与MySQL通信使用的库为Node.js通用的MySQL库，安装命令为npm install mysql。根据我们后期的开发经验，事实上不应该使用该库而应该使用更加专业的ORM框架（ORM的定义）来方便我们对数据库操作命令进行js化的直接编写，而非只用SQL语句进行直接查询，虽然学习SQL语句也不是一件坏事。是的，本项目基本上用到的也就是增删改查、左联右联内联、COUNT计数、建表建库等基本SQL语句。 但是，问题在于该MySQL库本身的最佳实践中提到了其参数化查询、单语句查询的等防注入攻击的机制。其中参数化查询并非开发难点，此处可以略过，但是其默认单语句查询的功能实在是增加了开发难度。也就是必须在单条SQL语句当中完成所有查询，不允许进行多次查询后通过中间变量进行合并得到最终结果。这一设定的出发点是好的，万一API接口被传入一些带“;”的参数，且允许多语句查询，我们并不知道这些参数是否会导致SQL注入攻击的发生。 诚然，大多数查询通过本人的努力都实现了单语句查询的效果，虽然SQL语句看起来又臭又长，外人难以读懂（这也是我反思之后决定日后学习ORM的主要原因之一）。但是若出现某些根据上一次查询结果进行分支操作的情况，单语句查询就显得十分吃力了。例如，我们遇到了这一种情况： 如果因SSL证书问题无法查看上方的流程图，可以使用其他非Chrome内核的浏览器或使用桌面端浏览器阅读本文 所以在项目的第一版中，我们采用了Node.js的async库中的waterfall进行同步顺序编程，之后的版本我发现了Promise是个好东西（虽然理解起来有难度）然后就把通信模块统统重写了个遍在MySQL通信模块中解决这一问题的一个库函数实例如下：也可以看出采用了参数化查询的防注入机制，以及MySQL的线程池。12345678910111213141516171819202122232425262728293031323334353637383940414243static mysqlReserveClassStu(tunnelId, messageId, openId, classId, nickName) &#123; var tasks = [function(callback) &#123; pool.getConnection(function(error,connection) &#123; connection.query("SELECT * FROM user_reserve WHERE class_id=? AND user_id=?", [classId, openId], function (error, results_1, fields) &#123; if (error) throw error; if (results_1) &#123; connection.release(); callback(error, results_1); &#125; &#125;); &#125;); &#125;, function(results_1, callback) &#123; if(results_1[0] == null)&#123; pool.getConnection(function(error,connection) &#123; connection.query("INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())", [openId,nickName,classId], function(error, results_2, fields) &#123; if(error) throw error; if(results_2) &#123; connection.release(); TunnelService.emit(tunnelId, messageId, results_2); callback(error); &#125; &#125;); &#125;); &#125; else &#123; pool.getConnection(function(error,connection) &#123; connection.query("UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?", [classId,openId], function(error,results_3, fields)&#123; if(error) throw error; if(results_3) &#123; connection.release(); TunnelService.emit(tunnelId, messageId, results_3); callback(error); &#125; &#125;) &#125;) &#125; &#125;]; async.waterfall(tasks, function(error, results) &#123; if(error) throw error; &#125;);&#125; 这个代码块确定没把数据库表的字段抖出来了吗。。。emmmm，还好吧。各位高抬贵手，高抬贵手。。。 前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题这里由于我自己也记不大清楚当初的处理思路（尤其是小程序前端在处理过程中使用的“幻数”），很可能都是我无意识情况下的“瞎调试”的成果。这个说实话我是极其不提倡这么干的，虽然有的时候的确有用此处提供各模块的关键代码供大家参阅：服务器后端MySQL通信模块上的初始化操作，关键就是设置时区到正确的时间123456789101112131415process.env.TZ = 'Asia/Shanghai';var pool;class MysqlExecute&#123;static mysqlInit() &#123; pool = mysql.createPool(&#123; connectionLimit: 10, host : mysqlHost, user : mysqlUser, password : mysqlPassword, database : mysqlDatabase, timezone : process.env.TZ &#125;) &#125; 小程序前端的时间处理相关代码format，关键就是正则表达式+暴力剪切+暴力连接（其中用了微信开发者工具的默认小程序demo里面的util.js时间处理函数）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667const utils = require('./util');var currentDate = utils.formatTime(new Date());var currentDateAnnual = new Date();var classContentStr;const timeFormat = (str) =&gt; &#123; for (var i = 0; i &lt; str.length; i++) &#123; var start = str[i].class_timestart; var end = str[i].class_timend; var date = new Date(str[i].class_date.slice(0, 10)); date = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; start = start.slice(0, 5) if (start.slice(0, 1) == "0") &#123; start = start.slice(1, 5) &#125; end = end.slice(0, 5) if (end.slice(0, 1) == "0") &#123; end = end.slice(1, 5) &#125; str[i].class_date = date; str[i].class_timestart = start; str[i].class_timend = end &#125; return str;&#125;const dateFormat = (options, that) =&gt; &#123; that.setData(&#123; dateIndex: currentDate, ateLimitStart: currentDate, &#125;); currentDateAnnual.setFullYear(currentDateAnnual.getFullYear() + 1); currentDateAnnual.setDate(currentDateAnnual.getDate() - 1); that.setData(&#123; dateLimitEnd: currentDateAnnual &#125;); if (options.class_content != null) &#123; classContentStr = JSON.parse(options.class_content); if (classContentStr.student_limit == '0') &#123; that.setData(&#123; studentLimit: '' &#125;) &#125; else &#123; that.setData(&#123; studentLimit: classContentStr.student_limit &#125;) &#125; classContentStr.class_date = classContentStr.class_date.replace("年", "-"); classContentStr.class_date = classContentStr.class_date.replace("月", "-"); classContentStr.class_date = classContentStr.class_date.replace("日", ""); that.setData(&#123; className: classContentStr.class_name, classIntro: classContentStr.class_intro, dateIndex: classContentStr.class_date, classPlace: classContentStr.class_place, timeEndIndex: classContentStr.class_timend, timeStartIndex: classContentStr.class_timestart, &#125;) &#125; return classContentStr;&#125;module.exports = &#123; timeFormat: timeFormat, dateFormat: dateFormat&#125; 看着相当的难受啊，这x一样的代码风格😂没毛病，（下一版）会改的会改的🙏（没错，之后的版本我直接把那个又臭又长的classContentStr给改了。。。） 12345var date = new Date(str[i].class_date.slice(0, 10)); //这里得到的结果格式应该类似于yyyy-mm-dddate = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; 想看幻数的同学看上面，我把它截取下来了。是这样的：月份数诡异地被我加了一个1，然后居然就对了。。。我也不知道这个到底是怎么一回事，在JavaScript里有什么奇异的原理导致了这个结果，有人知道的话可以告诉我吗? 后续：我查到了，因为getMonth()是以数组形式来存储月份的，下标是0~11 人数上限的数据格式转换，以及人数已满等状态下阻止用户预约 你还别说，我一边写这个笔记，一边还在最新版本的小程序里发现各种蜜汁有趣的bug呢😂 人数上限作为讲师发布课程时的一个选填项，可以说是本项目数据处理的一个难点，其处理方式在本项目中也起到了一种模范的形式难点在于：人数上限分为两种情况：“无上限”和存在数字上限，我们只能利用0这个数字来表示“无上限”，因为基本上不可能开设一个人也没有的课程，至少的人数上限也应该是1。但是反过来说，用户在填写表单时不可能特别将无上限填写为0，这在用户体验上只有留空才更加符合一般的表单填写习惯。 所以我们在用户点击上传按钮触发的函数中就将人数上限进行处理转换：1234567var studentLimitFormat;if(this.data.studentLimit == '')&#123; studentLimitFormat = '0';&#125; else &#123; studentLimitFormat = this.data.studentLimit;&#125;//之后传到后端的就是studentLimitFormat 并在从后端回传的过程中也一样进行相应的处理，这里以课程内容页代码为例：123456789if(classContentStr.student_limit == '0')&#123; this.setData(&#123; studentLimit: '无上限' &#125;)&#125; else &#123; this.setData(&#123; studentLimit: classContentStr.student_limit &#125;)&#125; 同时，也应当在人数已满时阻止用户预约。在微信小程序中，我们使用&lt;block wx:if&gt;的wxml标签形式进行分类，通过条件判断来决定显示何种按钮，并只在“预约”和“取消预约”按钮上添加相应的函数钩子，这里以课程列表的上传按钮为例：1234567891011121314151617181920&lt;block wx:if="&#123;&#123;item.student_sum &gt;= item.student_limit &amp;&amp; item.student_limit &gt; 0&#125;&#125;"&gt; &lt;view class="reserve-button" data-content='&#123;&#123;item&#125;&#125;'&gt; 人数已满 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.status == 0&#125;&#125;"&gt; &lt;view class="reserve-button" data-content='&#123;&#123;item&#125;&#125;'&gt; 已取消 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.reserve_status == null || item.reserve_status != 1&#125;&#125;"&gt; &lt;view class="reserve-button" bindtap="bindReserve" data-content='&#123;&#123;item&#125;&#125;'&gt; 预约 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.reserve_status == 1&#125;&#125;"&gt; &lt;view class="reserve-button" bindtap="bindCancelReserve" data-content='&#123;&#123;item&#125;&#125;'&gt; 取消预约 &lt;/view&gt;&lt;/block&gt; 当然，我们也在后端数据库表的设计中，将讲师课程表的人数上限字段的默认值设置为0。这算是最后一道防线吧，防止其他非法输入对数据的影响。 提交表单前的各种格式检查是的，以人数上限的数据上传前进行处理为范本，我们普遍采用了if() { return; }的形式对非法输入进行检查，而这些非法输入的多样性之丰富，远远超出了我们的想象。例如：有时间的非法输入，直接用正则表达式替换掉时间中的冒号+暴力的数字比较（new Date说实话多此一举了）：12345678910if(new Date(this.data.timeStartIndex.replace(/:/g, "")) &gt; new Date(this.data.timeEndIndex.replace(/:/g, "")))&#123; wx.showModal(&#123; title: '提示', content: '开始时间应小于结束时间', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 有人数上限输入非数字时，调用isNaN()函数的同时防止将留空代表“无上限”也拦截：12345678910if (isNaN(this.data.studentLimit) &amp;&amp; !(this.data.studentLimit == undefined)) &#123; wx.showModal(&#123; title: '提示', content: '人数上限应输入数字', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 甚至对是否产生了无效的预约时间也进行了合法性检查：12345678910if ((currentDate &gt; selectedDate) || ((currentDate == selectedDate) &amp;&amp; (currentTime &gt; selectedTime)) &#123; wx.showModal(&#123; title: '提示', content: '预约时间应大于当前时间', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 我们在合法性检查上花费了大量的时间，但也只能够对非法情况进行枚举性质的检测，若有一些我们不了解的业界最佳实践，欢迎联系我们探讨这一问题。 程序测试程序测试确实是开发过程当中的重要一环，由于团队资源有限，且微信账号确实具有不可模拟性，所以我们在不足以拿到足够的微信测试账号以及测试机时，借助微信开发者工具和自己的手机号，建立了一个仅有两个核心测试账号、一台安卓测试机的测试体系（后期在发现iOS独有bug时，我们也找了临时的iPhone测试机和测试微信账号）。 两个测试账号一个默认为普通学生用户，另一个通过后台管理网站通过讲师认证注册为讲师（在后台管理网站还未部署时，其实是通过手工向数据库表加入记录实现的），两号均在微信公众平台上注册为开发者 一般情况下，在PC端微信开发者工具上登录其中一个用户，手机端也登录这一用户，以测试学生端或讲师端在开发者工具的模拟器和实机上效果是否一致，也可以通过远程调试定位实机上的bug 若想测试讲师端与学生端的数据互动效果，可以在开发者工具登录一个用户，另一个用户在手机上通过微信最新版本的“切换用户”功能登录小程序 若想测试多个教师或多个学生产生数据的效果，可以通过后台管理网站同时认证讲师或取消讲师认证来实现身份上的同一性。 若想在临时的iPhone测试机上进行远程调试，记得先将该机的测试微信号加入开发者列表，如此方能远程调试成功，测试结束后记得再删除即可。 小程序最终界面UI设计上大量采用了腾讯云一站式小程序解决方案小程序demo的配色和界面元素。（其实就是没精力去设计UI啦。。。）基本设计思想更偏向WP式的平面风格 第一版小程序主界面（此时小程序名称还没改） 第一版小程序主界面（无预约时显示的欢迎+提示语） 第一版小程序课程列表 第一版小程序讲师端主界面 第一版小程序讲师端编辑课程界面 第一版小程序“我的”页面 项目第二版项目第二版的迭代原因是十分偶然的。由于微信官方对于小程序用户登录API的调整影响了wafer1一站式解决方案中的腾讯云小程序SDK以及Node.js服务器端SDK通过信道服务器对用户身份进行认证的正常操作进行，导致了SDK提供的信道全双工通信对于新注册用户不再可用，最终使小程序的大多数功能处于不可用状态。（据悉，wafer2的SDK信道登录方式暂未受到影响，估计是腾讯方面在wafer1逐渐下架的情况下忽视了使用wafer1的老用户，测试不全面而导致这一情况发生） 为了解决这一重大bug，我们团队仔细研读了微信官方的登录API调整公告以及腾讯云SDK文档，最终采用了“添加首次登录用户认证界面+全面弃用信道通信方式并采用原生通信方式全面重写”的改进方案。值得一提的是，在重写过程中我们着重采用了JavaScript中的异步Promise编程，对小程序前端通信模块、后端服务器MySQL通信模块进行封装重写。在开发过程中，本人收获了更多的JS异步编程经验，并对Promise为代表的异步编程解决方案有了更加深刻的理解 由于第二版着重于bug的修复和代码的重写，并未对UI界面设计做出太多调整，所以此处不再展示小程序主界面截图。若想知道第一版与最新版UI变化为何如此之大，请继续往下阅读，感谢您的理解！ 开发难点及笔记微信登录API调整后小程序前端后端相应的修复解决方案根据微信官方的说法，若想像之前那样获得完备的用户基本信息: 必须使用&lt;button&gt;组件，并将open-type指定为getUserInfo类型，用户允许授权后，可获取用户基本信息。 而另一种使用&lt;open-data&gt;组件展示用户信息的方式，就真的只有展示功能了。。。可能也是我太菜，根本没办法在JS获取到组件内部加载出来的用户信息。 所以就相当于只能让用户点击一次按钮来完成整个用户信息获取的工作。根据我们当初设计的数据库表结构，用户信息，尤其是其唯一标识码openId，在本项目中起到了相当关键的作用，若不能获取这些信息，则根本无法正常使用小程序的各项基本功能，所以我们在小程序的首页设计了一个遮罩层，若未进行用户信息授权的话，用户看见的只有遮罩层上的提示和用户授权登录的按钮。 我们具体的实现结果如下所示:wxml代码：12345678910111213141516&lt;block wx:if="&#123;&#123;!hasUserInfo&#125;&#125;" &gt; &lt;view class="auth-page"&gt; &lt;view class="auth-page-note"&gt; &lt;image src="../../images/reserve-hl.png"&gt;&lt;/image&gt; &lt;text&gt;请允许微信授权登录后\n继续使用小程序&lt;/text&gt; &lt;/view&gt; &lt;view class="auth-page-button"&gt; &lt;button wx:if="&#123;&#123;canIUse&#125;&#125;" open-type="getUserInfo" bindgetuserinfo="bindGetUserInfo"&gt; 授权登录 &lt;/button&gt; &lt;view class="auth-page-uncomp-note" wx:else&gt; 不支持授权登录，请升级微信版本 &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/block&gt; JS代码（index页面内的钩子函数）：12345678910111213141516171819202122232425bindGetUserInfo: function (e) &#123; if(e.detail.userInfo)&#123; var userInfo = e.detail.userInfo; console.log('用户授权：', userInfo); wx.setStorageSync('nickName',userInfo.nickName); wx.setStorageSync('avatarUrl', userInfo.avatarUrl); auth.showAuthPage(this); wx.showToast(&#123; title: "正在登录", icon: "loading", duration: 1500, mask: true &#125;) //说实话有点蠢这里，设置了一个硬性的1.5s时间，主要是因为貌似有点bug， //我如果设置wx.showToast一直显示，然后在用户信息拿到后再调用wx.hideToast， //经常性失灵，很绝望。可能真的是只能在当前页面中的js调用。但是很奇怪的是，wx.stopPullDownRefresh就不用这么干。。。 &#125; else &#123; console.log('用户授权：拒绝'); &#125;&#125;, JS代码（上面调用的auth所在的auth.js）：1234567891011121314151617181920212223242526const showAuthPage = that =&gt; &#123; if(wx.getSetting) &#123; wx.getSetting(&#123; success: res =&gt; &#123; var auth = res.authSetting, nickName = wx.getStorageSync('nickName'), hasUserInfo; console.log("授权情况：", auth); if (auth['scope.userInfo'] &amp;&amp; nickName) hasUserInfo = true; else hasUserInfo = false; console.log("授权标记：", hasUserInfo); that.setData(&#123; hasUserInfo: hasUserInfo &#125;) &#125; &#125;) &#125;&#125;module.exports = &#123; showAuthPage: showAuthPage&#125; 感觉上小程序的底层应该也是像Vue、Angular、React那样写了一个有DOM更新之类功能的前端引擎，基本上hasUserInfo更新了之后，那个遮罩层直接就消失了，DOM更新的速度相当快。也有人吐槽小程序的JS风格就像Vue+React。。。 第二版小程序用户登录授权页面（请忽略那个远程调试用的黑框😂） 前端通信模块以及后端MySQL通信模块的重写和Promise封装有人说，你们不是又重新实现了用户信息获取了吗？为什么还是不能用原来的信道通信方式？而且再不济重新写一个socket类型的通信方式岂不美哉（可以实现全局广播，这样可以及时通知用户是否有数据发生了更改）？ emmmm，技术菜，只是主要原因之一。（我承认我确实还不会写socket。。。） 关键是那个腾讯云SDK它就是用原来的登录方式（划重点）获取用户信息的啊，现在微信方面彻头彻尾地改了，你不去重写它，还有其他办法吗？ 第一步，先别急着把采用信道通信的代码全删了，至少通信时数据的格式你得看看吧。 然后，我确实菜，所以只能在前端通信模块乖乖地上原生wx.request请求了。。。真的，我就觉得这就是AJAX啊。首先还是先写一个简单的post函数，把wx.request定制化封装一下。 123456789101112131415161718const post = (obj) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; url: config.service.testUrl, data: obj, success: res =&gt; &#123; if(res.data.results) &#123; resolve(res.data.results); &#125; else &#123; reject(res.data.error); &#125; &#125;, error: error =&gt; &#123; reject('网络出错'); &#125; &#125;); &#125;);&#125; 为什么要用promise对wx.request进行封装呢？理由很简单，依然是我们之前提到的JavaScript的单线程特性，需要使用回调函数callback()对一些可能阻塞整个JS代码执行的操作进行封装，让它们先挂起，让代码先继续执行下去，等需要进行这些操作的时候再回过头来执行——这就是异步非阻塞的编程模式。而大部分可以调用的函数都提供了回调的使用方法，以及你自己定义的函数也可以提供回调。 回调作为一种异步编程的解决方法，看起来很美好。但如果在这样的一种场景下你估计就笑不出来了： 例如，你向后端的一个API请求一个数据。好，数据拿到了，现在你要根据这个数据再去请求后端的另一个API的数据……如此下去，你请求了3个API，OK，你终于拿到了想要的最终数据，然后你还要将这个数据处理一下才能展示到界面里面 这样的话，你写的代码大概像这样： 1234567891011121314151617wx.request(&#123; //... success: res =&gt; &#123; wx.request(&#123; //... success: res =&gt; &#123; //... wx.request(&#123; //... success: res =&gt; &#123; //format your final data. &#125; &#125;) &#125; &#125;) &#125;&#125;) 如果再多几次回调函数的嵌套，估计你自己看这代码也差不多要阵亡了。没错，这就是所谓的回调地狱。后端与MySQL之类的数据库通信也同理，你输入了一条SQL语句的结果是下一条SQL语句的内容…… 那么除了疯狂地筑起一个回调金字塔之外，还有什么别的办法能够解决异步非阻塞编程问题呢？Promise就是其中之一。当然我之前用的async也是一种，但是那个写起来说实话更加别扭，至少Promise允许你用封装函数的方式进行编程，显然比写一些蜜汁有趣的函数数组正常多了。 好了，我之前提到了我用Promise封装了一个post函数，现在我就展示一个使用Promise解决异步问题的实例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102const initUserInfo = (that) =&gt; &#123; wx.login(&#123; success: res =&gt; &#123; if(res.code) &#123; console.log('获取用户登录凭证：', res.code); post(&#123; 'msgType': 'wxAuth', "code": res.code &#125;).then(res =&gt; &#123; console.log("收到消息：", res); getApp().data.openId = res; return post(&#123; 'msgType': 'checkIsTeachAuth', 'openId': getApp().data.openId &#125;) &#125;).then(res =&gt; &#123; console.log("收到消息：", res); if (res.isTeachAuth == true) &#123; getApp().data.isTeachmodeGlobal = 2; getApp().data.teacherRealName = res.realName; getApp().data.teacherAuthId = res.teacherId; getApp().data.teachAuthStatus = res.status; that.setData(&#123; isTeachMode: 2 &#125;) return post(&#123; 'msgType': 'getClassDataTeach', 'openId': getApp().data.openId &#125;) &#125; else &#123; getApp().data.isTeachmodeGlobal = 1; getApp().data.teachAuthStatus = res.status; that.setData(&#123; isTeachMode: 1 &#125;) return post(&#123; 'msgType': 'getReservedClass', 'openId': getApp().data.openId &#125;) &#125; &#125;).then(res =&gt; &#123; console.log("收到消息：", res); if (getApp().data.isTeachmodeGlobal == 1)&#123; that.setData(&#123; reserveArray: format.timeFormat(res).reverse(), emptyNote: '', emptyIntro: '', emptyUserName: true &#125;) if (res[0] == null) &#123; that.setData(&#123; emptyNote: welcomeQuote, emptyIntro: userWelcomeIntro, emptyUserName: false &#125;) &#125; wx.stopPullDownRefresh(); &#125; else &#123; that.setData(&#123; classArray: format.timeFormat(res).reverse(), emptyNote: '', emptyIntro: '', emptyUserName: true &#125;) if (res[0] == null) &#123; that.setData(&#123; emptyNote: getApp().data.teacherRealName + " 欢迎！", emptyIntro: teacherWelcomeIntro, emptyUserName: false &#125;) &#125; wx.stopPullDownRefresh(); &#125; &#125;).catch(error =&gt; &#123; console.log('发生错误：', error); &#125;) &#125; else &#123; console.log('获取用户登录态失败：', res.errMsg); &#125; &#125; &#125;)&#125; 是不是超长无比。。。再联想一下刚才我演示的回调地狱，用回调不知道要套多少层了。。。而且一个post函数可以反复使用，因为其传入的参数只有一个obj，就是发送到后端的json数据包，除此之外其他的操作都可以快速的复用，并且从后端返回的数据结果也可以由Promise传到下一个.then函数中。 除了post之外，我也仿造了信道通信方式，搞了一个emit函数。信道通信方式其实更加地先进，它是将所有的信道监听函数在初始化页面的时候就规定好了，也就是说把所有接收到后端数据之后的success操作都先写好了，之后再到需要向后端服务器发送数据的地方调用emit函数，这样也更加地灵活，发送数据时只管输入数据的格式和内容就OK了。 但是，本项目基本上除了用户在初始化数据或表单时需要将后端返回的数据进行存储和展示操作外，其他的通信操作基本上属于更新数据的范畴，也就是后端返回数据更新成功的结果后，只需调用一下数据刷新函数让服务器将更新好的数据回传即可。既然emit函数的功能如此确定，我也就直接将它封装好了，当然也得用用Promise了，既然都写好了，再多写个回调版本的函数就浪费了： 12345678910111213141516171819202122const emit = (obj,that) =&gt; &#123; post(obj).then(res =&gt; &#123; console.log('收到消息：', res); if (getApp().data.isTeachModeGlobal == 2) getApp().data.isTeachDataUpdated = true; else getApp().data.isStuDataUpdated = true; if (obj.msgType == 'reserveClass' || obj.msgType == 'editClass' || obj.msgType == 'classDataUpload') &#123; wx.showToast(&#123; icon: 'success', title: '数据上传成功', duration: 3000 &#125;) &#125; wx.startPullDownRefresh(&#123; success: that.onPullDownRefresh &#125;) &#125;).catch(error =&gt; &#123; console.log('发生错误：', error); &#125;)&#125; emit函数实际用起来也就是这样的，多传了一个this指针而已：123456req.emit(&#123; 'msgType': 'reserveClass', 'openId': getApp().data.openId, 'nickName': wx.getStorageSync('nickName'), 'classId': e.currentTarget.dataset.content.id&#125;,this); 既然后端MySQL通信模块也要Promise封装，那么肯定也是要先定义一个用Promise封装的函数12345678910111213static queryProm(sql, params) &#123; return new Promise((resolve, reject) =&gt; &#123; pool.getConnection((error,connection) =&gt; &#123; if(error) &#123; reject(error); throw error; &#125; connection.query(sql, params, (error, results, fields) =&gt; &#123; if(results) &#123; resolve(results); connection.release(); &#125; &#125;) &#125;) &#125;)&#125; 当然，我后来也发现其实大部分的操作其实都只需要一步回调就能解决问题了，所以我也写了一个回调版本的1234567891011static query(sql, params, callback) &#123; pool.getConnection((error,connection) =&gt; &#123; connection.query(sql, params, (error, results, fields) =&gt; &#123; if (error) throw error; if (results) &#123; callback(error, results); connection.release(); &#125; &#125;) &#125;) &#125; 然后这里也有一个比较模棱两可的经验，就是前端传到后端的json数据包内定义了msgType，可以在传入后端的地址是同一个时，根据msgType消息的类型进行不同的操作。具体操作在后端是怎样分类的，我这里用了比较原始的switch-case语句，但是说实话，这样会造成代码整体的可读性下降。因为消息类型一多，全挤在一层switch里面了，修改和查找都相当困难，这也是我需要改进的地方——代码的合理化、层次化和结构化。 最后用Promise的效果就是这样的（这个就是之前在项目第一版中用async写过的那个操作）：12345678910111213141516171819202122case 'reserveClass': sql.queryProm("SELECT * FROM user_reserve WHERE class_id=? AND user_id=?", [req.query.classId, req.query.openId] ).then(response =&gt; &#123; if(response[0] == null) return sql.queryProm( "INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())", [req.query.openId, req.query.nickName, req.query.classId] ); else return sql.queryProm( "UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?", [req.query.classId, req.query.openId] ); &#125;).then(response =&gt; &#123; res.send(&#123;results: response&#125;); &#125;).catch(err =&gt; &#123; res.send(&#123;error: err&#125;); &#125;); //不要啥都写res，想啥呢 break; 这个“想啥呢”的注释是这样的，Express框架本身有一个回传数据功能的对象参数叫res，然后我写函数也习惯把数据本身叫res，这下好了，相当于我用回传的数据去调用他的成员函数send()，这一个数据哪儿来的send()函数啊？当然前端就没有收到任何回传的数据了。我纳闷了很久怎么Promise好好的就不能用了呢，最后登了服务器上去翻了翻log才发现问题，这也充分说明log在debug中的极端重要性。 当然用回调的效果是这样的： 12345678case 'cancelReserve': sql.query("UPDATE user_reserve SET status=0 WHERE class_id=? AND user_id=?",[req.query.classId, req.query.openId], (error, results) =&gt; &#123; if(error) res.send(&#123;error: error&#125;); else res.send(&#123;results: results&#125;); &#125;); break; 那么既然也在服务器后端弃用了信道通信所在的腾讯云SDK，我也采用了Express原生的路由方式来将请求定位到以上MySQL通信模块所在的文件上。 最终效果 别看我，我就是凑个小节数的，要不然就一个笔记太尴尬了。。。 本次版本迭代，通过添加用户授权登录界面、从底层用原生请求方式重写前端通信模块和后端MySQL通信模块，并使用Promise进行异步编程封装，基本上修复了信道通信因登录API调整而无法使用，导致整个程序无法正常运行的bug。 项目第三版 小程序第三版主界面，更多预览请直接打开小程序或阅读本文后续内容 项目第三版的迭代原因是需求方提议加入普通学生用户端也能够发起一对一辅导预约，然后讲师能够对此进行接单的“辅导预约”功能。我们开发方也趁着本次迭代的机会，对小程序的前端界面UI进行了大范围的重写，从而能够彻底弃用原先大范围采用腾讯云一站式小程序解决方案小程序demo的配色和界面元素的旧UI。 在此特别感谢Jason Gao同学以及他的“有通知”小程序对本项目UI重写提供的设计参考和技术支持！ 在新UI的开发过程中的技术难点在于： 取消了微信小程序的顶部、底部菜单栏后，小程序界面对于不同尺寸以及刘海屏手机的适配； 取消了底部菜单栏后，自行开发的底部菜单栏的路由结构问题； 取消了顶部菜单栏后，下拉刷新、返回导航、页面标题等顶部菜单栏功能不再实用的情况下的自主开发。 tab标签式导航栏的实现 同时，我们也修复了众多之前两个版本未发现的、以及在本版本开发过程中遇到的逻辑功能上的bug，例如： 预约时间相对于当前时间已经过期的未采取过期处理； 未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况； 对于人数上限、备注等留空项目的前端数据处理不当； iOS系统下“我的页面”用户头像被背景图案覆盖的问题； 还有其他的一些细节小bug； 开发难点及笔记在谈UI开发之前，我首先得回答这个问题：为什么要隐藏顶部菜单栏以及底部菜单栏呢？ 理由有两个： 功能上的需要：主要是微信小程序自带的底部菜单栏定制性奇差，必须得每一个菜单项对应的路径、图标、颜色、文字，乃至菜单项的数量，全部都在app.json里写死了，而且样式清一色都是死板的文字/图标/文字+图标，无法进行更高级别的个性化定制。就像本项目这样加一个高度明显超出菜单栏本身的大大的加号按钮，或者加一点其他的特殊样式，用微信小程序自带的底部菜单栏都是无法实现的。同理，微信小程序自带的顶部菜单栏同样也无法像本项目这样放置一个可点击的刷新按钮。 设计上的需要：从本文中的小程序界面效果图可以看出，这种底色完全一致的、通透的视觉效果，明显区别于直接采用微信小程序自带方案的其他大多数小程序的界面，是十分夺人眼球的设计（虽然直接采用微信小程序自带方案也可以做得相当美观）。 UI难点之一：屏幕尺寸适配微信小程序事实上就是一种webview套壳应用的变体，这个是众所周知的事情了。所以不难联想到当使用微信小程序自带的顶部菜单栏时，小程序的wxml界面自上而下渲染的起点，应当是在顶部菜单栏的下方的，就像一般的带标题栏的安卓webview页面，都是顶部的元素帮助撑起了手机系统顶部的状态栏以及顶部的菜单栏在内的一个相当大的高度。如果隐藏了顶部菜单栏的话，就会出现wxml界面直接从状态栏下方开始渲染的情况，而且一般状态栏都是最顶层的，也就是说状态栏会遮挡一部分wxml内容。。。大概像下面这样： 在iPhone X上有刘海的话就更加尴尬了。。。 所以需要的就是将这一部分的位置空出来，尤其是对iPhone X的刘海要额外进行适配（后来在开发者工具中的测试我们也发现了iPhone 4/iPhone 5这一类小尺寸屏幕的手机也需要额外适配）。所以我们的思路就是动态定义包裹所有其他元素的&lt;view class=&quot;root&quot;&gt;的padding-topwxss属性。尽管wxss无法使用JS进行动态更改，wxml还是能用JS进行动态更改的。所以就想出了动态定义class属性的内容就OK了，代码如下——wxml代码：123&lt;view class="root &#123;&#123;isIpx?'root-ipx':''&#125;&#125; &#123;&#123;isIp4?'root-ip4':''&#125;&#125;"&gt; &lt;!-- content --&gt;&lt;/view&gt; JS代码：12345678910111213141516var that = this;wx.getSystemInfo(&#123; success: function(res) &#123; if(res.model == 'iPhone X')&#123; getApp().data.isIpx = true; that.setData(&#123; isIpx: getApp().data.isIpx &#125;) &#125; else if(res.model == 'iPhone 5' || res.model == 'iPhone 4')&#123; getApp().data.isIp4 = true; that.setData(&#123; isIp4: getApp().data.isIp4 &#125;) &#125; &#125;,&#125;) wxss代码：1234567.root-ip4 &#123; padding-top: 30rpx; &#125;.root-ipx &#123; padding-top: 60rpx; &#125; 但是在之后的测试中发现，一旦预约课程的表单变长，可以滚动起来了以后，状态栏底下会出现本来应该被遮罩了的表单。。这是因为padding-top只是把顶部元素下移了，状态栏本身是透明的，所以肯定无法遮罩滚动到顶部的表单。解决方法和上面是一样的，自己再定义一个&lt;view&gt;元素，用来遮挡状态栏底部的其他元素就OK了，同样要对特殊尺寸的屏幕做适配，此处就不再赘述了。 UI难点之二：自行开发的底部菜单栏的路由结构为什么要如此强调路由结构呢？因为你需要知道你当前用底部菜单栏打开的页面是哪一个。否则底部菜单栏如何将当前打开页面对应的按钮进行高亮或者其他处理，来对用户形成一种辅助的标识呢？我们在这里使用了一个相当讨巧的办法来解决这个问题： 我们并不删除底部菜单栏在app.json中的代码使之彻底消失，只是通过微信小程序API函数wx.hideTabBar对其进行隐藏，这样其基本的路由结构依然存在，无需另外写一个公共的路由代码。页面跳转可以使用wx.switchTab。然后由于自定义的底部菜单栏是重复出现在页面上的，准确来说应该是首页和“我的”页面上，所以我们采用了微信小程序的模板类型元素&lt;template&gt;来进行代码的复用：wxml代码的写法是：12345678910111213141516171819&lt;template name="tabbar"&gt; &lt;view class="tabbar-wrap"&gt; &lt;view class="tabbar-index" bindtap="tabbarRoute" data-index="0"&gt; &lt;image src="&#123;&#123;indexActive?'/images/index-hl.png':'/images/index.png'&#125;&#125;"&gt;&lt;/image&gt; &lt;view style="color: &#123;&#123;indexActive?'#17abe3':'#bfbfbf'&#125;&#125;"&gt; 首页 &lt;/view&gt; &lt;/view&gt; &lt;view class="tabbar-reserve"&gt; &lt;image src="/images/new-hl.png" bindtap="tabbarRoute" data-index="1" &gt;&lt;/image&gt; &lt;/view&gt; &lt;view class="tabbar-user" bindtap="tabbarRoute" data-index="2"&gt; &lt;image src="&#123;&#123;userpageActive?'/images/user-hl.png':'/images/user.png'&#125;&#125;"&gt;&lt;/image&gt; &lt;view style="color: &#123;&#123;userpageActive?'#17abe3':'#bfbfbf'&#125;&#125;"&gt; 我的 &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/template&gt; 在对应的页面中引用的方法也很简单123&lt;import src="/template/tabbar" /&gt; &lt;!-- content --&gt;&lt;template is="tabbar" data="&#123;&#123;...tabStatus&#125;&#125;"&gt;&lt;/template&gt; 其中，三点运算符表示传进tabStatus的全部子成员（这个tabStatus有两个成员：indexActive和userpageActive），也就意味着上面代码块里的&lt;template&gt;中的所有indexActive和userpageActive不用再写成tabStatus.indexActive和tabStatus.userpageActive了，很方便吧，这可是ES6的特性哦！wxss的代码也贴一下，这样也可以直接套用样式：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647.tabbar-wrap &#123; display: flex; flex-direction: row; justify-content: space-around; width: 100%; position: fixed; height: 90rpx; bottom: 0; padding-top: 20rpx; padding-bottom: 35rpx; border-top: .5px solid #cccccc; background-color: rgba(256,256,256,0.9);&#125;.tabbar-wrap view &#123; width: 30%; display: flex; flex-direction: column; justify-content: space-around;&#125;.tabbar-wrap .tabbar-reserve &#123; position:fixed; bottom:30rpx;&#125;.tabbar-wrap view image &#123; width: 60rpx; height: 60rpx; margin: 0 auto;&#125;.tabbar-wrap .tabbar-reserve image&#123; width: 115rpx; height: 115rpx; margin-bottom: 20rpx; background-color: #fff; border-radius: 50%;&#125;.tabbar-wrap view view &#123; font-size: 25rpx; width: 100%; text-align: center; margin-top: 1rpx; font-weight: bold;&#125; 以上操作的教程来源是这里。 UI难点之三：重写返回导航、页面标题和刷新组件既然隐藏了顶部菜单栏，可以说也相当于在打开新页面时也失去了微信小程序自动生成的标题和返回按钮，然后下拉刷新也别扭了很多（尤其是在iPhone X上，你下拉刷新的时候根本看不到那个刷新动画。。。），这就意味着以上功能全部都得自主开发。 我的解决方案也异常简单，返回导航直接使用微信小程序的API函数wx.navigateBack，刷新也不过是在图标上绑定钩子函数，这里的主要难点在于刷新动画的协调性。具体怎么说呢？wxss本质上就是CSS，刷新动画的一般实现都是一个圆形刷新图标的旋转，而这个旋转一般都是CSS的效果。但是若像本项目一样使用带箭头的圆环，则会出现一个很尴尬的情况：当你正在“加载数据”这一状态时，圆环是不停旋转的，而当“数据加载结束”时，圆环需要处于一个静止的状态。若将静止状态设置为一个固定的图片，例如说刷新图标的箭头处于图标的正12点方向，则你会发现，”加载数据”这一状态结束时，箭头并不一定处于正12点，而在切换到“数据加载结束”这一状态时，箭头突然就跳到了正12点方向。 可以先看看“有通知”小程序的刷新动画实现方法，基本上就是点击刷新后固定地转一圈，这样既避免了上述尴尬的情况，也可以让用户体验到类似于“转了一圈就加载了”的“快速加载”的观感。 那么我们是如何实现的呢？可以说是一次很成功的尝试吧：让“数据加载结束”这一静止状态不再是一张固定的图片，而是在下一次加载时箭头直接从之前停下的方向继续开始转动！这样给用户的体验就不再是十分突兀的，反而有一种很自然自然的流畅感和美感。 实现方法也很简单，设定好不同状态下的CSS属性即可，只不过需要JS在与后端通信的加载过程中向wxml里刷新图标的style=&quot;&quot;传入不同的变量，以启用或关闭不同的动画。 12345678910111213141516171819202122232425262728.line .title-wrap .refresh-button &#123; font-size: 45rpx !important; line-height: 90rpx; padding-left: 10rpx; padding-top: 15rpx; color: #6d6d72; animation: spin 800ms infinite linear; animation-play-state: paused;&#125;.line .title-wrap .refresh-button.active &#123; animation-play-state: running;&#125;@keyframes spin &#123; 0% &#123; transform: rotate(360deg); transform-origin: 60% 55%; -webkit-transform: rotate(360deg); -webkit-transform-origin: 60% 55%; &#125; 100% &#123; transform: rotate(0deg); transform-origin: 60% 55%; -webkit-transform: rotate(0deg); -webkit-transform-origin: 60% 55%; &#125;&#125; 可以看到这个animation-play-state相当关键，就是这一属性支持了我们的刷新开始和结束的自然切换。 哦对了，貌似还有页面标题没讲，这个其实就是自己添加标题写在相应的位置，如果需要动态标题则往wxml中添加变量。注意给返回、刷新之类的按钮留好位置即可。 UI难点之四：tab标签式导航栏的实现这个说实话网络上教程相当多，但是这里仍然有一些亮点，例如在高亮标签下的“下划线”。这并不是简单的用CSS的下划线属性实现的，而是使用了CSS的伪类概念。说实话，在后来其他项目的开发过程中，我才真正开始理解并有意识地使用起了伪类，给某一页面元素的正上方或正下方添加一些附属元素。 1234567891011121314&lt;view class="navbar"&gt; &lt;!-- tabbar标签式导航栏 --&gt; &lt;text wx:for="&#123;&#123;navArrayStu&#125;&#125;" data-index="&#123;&#123;index&#125;&#125;" class="item &#123;&#123;currentNavTab==index?'active':''&#125;&#125;" wx:key="unique" bindtap="bindNavbarTap"&gt; &#123;&#123;item&#125;&#125; &lt;/text&gt;&lt;/view&gt;&lt;block wx:if="&#123;&#123;currentNavTab==0&#125;&#125;"&gt; &lt;!-- 当currentNavTab==0时显示这里的内容 --&gt;&lt;/block&gt;&lt;block wx:if="&#123;&#123;currentNavTab==1&#125;&#125;"&gt; &lt;!-- 当currentNavTab==1时显示这里的内容 --&gt;&lt;/block&gt; 12345bindNavbarTap(e) &#123; this.setData(&#123; currentNavTab: e.currentTarget.dataset.index &#125;)&#125;, 123456789101112131415161718192021222324.navbar .item &#123; position: relative; text-align: center; line-height: 30rpx; font-size: 40rpx; font-weight: lighter;&#125;.navbar .item.active &#123; font-weight: bolder;&#125;/* 伪类的使用 */.navbar .item.active::after &#123; content: ""; display: block; position: absolute; bottom: -20rpx; left: 0; right: 0; height: 5rpx; background: #6d6d72;&#125; BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理过期处理说实话确实是个败笔，因为这个东西本来应该是后端完成的东西，我却非常不厚道的在小程序里面加入了这个功能（不是在批评某些“大前端”思想，但是这个确实后端来做会更好一点，毕竟数据量一大还不如后端处理好了再发给前端，某些过期数据的体积也可以适当压缩一下，况且我到现在都还没做分页，感觉药丸。。。）。而且这个过期处理确实挺重要的，在这种预约类小程序里面，所以我也在寻找更好的解决方案，希望（如果有坚持读到这里的）大佬能够联系我提供一些建议，不胜感激！ 我的想法是一拿到数据就交给某个工具函数去处理数据，处理完之后再返回数据。这里我直接把过期处理添加到了时间处理函数里面，具体工具函数如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859var curDate= utils.formatTime(new Date());var curDateFull = new Date();const timeFormat = (str, contentType) =&gt; &#123; for (var i = 0; i &lt; str.length; i++) &#123; if (contentType == 'class') &#123; var start = str[i].class_timestart; var end = str[i].class_timend; var date = new Date(str[i].class_date.slice(0, 10)); var itemDate = str[i].class_date; &#125; else if (contentType == 'course') &#123; var start = str[i].course_timestart; var end = str[i].course_timend; var date = new Date(str[i].course_date.slice(0, 10)); var itemDate = str[i].course_date; &#125; var curTime = curDateFull.toLocaleString('chinese', &#123; hour12: false &#125;).slice(10, 18).replace(/:/g, ""); var itemTime = start.replace(/:/g, ""); // 过期处理在这儿⬇️ // 如果该记录的日期本身就小于当前的日期，一定过期 // 如果该记录的日期与当前日期相同，但时间比当前时间要早，也一定过期 if((itemDate &lt; curDate) || ((itemDate == curDate) &amp;&amp; (curTime &gt; itemTime)) )&#123; str[i].overtime = 1; &#125; else &#123; str[i].overtime = 0; &#125; date = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; start = start.slice(0, 5) if (start.slice(0, 1) == "0") &#123; start = start.slice(1, 5) &#125; end = end.slice(0, 5) if (end.slice(0, 1) == "0") &#123; end = end.slice(1, 5) &#125; if (contentType == 'class') &#123; str[i].class_date = date; str[i].class_timestart = start; str[i].class_timend = end &#125; else if (contentType == 'course') &#123; str[i].course_date = date; str[i].course_timestart = start; str[i].course_timend = end &#125; &#125; console.log("时间处理后：", str); return str;&#125; BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况“辅导预约”这个功能事实上也就是用户“课程预约”功能的一个翻转：讲师自由发布课程，多个用户预约一个讲师的课程，人数上限可以有也可以不设置。反之，用户自由发布辅导需求，多个讲师预约一个用户的课程，但是是一对一的课程，所以人数上限其实是1。但我这里没有再使用人数上限的功能了，而是采用了一个很清奇的绑定思路：多表左联合查询。 这个说实话也是个败笔😂（没错，包括上面那个在内，你在本文看到的所有bug解决的思路，都是些让你觉得很滑稽的解决方式，因为我当时是真的没办法快速找到一些最佳实践的。。。）正常情况下的思路应该是要去维护一个新的数据库字段，就是“是否已经有讲师预约”这样的一个标志字段。但是我这里的处理思路就很清奇，既然已经被讲师预约了的话，那是不是可以让用户的预约数据库表和讲师的接单数据库表进行一个左联合查询，然后如果某个字段联合查询后查询不到讲师的信息（例如昵称nickname之类的）就可以认为是未被讲师接单呢？反之是不是就可以被认为是已经被接单呢？这个清奇的思路事实上是很差劲的，因为这个涉及到一个查询效率的问题，联合查询总的来说肯定要比单表查询要慢很多，数据一多肯定影响性能，而且这样返回前台数据不可避免地泄露了讲师的信息。 当然，还是那句老话，安全起见，后端数据库表结构以及相应的SQL查询语句我是不可能公开的。所以这里就只有描述，没有代码了。 BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当这是个相当玄学的问题，什么叫“处理不当”呢？这涉及到用户体验与数据库管理之间的矛盾。用户当然希望这样的功能实现：在填写的时候，“人数上限”一栏留空，就代表人数上限为无上限，填入数字再表示有一个确定的上限，“备注”留空，就代表没有备注，填入备注就代表有一段备注。但是数据库管理的时候，一个字段的格式一般是固定的，我不可能为了存储“无上限”这一信息就让一个人数上限的字段同时支持整型数和字符或者别的什么，所以我只能无奈地让数字0代表无上限。同时，备注也可以存储为一个“NULL”来代表无备注。但是问题来了，当上传到后端时，前端至少需要对数据做一个预处理：把人数上限从undefined改成0，把备注从undefined改成NULL。我当时就考虑到这里，但是后来才发现：等等，那后端返回到前端呢？不是也得再经历一次相反的转换吗？ 大概就是这样一个逻辑：123456789101112131415161718192021if (classItem.student_limit == '0') &#123; this.setData(&#123; studentLimit: '无上限' &#125;)&#125; else &#123; this.setData(&#123; studentLimit: classItem.student_limit &#125;)&#125;if (classItem.student_sum == null) &#123; this.setData(&#123; studentSum: '0' &#125;)&#125; else &#123; this.setData(&#123; studentSum: classItem.student_sum &#125;)&#125;if (classItem.class_intro == "undefined") &#123; classItem.class_intro = "无";&#125; BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题这个确实是个意想不到的BUG，在正式上线之后才发现Safari浏览器的渲染引擎存在着这样的bug：当一个具有transform的CSS属性的元素作为背景，而另外一个图片元素在其上方时，将不能够通过z-index属性来控制它们的层级关系。 之后的解决方案是从网上搜索得出的“以毒攻毒”法。是的，你没有看错，这个方法就是用transform来解决transform带来的问题的。 12345678910111213141516171819202122.avatar-img&#123; width: 140rpx; height: 140rpx; margin:50rpx auto 30rpx; background-color: #bfbfbf; border-radius: 50%; z-index: 99; border: 2px solid #fff; transform: translateZ(100rpx) /* 这个就是解决办法，“以毒攻毒”，简单粗暴 */&#125;.colored-top &#123; position: fixed; top: 0; left: -35rpx; width: 300%; background-color: #17abe3; height: 40%; z-index: 0; transform: rotate(8deg);&#125; 其他小BUG这里将会根据项目当前进度，及时更新一些其他的小BUG以及处理方式，也就相当于一些后续了~ 小程序最终界面 小程序第三版主界面 用户课程预约界面 用户辅导预约界面 讲师辅导接单界面 讲师辅导接单界面 讲师发布课程界面 “我的”界面 “关于”界面 结语 先。。。先容我吐槽一下吧。讲了挺多的，确实，一看发现上千行了😂（至少在markdown里面是这样，1.3k），我打算以后有机会的话拆成两篇文章发布。写的时间跨度一个月吧，因为各种事情，写写停停，甚至在某几次提笔重新开始继续写下去的时候，都发现自己都不知道之前到底写了什么，现在该写什么，写的初心是什么。都快被各种事情给搞忘了。所以说，要想系统性的总结一个东西，很难。况且我这个小程序至少前端代码是必须要放到GitHub上去的，要想再系统性地整理并分享一个东西，更难。 首要的，我还是非常感谢明导和郑导、感谢搭档王云程同学（@fafnir）、感谢提供过帮助的高亦非同学（Jason Gao）以及感谢计通学院学生讲师团，给予了我这次项目实战的宝贵机会。如果没有这次实战机会的话，估计我也很难得出如此系统的经验，并写出内容如此（冗长而）丰富的文章了吧。这是一次从零开始、至少是从需求开始的一次系统性的开发，虽然过程不免因为个人水平仍处于成长期、个人其他事务的干扰等各种原因有着种种波折起伏，但是所有的过程都是在从宏观到微观、从代码开发到客户沟通再到界面设计，几乎是全方位地锻炼我的各种能力。 所以，再次感谢在开发过程中给予了我各种帮助和指导的所有人，谢谢大家！ 最后，这是本站的第七篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者。本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Environment Configuration for Yolo-darknet]]></title>
    <url>%2F2018%2F02%2F20%2FEnvironment-Configuration-for-Yolo-darknet%2F</url>
    <content type="text"><![CDATA[Just do it.Just do something new and do it yourself. 记录一些关于yolo-darknet环境配置踩过的坑。能力有限，但求指点，欢迎交流。 搭建环境 OS: Ubuntu 16.04 LTS PC: ASUS K550J (EFI enable) GPU: GTX950M CPU: i5-4200H RAM: 4G DISK: 1T HDD (no SSD) 配置过程安装Ubuntu 用UltraISO把iso文件烧到你的U盘，进BIOS打开EFI引导，并选择EFI模式下的U盘为第一引导项 安装Ubuntu到一个空白分区（可以通过分区压缩获得，如果是全新电脑就直接开始分区了）： 注意根据提示划分那块bios efi的小分区，几十K即可； 划分swap交换分区，一般是你内存大小的3倍大，划在主分区后面； 剩下的划给主分区； 选择安装启动器到Windows使用的那个EFI启动分区。 进入分区界面前有几个选项要注意： 让你顺带安装更新的那个，不要勾选，更新的源大多自动匹配到了国外的，网速你懂的； 让你安装第三方闭源驱动和软件的，必须勾选，能解决很多开源驱动带来的问题。 安装，然后回到BIOS里面你会惊奇的发现出现了Ubuntu的EFI模式引导项（准确来说是两个，估计是那次我多搞了一个/boot）选择它为第一个。 成功进入Ubuntu 安装OpenCV安装OpenCV主要是为了使用外置摄像头进行图像采集。 GitHub上有自动安装版本 12sudo su git clone https://github.com/jayrambhia/Install-OpenCV/tree/master/Ubuntu 进入安装目录下的/2.4，提升*.sh文件的权限并执行 123sudo suchmod a+x *.sh./opencv2_4_10.sh 然后就会开始极其漫长的安装过程。 第一次安装到某个阶段的时候卡死，硬盘灯不闪，鼠标键盘没反应，我还以为安装失败强行重启了。然后又开始一遍，又卡死。我绝望了，但是冷静了下来，想了想——怕是自己电脑配置太渣。然后在安装前关闭了所有无关程序，唯独打开了系统监视器（即Windows下的任务管理器）。之后就非常惊奇地看到卡死的时候：内存+CPU，全部占用100%然后过了大概一个多小时，又全部降回去了，没过三分钟，又是内存飙到100%，CPU反倒正常了目测过了三个多小时，还是这个样子，倒是命令行每隔十几分钟跳一次字，系统时钟已经卡到了和实际时间存在了十分钟到半小时不等的时差，只有某几次命令行跳字的时候，内存占用下来了一点，系统时间一秒刷新了十几分钟最后一脸无奈地睡了。第二天打开笔记本盖子一看，装好了，老大一个success。 安装darknet打开终端123sudo sugit clone http://github.com/pjreddie/darknet.gitcd darknet 用gedit修改makefile文件令OPENCV=1然后在终端输入 1make -j8 安装NVIDIA官方GPU驱动首先禁用开源驱动 新建一个.conf文件 1sudo gedit /etc/modprobe.d/blacklist-nouveau.conf 写入以下内容12345blacklist nouveaublacklist lbm-nouveauoptions nouveau modeset=0alias nouveau offalias lbm-nouveau off 保存，重启后再打开终端，输入1lsmod | grep nouveau 无输出即禁用成功 正式开始安装NVIDIA官方驱动了我这里选择的是直接到系统的“软件和更新”里的“附加驱动”选择安装NVIDIA的专有驱动（不要管他是否显示tested，安装就是了） 等待安装成功后，重启打开终端，输入1nvidia-smi 正确显示你当前GPU的状况就OK了 安装CUDACUDA下载地址：https://developer.nvidia.com/cuda-downloads选项顺序是Linux-x86_64-Ubuntu-16.04-deb(local)1点多G，然后找个下载速度快的地方下了它，推荐迅雷等下载工具，虽然并没有加速，但毕竟服务器在境外，浏览器没法断点续传，连接一断就得重新下载。 然后把下载好的文件包拷到“/home/用户名/”目录下，在终端里面输入（注意你的deb文件名不一定是这个，这个是旧版的了） 123sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.debsudo apt-get update sudo apt-get install cuda 安装完成后输入（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）12export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATHexport PATH=/usr/local/cuda-7.5/bin:$PATH 再次安装darknet再次用gedit打开makefile（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）令开头GPU=1，同时令NVCC = /usr/local/cuda-7.5/bin/nvcc后保存退出然后在终端输入 1make -j8 测试darknet下载模型+测试模型到这儿下载*.weight格式的模型：http://pjreddie.com/darknet/yolo/ 终端切换到darknet的安装目录下示例命令如下：12./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg./darknet yolo test cfg/yolo-tiny.cfg yolo-tiny.weight 使用电脑/手机摄像头采集图像电脑摄像头：1./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights 手机摄像头： 先在手机上安装好IP摄像头APP，配置好地址后，先用浏览器访问以确定视频源的路径(因此这里的地址是你配置并确定好视频源的地址)1./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video 参考资料 http://blog.csdn.net/samylee/article/details/51684856 http://blog.csdn.net/wjbwjbwjbwjb/article/details/52125475 http://blog.csdn.net/u014696921/article/details/65626751 http://blog.csdn.net/wuzuyu365/article/details/52469131 http://blog.csdn.net/zafir_410/article/details/73188228 http://blog.csdn.net/u013832707/article/details/53438574 https://www.cnblogs.com/jackchen-Net/p/7954138.html 最后，这是本站的第六篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Some Tips of Web Programming]]></title>
    <url>%2F2018%2F02%2F18%2FSome-Tips-of-Web-Programming%2F</url>
    <content type="text"><![CDATA[Why did you hate tips but not so now?‘Cause I don’t think it bad to become hateful. 作为一个新手，分享一些毫无技术含量的小技巧水平有限，如有错漏，多多包涵。 工具 · 关联性如果需要在线编辑服务器上的代码，你，或许有一百种方法把文件下载下来；或许有一百种方法把文件上传上去；或许有一百种方法让项目本地测试；或许有一百种方法让项目上线测试。 那么，作为一个（至少没我菜的）新手，如何做一些事情，让一些过程自动简化，哪怕只是那么一丁点呢？ 所以就到了让你使用的工具之间具有关联性的时候了。虽然我也没走版本控制、自动测试之类的正道（哭笑.jpg 好的好的，我知道了。以后会改的，以后会改的。。。 此处示例为：FileZila+Putty+VSCode+Chrome Dev Tool 在线编辑文件（自动上传下载） 将服务器上你需要在线编辑的文件格式的默认打开方式修改为VSCode（或其他你需要的编辑器） 重新打开你的FTP上传下载工具（例如FileZila），登录你的服务器，右键你想要编辑的文件，选择“编辑”（或其他的类似选项，试试便知） 此时你会发现，你的FTP工具自动使用你之前设定的编辑器，打开了这个文件。 你编辑了文件并按了保存。 你的FTP工具提醒你是否要上传该文件的最新版本（你甚至可以设置为无需提醒） 你点击了确定 完美 是不是不需要刻意下载和上传就完成了更改？原理就是FTP工具其实是将服务器上的文件存放在了一个临时文件夹中，供你设定好的编辑器打开它，与此同时，FTP工具顺带存下了文件在服务器上的地址当它发生了更改时，再询问你是否上传或者自动上传，自动按照之前保存的地址，回传并替换了它。 好处？能吃吗？……当，当然啦。 当你需要同时更改好几个不同位置的文件时： 你不需要记得哪些文件是之前改完传上去了的，哪些是还没改完的 你不需要记得这些乱糟糟的文件各自到底存放到了哪里 你只需要找到它，修改它，保存它。 一气呵成，和操作本地文件的逻辑高度一致了 在线备份项目（打包和下载） 使用Putty输入命令对项目文件进行zip打包或者数据导出 使用FileZila对打包好的文件批量下载 没了，你就备份好了呗（不放心的本地搭个环境再本地测试下有没有哪里不对的地方就是了 简单吗？简单。 但是大部分新手想备份下所有的东西，肯定会纠结这么一秒钟： “噢，我的SSH工具下载不了文件。” “唉，我的FTP工具下载文件夹的时间全花在打开路径上啦！” 用你的SSH工具打个包不就好了吗？ 所有人最初都有一个一无所知的时候。过去就好。 在线调试项目（开发者工具的应用）当你想测试一段JS（尤其是jQuery）代码的是否正确应用到相应元素、达到相应效果的时候当你想修改一下你Web项目的CSS属性同时想直接看到效果的时候当你想直接往在线的html页面内添加、修改代码并看到效果的时候当你想看到不同屏幕尺寸下、连续变化的窗口尺寸下响应式界面的变化是否符合预期的时候 开发者工具的重要性就凸显了，没错，按下那个你有些生疏的快捷键，打开它。 有时间多读读它的文档或教程——经过一些简单的配置，你不仅仅能够实时预览的你的更改，抓到看似平稳运行的表面下各种奇形怪状的bug，你甚至还能实时保存你的更改（例如Chrome Dev Tool的WorkSpace功能） 多了解各个选项卡的功能和含义，它们存在的背后都是一个又一个鲜活的需求：响应式页面、加载时间、性能优化、bug修复…… 出现错误和提示时别怕——它意味着你仍然有让你的项目继续优化的方向 低能预警：之后的就不大像Tips了……没错，我在强行凑字数（哭笑.jpg 知识 · 广谱性是的，我用了一个医药学的名词。只想说明：知识不仅仅在于积累的深度和广度而更在于应用的深度和广度 善于使用搜索引擎善于使用Ctrl+F 这段话永不过时。我举双手赞成。 但是，不能只局限于 这段代码好厉害Look, it works! 而是要多想一步： How does it work?Where does it work?How might it work better?Where might it work as well? 以及 Where and how can I find something good like this?Why not try something new? 广积粮。 方案 · 普适性当你还没有到达通过造轮子解决问题这种水平的时候，选择一个使用最广泛的解决方案是最直接、最经济、也是最恰当的。 选择的方案越小众、越特殊，在出现问题以及遇到疑惑时，你能够得到的帮助是越稀少的你的问题越专一，你能够获得对应解决方案的概率也是递减的而一个普适性的方案选择，不仅能够提升工作效率也能有益于你作为一个新手的学习 所以，当你还是一个新手的时候，选择一个普适性的解决方案是最佳的。 坑总会有的，但不是现在。避免踩坑，快速成长 最后，这是本站的第五篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
        <tag>understanding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 2]]></title>
    <url>%2F2018%2F02%2F17%2FNotes-About-Recent-Projects-2%2F</url>
    <content type="text"><![CDATA[Enter password here. Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 1]]></title>
    <url>%2F2018%2F02%2F15%2FNotes-About-Recent-Projects-1%2F</url>
    <content type="text"><![CDATA[Enter password here. Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Understanding on HTML]]></title>
    <url>%2F2018%2F02%2F14%2FUnderstanding-on-HTML%2F</url>
    <content type="text"><![CDATA[Take something for example,which seems to be far more effctive at times. 讲一些对于HTML的理解，顺带讲讲CSS和JavaScript水平有限，如有偏颇，多多包涵。 框架 · 模板 · 控制HTML，全称是“超文本标记语言”百度百科CSS，全称是“层叠样式表”百度百科JavaScript，额……没有全称，不要在意这些细节。百度百科 首先，概念不可避。此处不是科普，而是经验谈，有需要的同学可以上百度百科先阅读一下~ 虽然正统的MVC框架其实是这样的，但是我仍然想套用它的概念，毕竟是比较经典的讲法，能够在一定程度上提高本文的逼格。（以及，能够被以后前来访问的大牛和我自己笑话一下。） 我这么菜，我也很无奈呀.jpg 框架——HTML Chrome开发者工具中显示的HTML代码 HTML代码是网页最根本的骨架，也是大部分网页呈现在浏览器上的最终形式之一。举个栗子，请打开你正在使用的任意一款浏览器，访问任意一个页面，然后打开浏览器自带的开发者工具（如果不知道如何打开，百度一下）。该开发者工具中的某一个选项卡（通常是第一个）中展示的正是该网站的HTML代码。大致结构一般如下： 123456789&lt;html&gt; ... &lt;head&gt; ... &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; 这些用尖括号和斜杠组成的HTML标签，是网页的框架，正如你阅读的书籍，在初始状态下是从上到下，自然地顺序排版的。被标签包裹着的文本内容、各种由诸如&lt;img&gt;、&lt;video&gt;等标签衍生出的图片、视频等多媒体内容，都在HTML这个框架之下，分布于整个网页的各自位置当中。看着十分理想，场面非常和谐。 但是，燃鹅，BUT…… 模板——CSS “这个对话框我想浮在页面最顶层，然后点完就消失，对，要有特效的那种！”“给我弄个像这个图纸这样的网页。什么？两个纵向栏，报纸都排版得出来，你写不出来？”“怎么都是黑漆漆一片的，文字和按钮要有颜色，有质感，有特效，这么丑会辣眼睛的啦！”“……哼！” 是的，你眼前的网页之所以不是一场灾难，一坨从左往右写，从上往下读的纯文本，正是因为除HTML代码之外，还有CSS代码，作为网页样式的模板，批量而精确地定义着每一个网页元素的各种属性。 是的，各种属性：长宽，距离，边框，形状，颜色，排版，显示，隐藏…… 12345678910111213.mod-class&#123; width: 10px; height: 20px; ...&#125;#special-item&#123; margin: 0 auto; padding: 8px; color: #000; background-color: transparent; ...&#125; 这样的css代码，作用于形如以下的html元素中 1234567&lt;div class="mod-class"&gt; ...&lt;/div&gt;...&lt;div id="special-item"&gt; ...&lt;/div&gt; 元素标签可以不仅仅是&lt;div&gt;，而只要class或id吻合，无论这个元素是什么，就会受到相应CSS语句的约束，就像一个放之四海而皆准的模板一样这就是CSS作为页面样式模板的力量。 而且，这不仅仅是静态的。现代的CSS版本，拥有着能够做出各种动态特效、多平台响应等一系列高级特性。 “那么CSS代码在哪里呢？我在开发者工具中找了半天没找到诶。” Chrome开发者工具中显示的CSS代码 一般在显示HTML代码的开发者工具界面的右侧。而这些CSS属性都是通过在HTML文件中引用.css格式的文件、或者直接插入&lt;style&gt;标签来实现的： 1234567891011121314//引入文件&lt;link href="./***.css" rel="stylesheet" type="text/css"/&gt;//引入文件&lt;style&gt; @import"mystyle.css"; &lt;/style&gt;//直接插入代码&lt;style&gt; .custom-class&#123; .... &#125;&lt;/style&gt;//直接在元素中插入代码&lt;div style="display: none"&gt; 但是，燃鹅，BUT…… 控制——JavaScript，以及更多 “网页不错, 我想弄个账户登录什么的。这样可以让用户有个性化的体验”“弄个banner挂幻灯片吧，自动播放的那种，现在网站主页不都这么做吗？”“听说小游戏挺火的，‘跳一跳’啥的，什么写的，难不成是flash？”“额……” 如果网页是纯HTML和CSS编写出来的话，同样是一场灾难： 无论何时，所有人都只能访问通过一模一样的网页 要创建新的网页，只能手工重新编写新的网页文件 无法提供用户输入的功能，更无法在浏览过程的前中后，对用户输出特定的反馈（内容的变化，事件的产生） …… 那么如果网页引入了我们熟悉的程序代码呢？ 不同的用户，访问具有不同内容的同一个网页，正如我们打开同一个APP，看不同的推荐一样 创建新的网页，正如安装新的程序一样，是一个自动的过程 每一次手指的触摸、鼠标的单击，程序的界面都会有相应的变化 …… 那么就需要一种、多种编程语言参与到网页乃至网站的编写过程中来了。JavaScript，这个带着Java名字，却和Java毫无关系的编程语言应运而生，担负了赋予网页灵魂的工作——控制网页的各类功能。 在你看着网页加载的时候，在你浏览网页的时候，在你按下网页上一个提交按钮的时候，在你点击屏幕跳一跳的时候（没错，微信小游戏的游戏逻辑也是JS写的） JavaScript都在你看不见的地方，静静地运行着。（它和HTML、CSS一样，被下载到浏览器，在浏览器提供的本地引擎中运行着，而不是服务器之类的远程平台）是的，它是货真价实的编程语言，让网页拥有程序一样的功能。 Chrome开发者工具中显示的可调试jQuery（JS的一个分支）代码的控制台 （一般在开发者工具显示HTML代码界面的下方，或者名为控制台的选项卡内） 与css一样，它也有引入文件和使用&lt;script&gt;标签直接插入代码的方式。 123456&lt;script type="text/javascript" src="***.js"&gt;&lt;/script&gt;//或者&lt;script&gt; var a = 0; ...&lt;/script&gt; 但是，燃鹅，BUT…… 好了好了，这里就不另开一小节讲了。 JS的优势正是所有浏览器都拥有的统一的JavaScript引擎，可以让JS一次编写，处处下载，均能兼容运行。但是它的劣势也就在于本地运行，占用了本地的资源，增大了客户端设备的负担，不能在网页加载之前对网页结构进行灵活的改变，（举个简单的栗子，如果要根据不同省份、地区、国家的访客的ip地址，提供大量的不同内容，对于网页的处理总不可能永远都是边加载边修改）。况且，JS并没有解决： 既然有了用户数据交互的渠道，那数据存在哪里？又从哪里取出？ 如何在部署了网站的服务器上设定好域名、访问权限等，并且能够自动地拒绝非法的请求 所以，需要： 一个能够在服务器端，根据客户端提交来的请求，在加载之前就能够将内容做一定处理的编程语言 一个能够规范地管理并与网页进行实时数据交换的数据库 一个能够有效管理服务器上传下载、ip域名映射、访问进程等事项的服务器管理程序 是的，这些服务器端的需求，与我们之前提到的浏览器端，也即客户端的需求相对。两者的对比就产生了网页开发中最重要的两大分类： 前端和后端 网页前端开发：HTML+CSS+JS网页后端开发：服务器管理+数据库管理+预处理控制（后端框架） 两者有着很多很有趣的矛盾统一性，例如： 网页前端开发因为需要跨浏览器甚至跨平台的兼容，因此使用的技术一般是统一的HTML+CSS+JS。 后端开发却相反，由于服务器本身平台的多样性（Linux或Windows）以及对其性能、规模等其他需求的多样性，导致后端采用的技术框架呈现百花齐放的姿态，例如WordPress采用的LAMP或LNMP，基于python的Django，基于Node.js的Express，基于Java的Spring等等，此处就不过多赘述了。 …… PS：不仅仅是网页开发分前端和后端，任意一个web项目，例如手机APP、桌面程序、微信小程序……都需要有前端后端的开发划分，以便于厘清项目结构和开发安排 总结：在跑题万里之后 （以及，能够被以后前来访问的大牛和我自己笑话一下。） 我这么菜，我也很无奈呀.jpg 我一直在思考自己为什么会跑题。最后发现答案就在上面这两句引用里面。是啊，我很菜。 我当前对于技术的理解，根本无法给予我把控这些庞杂概念的能力。说是讲自己对HTML的理解，但更多的是谈到了围绕HTML+CSS+JS的网页前端基础。虽然也没什么毛病，俗话说“不讲相关知识点的讲评，就是在耍流氓”。 但是我依然要写，毕竟只有写出来点什么，才能知道自己脑袋里面装的东西是有多么地可笑，才能放下自己那些绷在脸面上放不下的所谓自大和狂妄。正如高中时期孜孜不倦地在一切空白处记下的笔记，就算我记下之后不再去看它，至少在我记录的时候，知识在我的大脑中不断流转、不断处理，最终呈现在我的笔下，我的眼前。这个过程，不正是自我纠错、自我提高的过程吗？ 为自己而写，调动自己的思维，不要让大脑日渐沦为一台生锈的机器。 那么最后总结一下吧：HTML作为现代网页的基本骨架，只有在CSS、JavaScript乃至整个服务器后端的协同下，才能够正常地发挥现代网页的基本机能，以及为更多新鲜的需求、新颖的功能带来无限的开发潜能。 学习网页开发，最重要的不是一句两句语法，而是在动手和借鉴的过程中，从微观的角度，理解整个项目的运作逻辑，和技术背后的高明之处。（虽然我还是在需求导向型的歧途上越走越远，但是读得懂源码的程序员，才能开发出真正的好产品，这是不变的真理，迟早有一天我仍然会兜一个大圈子，回到这里的） 建议 · 福利其实上面已经写一些建议了。但是我还想另外开一个大节讲一讲。 建议不多，就是先不要想着自己搭一个什么牛逼的网站，先做一个简单的HTML+CSS+JS的小页面，理解清楚他们之间的作用机理，顺带踩一部分的坑。 之后或许你会停滞一段时间，因为说实话，其实在修改一些开源项目供你自己项目需求的时候，这些已经完全够用了，前辈写的足够优秀了，后端的东西你一旦配置好了就可以专心改界面了。 但是，会有一个时刻，你会发现只搞这些根本满足不了需求，或许是你自己看到了别人写的项目，或许是你突然要调用数据库做一个新的功能，或许是你发现项目提供的API根本没法用，要自己写一个。 不懂后端的前端，只可能是个巨坑。所以你从一个大坑（网页前端），纵身一跃，跳进了另一个大坑（网页后端）。之后再多跳几次，从网站到移动APP，从移动APP到桌面端，从软件到物联网硬件，然后，然后…… 然后，你就乖乖回前端啦！（并不） 福利？福利是不可能有的，这辈子都不可能有的。就是稍微推荐几个网站把读者带坑里去这样子 学习站点： FreeCodeCamp.cn：闯（shua）关（ti）式的前端编程教学网站（也是我真正开始接触前端编程的地方） w3school：可以当工具书用，有些知识点较老，但是不影响使用（百度HTML相关知识点，不出意外前几个就是它了） 萌码：又一个闯（shua）关（ti）式的编程练习平台（虽然没用过但是身边的同学在用） 练手推荐： GitHub：多看优秀项目的代码，并且多练习一些优秀项目的部署和使用，如果不知道找什么就去看排行榜上的项目。（CSDN同理） Student Developer Pack：使用学校提供的学生邮箱注册GitHub账号，可以领取Education Pack，内含免费一年DigitalOcean服务器和Namecheap域名。（踩坑提示：DO的服务器要使用VISA卡或者PayPal预交约合32元人民币才能开户，建议使用PayPal，一年后全价略坑，现已转bandwagon。服务器在境外，可以找教程kexueshangwang） WordPress：搜一个教程并对照着在服务器上搭建一个WordPress站点吧！本博客程序是Hexo，但我依然推荐WP，毕竟越著名的程序出问题时能够获得的帮助（教程）也就阅读。同时也有助于你理解LNMP/LAMP内部各个部分的联系和配置方法。如果肯花心思去美化、修改你的站点那就更好了。（WordPress是一个优秀的PHP项目，类似的还有论坛程序Discuz、PHPwind、Wecenter、Tipask，在修改它们的过程中你也可以理解PHP在站点中起到的作用，如果你还想尝试其他架构的例如Java或Python的，也可以去搜索并尝试部署到你的服务器上） 微信小程序：使用你当前掌握的前端、后端知识去开发微信小程序吧~ 工具下载： Baidu：是的，搜索引擎是知识的源泉，（貌似并不用下载），掌握好问题的描述方式，输入少量的、但足以描述整体的关键词，大部分的问题都能够找得到答案。 VS Code：近乎万能的代码编辑器，你值得拥有。 FileZila：好用的FTP上传下载工具，与服务器进行文件传输的首选。 Putty：SSH客户端，使用命令行远程操作你的服务器，顺带学习一下Linux命令的使用 LNMP：在你的服务器上快速配置LNMP环境，免除各种依赖冲突的烦恼 XAMPP：在你的服务器上快速配置LAMP环境，同样也支持在本地环境（Windows桌面端）配置，便于你站点的本地调试（本地调试后上传能避免很多不必要的麻烦） 最后，这是本站的第二篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
        <tag>understanding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First to NeXT]]></title>
    <url>%2F2018%2F02%2F14%2FFirst-to-NeXT%2F</url>
    <content type="text"><![CDATA[Maybe it is the first.But in my view, that may be the NeXT. 名字不重要，形式也不重要，重要的是内容。这里将会陆续发布一些技术工作的经验谈，然而仅仅是经验谈而已。 更多的都是需要读者自己去探索，这一方天地下，比我们的视野更远的地方。 12hexo new "First to NeXT"hexo d -g 这是本站第一篇正式发文，感谢阅读！]]></content>
      <tags>
        <tag>intro</tag>
      </tags>
  </entry>
</search>
