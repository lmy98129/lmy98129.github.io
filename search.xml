<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Training Configuration for Yolo-darknet]]></title>
    <url>%2F2018%2F11%2F28%2FTraining-Configuration-for-Yolo-darknet%2F</url>
    <content type="text"><![CDATA[Everything’s coming up roses. 续上次的笔记分享yolo-darknet神经网络训练全过程的配置经验 前言由于本文中描述的yolo-darknet训练配置流程来源较多，而且训练配置时间为今年暑期，距离本文完稿时间较远，因此本文不可避免地会存在一定的失误和错漏。恳请发现问题的读者不吝赐教，通过首页的联系方式向作者提出宝贵意见。 数据集的标注、修改数据集的采集来源以及采集方式属于项目内容，此处暂时不便叙述。对于采集得到的数据集，尤其是针对yolo-darknet的图片数据集，应当至少满足如下的要求： 文件名称中不应当出现中文 多次采集得到的文件应当分开命名前缀，否则存在同名文件覆盖的问题 最好是同一种后缀格式，例如jpg格式。后缀大写JPG和小写jpg，darknet不会认为是同一种文件类型而报错。另外，png格式比较灵活，可以强行改成jpg后缀且内容仍可以读取 本项目中除了采集了原始数据之外，也通过python脚本对图片素材进行翻转、随机颜色等基本变换来对数据集规模进行扩充。此为额外操作，不影响yolo-darknet训练过程。 数据集的标注采用的是基于python的ImageLabel，标注界面是可视化的，流程基本上是： 设置你标注的物体对应的标签，例如dog，cat等，可以设置默认标签 打开素材文件夹到程序中，设置当前的标签，对图片进行逐个画框标注 标注后自动生成数个xml文件，xml文件的内容一般如下 1234567891011121314151617181920212223242526&lt;annotation&gt; &lt;folder&gt;图片文件夹&lt;/folder&gt; &lt;filename&gt;图片名称&lt;/filename&gt; &lt;path&gt;图片路径&lt;/path&gt; &lt;source&gt; &lt;database&gt;Unknown&lt;/database&gt; &lt;/source&gt; &lt;size&gt; &lt;width&gt;600&lt;/width&gt; &lt;height&gt;338&lt;/height&gt; &lt;depth&gt;3&lt;/depth&gt; &lt;/size&gt; &lt;segmented&gt;0&lt;/segmented&gt; &lt;object&gt; &lt;name&gt;标签名字&lt;/name&gt; &lt;pose&gt;Unspecified&lt;/pose&gt; &lt;truncated&gt;0&lt;/truncated&gt; &lt;difficult&gt;0&lt;/difficult&gt; &lt;bndbox&gt; &lt;xmin&gt;291&lt;/xmin&gt; &lt;ymin&gt;76&lt;/ymin&gt; &lt;xmax&gt;412&lt;/xmax&gt; &lt;ymax&gt;192&lt;/ymax&gt; &lt;/bndbox&gt; &lt;/object&gt;&lt;/annotation&gt; 基本上就是对于标注的方框的位置和大小的记录。标注生成的是整个VOC数据集文件夹，一般有两个文件夹：图片文件夹Image和标记文件夹xml。标记文件夹中每一个xml文件的文件名基本上都对应了的图片文件夹中的图片文件。 应当注意的是，一旦移动了xml文件夹或整个数据集文件夹，必须将所有xml文件中的图片文件夹、图片路径改成对应的新文件夹、新路径，否则必然报错。 但问题是，一旦数据集规模像本项目一样巨大时，人工逐个更改xml就十分困难。所以需要python脚本进行批量文件处理。此处摘录一部分代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445# coding=utf-8import osimport xml.etree.ElementTree as ETimport sysreload(sys)sys.setdefaultencoding('utf8') path = "/home/blean/VOC/validateImage/"oldpath = "/home/blean/VOC/pos/"newpath = "/home/blean/VOC/Image/"filelist = os.listdir(path)i = 0for files in filelist: if os.path.splitext(files)[1] != ".jpg" and os.path.splitext(files)[1] != ".txt": tmp = os.path.splitext(files)[0] os.rename(path+files, path+tmp+".jpg") # 强行将非jpg的后缀，例如JPG大写后缀或png后缀更改成jpg print path+files i = i + 1 else: continue tree = ET.parse(path+files) root = tree.getroot() filename = root.findall('filename')[0].text tmp = os.path.splitext(filename)[0] # 寻找xml文件中对应的文件名 print path+tmp+".xml" os.rename(path+files, path+tmp+".xml") # 同样地将xml文件名改成后缀修改后的图片文件名 root.findall('path')[0].text = tmp.replace(oldpath, newpath) # 修改路径 tmp = root.findall('filename')[0].text if tmp.find("捕获") != -1: print tmp root.findall('filename')[0].text = tmp.replace("捕获", "buhuo") tree.write(path+files) # 修改某些中文文件名 root.findall('folder')[0].text = tmp.replace("pos", "Image") # 修改图片文件夹名称print i# 打印总数 注：以上代码是本人为了修正数据集格式自行编写的，具有很强的临时性，是不同功能的python代码之间的整合，如果不需要某些功能，可以将对应代码手动注释掉 训练数据集和验证数据集的拆分数据集应当分成训练集和验证集，以便于对训练效果进行评估。这里作者直接参考了这篇CSDN上的文章《YOLO训练自己的数据集》中的python脚本，内容摘录如下： &gt; 下载链接：http://pan.baidu.com/s/1hs22I7U 密码：wdv0 运行traindata.py：生成trainImage文件夹，存放训练图片；生成trainImageXML文件夹，存放训练图片xml标签；生成validateImage文件夹，存放验证集图片；生成validateImageXML文件夹，存放验证集图片的xml标签。 运行trans.py，生成trainImageLabelTxt文件夹，存放训练图片通过xml标签转化得到的txt文件（若在训练过程提示txt文件找不到，则把此文件夹下的txt文件夹移动到trainImage文件夹）；生成validateImageLabelTxt文件夹，道理一样。 另外得到的trainImagePath.txt和validateImagePath.txt存放着训练图片和验证图片的路径。&gt; 下载好的python脚本一般不能立即用，根据运行python脚本出现的报错，应当对其进行相应的修改，例如： 12classes = ["cat"] #把这个标签改成你自己的数据集中标记的标签#那个sets看起来很奇怪，但是不用改也能用。python研究的少，暂时不知道具体原因 对darknet的配置和更改darknet本身并非完全开箱即用的图像识别训练框架，因此需要对它进行有针对性的配置和必要的更改。此处同样是根据《YOLO训练自己的数据集》以及其他几篇文章的指导和建议进行配置的，主要有以下几点： 对darknet的cfg/voc.data进行配置12345classes= 标签类别总数train = 填之前脚本生成的训练集文件列表trainImageId.txtvalid = 填之前脚本生成的验证集文件列表validateImagePath.txtnames = data/xxx.namesbackup = 存放训练结果模型的路径 在data文件夹下的names文件中，每行写一条标签名称 对要使用的神经网络版本yolo2-voc对应的配置文件yolo2-voc.cfg，应当更改以下几处： 将最后的[region]层神经网络的配置中的classes改为1（即标记类别的总数） 将最后一个[convolutional]卷积层中的filter改为30（filter的公式filters=(classes+ coords+ 1) (NUM) ，我的是(1+4+1) 5=30） 注：这里coords可以认为是坐标，设置的标记是一个方框则取4。NUM是神经网络的层数。filter公式的来源请参见国外开发者们的讨论：https://groups.google.com/forum/#!topic/darknet/B4rSpOo84yg 训练在yolo的官网下载预训练模型，地址：http://pjreddie.com/media/files/darknet53.conv.74 并执行训练命令： 1./darknet detector train cfg/voc.data cfg/yolov2-voc.cfg darknet53.conv.74 之后便开始了对神经网络的训练，在1000次训练之内，每100次就在backup文件夹中生成一次权重模型，在1000次训练以上，每10000次生成一次权重模型。本项目的最终训练次数达到了50000次。 上图为训练到500次左右时的结果截图 训练生成的模型文件 批量测试、评估以及需要对darknet进行的相应修改本人之前的笔记中曾经提到了使用单张图片测试，以及连接计算机摄像头、网络视频推流进行实时识别的命令，命令内容大致如下： 单张图片：1./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg 电脑摄像头：1./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights 手机摄像头（通过网络视频实时推流，使用工具为IP摄像头APP）： 1./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video 得到的效果大致如下： 实地场景： 网络图片： 但是，可以看出这样手动输入命令进行逐个测试的方法，在测试上文中提到的从标记数据集中拆分出来的有一定数量图片的验证集时十分地不友好。而且必须手工收集每次测试中得到的准确度信息、手工进行统计计算。 所以这里参考了CSDN上的另一篇文章《YOLOv3批量测试图片并保存在自定义文件夹下》以及简书上的一篇文章《Darknet 评估训练好的网络的性能》对darknet中的example文件夹下的detector.c文件中的代码进行更改，以便于进行批量测试、统计、评估模型在验证集上的准确度，并输出结果： 修改validate_detector_recall函数定义和调用为： 12void validate_detector_recall(char *datacfg, char *cfgfile, char *weightfile)validate_detector_recall(datacfg, cfg, weights); 修改validate_detector_recall的初始化代码 修改前：12list *plist = get_paths("data/voc.2007.test");char **paths = (char **)list_to_array(plist); 修改后：1234list *options = read_data_cfg(datacfg);char *valid_images = option_find_str(options, "valid", "/home/blean/VOC/validateImagePath.txt");list *plist = get_paths(valid_images);char **paths = (char **)list_to_array(plist); 修改结束后需要重新编译darknet主程序，命令如下 1make -j8 在完成上述修改后即可使用darknet的recall命令进行评估测试并输出结果 1./darknet detector recall cfg/voc.data cfg/yolov2-voc.cfg backup/yolov2-voc_50000.weights -out drowning_recall.txt 输出的结果如下： 1234567891011121314151617 Number Correct Total Rps/Img IOU Recall 0 1 1 RPs/Img: 23.00 IOU: 71.42% Recall:100.00% 1 2 2 RPs/Img: 19.00 IOU: 66.04% Recall:100.00% 2 3 3 RPs/Img: 31.00 IOU: 65.52% Recall:100.00% 3 4 4 RPs/Img: 31.75 IOU: 65.22% Recall:100.00% 4 5 5 RPs/Img: 29.40 IOU: 65.55% Recall:100.00% 5 6 6 RPs/Img: 29.67 IOU: 67.34% Recall:100.00% 6 6 7 RPs/Img: 32.00 IOU: 60.25% Recall:85.71% 7 7 8 RPs/Img: 35.12 IOU: 59.75% Recall:87.50% 8 8 9 RPs/Img: 33.11 IOU: 60.55% Recall:88.89% 9 8 10 RPs/Img: 33.20 IOU: 59.48% Recall:80.00%10 9 11 RPs/Img: 34.00 IOU: 59.27% Recall:81.82%11 10 12 RPs/Img: 33.00 IOU: 59.65% Recall:83.33%12 11 13 RPs/Img: 32.00 IOU: 60.33% Recall:84.62%13 12 14 RPs/Img: 30.64 IOU: 60.85% Recall:85.71%14 12 14 RPs/Img: 29.60 IOU: 60.85% Recall:85.71%15 13 15 RPs/Img: 29.62 IOU: 61.41% Recall:86.67% 其中各项参数的解释如下： Number表示处理到第几张图片。 Correct表示正确的识别出了多少bbox（即标记目标物体的方框）。这个值算出来的步骤是这样的，丢进网络一张图片，网络会预测出很多bbox，每个bbox都有其置信概率，概率大于threshold的bbox与实际的bbox，也就是labels中txt的内容计算IOU，找出IOU最大的bbox，如果这个最大值大于预设的IOU的threshold，那么correct加1。 Total表示实际有多少个bbox。 Rps/img表示平均每个图片会预测出来多少个bbox。 IOU： 这个是预测出的bbox和实际标注的bbox的交集 除以 他们的并集。显然，这个数值越大，说明预测的结果越好。 Recall召回率， 意思是检测出物体的个数 除以 标注的所有物体个数。通过代码我们也能看出来就是Correct除以Total的值。 可以从最后一条代表处理了全部验证集的统计结果看出，经过验证集的检验，训练得出的模型识别目标物体的总正确率大致在86%左右，可以说训练效果较为理想。 参考资料 YOLO-darknet官网https://pjreddie.com/darknet/yolo/ YOLO训练自己的数据集：https://blog.csdn.net/qq_34484472/article/details/73135354 YOLOv3批量测试图片并保存在自定义文件夹下：https://blog.csdn.net/mieleizhi0522/article/details/79989754 Darknet 评估训练好的网络的性能：https://blog.csdn.net/mieleizhi0522/article/details/79989754 Environment-Configuration-for-Yolo-darknet | NeXT （就是之前的那篇笔记）https://lmy98129.github.io/2018/02/20/Environment-Configuration-for-Yolo-darknet 最后，这是本站的第八篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 3]]></title>
    <url>%2F2018%2F06%2F28%2FNotes-About-Recent-Projects-3%2F</url>
    <content type="text"><![CDATA[The most stupid workmight be the most important one to cherish. 此处收录一些近期的项目笔记，这次真的是最近正在干的事情了。 没上锁的原因？是因为我从校会网络部光荣退休了吧。。。讲点别的项目。 贝壳计通讲师团项目访问方式： 扫描上方的小程序码 微信小程序搜索“贝壳计通讲师团” Github 项目简介 小程序主界面，更多预览请直接打开小程序或阅读本文后续内容 这是北京科技大学计算机与通信工程学院学生讲师团的官方小程序，管理方是北京科技大学计算机与通信工程学院学生讲师团，开发和维护方是北京科技大学计算机与通信工程学院的计算机科学与技术专业大二学生本人以及我的搭档fafnir，本人作为小程序的主要开发者之一，完成了本小程序的数据库结构设计、前端小程序开发、Node.js后端开发工作，并进行了多次版本迭代。搭档fafnir完成的工作主要为开发基于Python的Django Xadmin搭建的小程序后台管理网站。 项目创建的具体时间应与本博客的创建时间相差不多，开发时间长达3个月，上线时间已达1个月，经历两次大改。目前最新版本为v0.4.1。小程序前端基于腾讯微信小程序开发工具的原生组件，后端基于Node.js框架Express，数据库使用MySQL，数据库访问使用Node.js的MySQL库。其中，前端的通信模块以及后端的数据库访问模块均采用Promise异步编程封装。 注：我们计划在将本程序进行适当重构后，将本程序的前后端代码适时发布至GitHub。当前程序内的敏感信息较多，公布后风险较大故暂不考虑。 后续：前端代码已发布至Github 项目技术细节本项目的最初需求来源是：在2017秋季学期计通学院学生讲师团旧有线上预约平台网站开发维护人员即将毕业离校，讲师团负责人员联系辅导员提出了寻找学生进行下一代线上辅导预约平台的开发和维护工作的需求，最终确定采用小程序的形式进行开发，并招募了开发人员。原定计划为寒假一个多月时间内完成开发任务，但由于人员技术水平有限，以及在开发过程中遇到的种种挫折，我们前后花费了将近3个月的时间，经历两次大改才将目前接近成品的版本v0.4.1付诸上线使用。 项目第一版 第一版小程序主界面，更多预览请阅读本文后续内容 项目的第一版完成了基本的需求分析、技术选型、数据库表设计、设备部署以及初步的技术实现等工作。其中需求分析与数据库表设计均由我来完成，并根据MySQL的通行命名规范，编写了本项目的第一份需求分析以及数据库表结构稿件。出于安全考虑，不在此处公布数据库各表的具体字段。由于我们与需求方之间初期的沟通较少，导致我们对于需求方的理解有一定的偏差，但根据我们之后的需求更改情况，可以看出大方向上是无误的。 需求分析我们在第一版设计时的具体需求（大部分为开发方在开发过程中，帮助需求方总结的需求）为： 小程序前端搭载学生端和讲师端两套代码，在用户登录过程中，使用微信提供的用户id查询数据库结果决定显示哪一界面，普通用户默认为学生用户。（虽然在历次提交审查中，微信方面的小程序测试人员并未对此提出任何疑问，但可以说确实是一种逃避审查的潜在手段，希望微信方面改进审查机制加以防范） 讲师发布课程内容，包括课程名称、日期、时间、地点、人数上限、备注等，其中人数上限、地点、备注为选填项。（早期版本中未考虑到人数上限问题，是后期加入的字段） 学生可以进入课程列表对讲师发布的课程进行预约或取消预约，其中达到人数上限、课程取消等情况下提示学生不得预约，课程列表发生的更改将在触发课程列表本身更改的同时，实时触发首页列表的刷新。（课程超时不得预约的功能较为复杂，也是后期加入的字段） 学生端以及讲师端首页均显示自己已预约的课程或已发布的课程情况，以及对课程进行相应的编辑操作：学生可以取消课程预约，讲师可以取消、删除、编辑课程，讲师的编辑操作也将触发其首页列表的刷新。 在课程列表以及首页中点击单个课程卡片可以查看课程详情。 “我的”页面中普通学生用户可以申请成为讲师，需提交真实姓名以及电话号码，通过后台管理网站的管理员核对后通过认证成为讲师。 后台管理网站应该能自由编辑、删除任何讲师发布的课程，应在开发后期对讲师每月授课情况统计，并进行展示（截至文章发布，授课情况统计功能暂未全部完成）。 数据库表根据以上的需求分析，大致能够分成以下的数据库表（具体字段不予公布） 用户预约总表 讲师课程列表 管理员认证讲师资格列表 管理员账户列表 程序功能从这些数据库表可以分析得出的功能表如下： 用户 查看当前可预约课程列表 提交预约 取消预约 查看自己当前的预约 提交讲师认证申请 讲师 查看当前已发布课程以及预约情况（预约人数） 提交课程 取消课程 修改课程 管理员 查看并编辑当前所有课程以及预约 操作讲师认证申请 查看当前所有讲师每月的授课情况 技术选型项目第一版的技术选型由fafnir完成，总体情况是采用了腾讯云提供的wafer小程序一站式解决方案，具体来说应该是wafer1，选择的理由是相比于wafer2中服务器无法取得完整访问权的形式，wafer1可以直接在服务器上部署后台管理网站。（虽然后来的经费结算显示，使用wafer2方案可能会更经济一些，而且截至文章发布，腾讯云已经不再主推wafer1，并撤换下了多个wafer小程序一站式解决方案的访问入口，当前能够全新购买的解决方案的只剩下基于开发者工具的wafer2方案，两者之间的不同以及基本架构可以看这里）当时的具体项目选型如下： 技术模块 采用技术 备注 小程序前端 wafer小程序一站式解决方案小程序demo 项目地址，与后端通信采用的是wafer自带的腾讯云SDK，采用的是基于socket的全双工信道通信，部分界面元素直接复用了demo中的界面 服务器后端 wafer小程序站式解决方案Node.js后端demo 项目地址，部署于wafer一站式解决方案的业务服务器上，基于Node.js框架Express，与前端通信采用的同样是wafer自带的腾讯云SDK，采用的是基于socket的全双工信道通信，前后端的会话通信可以直接通过API地址进行，但是信道通信必须经过一站式解决方案的信道服务器进行（请记住这一点，在之后的版本迭代中就发生了问题），与数据库通信采用的是Node.js的MySQL库的线程池模式（此时并未对其进行任何的封装） 数据库 MySQL 5.6 部署于wafer一站式解决方案的云数据库上，通过wafer一站式解决方案的信道服务器进行远程访问 后台管理网站 基于Python的Django Xadmin 部署于wafer一站式解决方案的业务服务器上，与后端访问操作同一数据库 开发难点及笔记JavaScript的异步单线程特性由于对Node.js乃至JavaScript的异步单线程的特性，尤其是回调函数的理解还较为浅薄（可能也是在之前并未直接接触过前后端通信以及数据库通信的原因造成的。是的我之前的工作真的就是改改开源PHP项目的代码，没怎么认真研读过代码以及文档），所以在设计后端服务器与数据库通信模块时，仍然将思路停留在C/C++之类的线性思路上，例如有如下代码：12345678910var res = 'nothing';connection.query("USE "+database);connection.query('SELECT * FROM '+databaseForm, function (error, results, fields) &#123; if (error) throw error; if (results) &#123; res = results; console.log(res); &#125;&#125;);console.log(res); 其执行结果按照我的想象应该是：123nothing(查询的结果)(查询的结果) 结果是：123nothing(查询的结果)nothing 相当于查询结果并未真正传给变量res，若我想在第二个console.log(res);的位置进行查询结果向前端的回传，则回传的结果将仍是nothing。具体原因？简单来说就是JavaScript作为一种在浏览器引擎中工作的语言，在大多数情况下只能单线程运行，此时只能先将一些阻塞整个线程运行的工作进行挂起处理（就例如前后端通信，若后端在某次查询时迟迟不回传，不应该将这个查询之外的其他工作全部停止，选择等待查询结果的到来，而是将其挂起，当后端查询结果回传时，再回过头来进行查询结果的处理等与查询结果相关的工作），这个挂起处理就是通过回调函数callback实现的，也就是上面第二个connection.query中的function函数。因此，正确的实现应该是:1234567connection.query("USE "+database);connection.query('SELECT * FROM '+databaseForm, function (error, results, fields) &#123; if (error) throw error; if (results) &#123; TunnelService.emit(tunnelId, messageId, results); //直接在回调函数中进行回传 &#125;&#125;); Node.js中MySQL库的单语句查询、参数化查询等防注入机制后端服务器与MySQL通信使用的库为Node.js通用的MySQL库，安装命令为npm install mysql。根据我们后期的开发经验，事实上不应该使用该库而应该使用更加专业的ORM框架（ORM的定义）来方便我们对数据库操作命令进行js化的直接编写，而非只用SQL语句进行直接查询，虽然学习SQL语句也不是一件坏事。是的，本项目基本上用到的也就是增删改查、左联右联内联、COUNT计数、建表建库等基本SQL语句。 但是，问题在于该MySQL库本身的最佳实践中提到了其参数化查询、单语句查询的等防注入攻击的机制。其中参数化查询并非开发难点，此处可以略过，但是其默认单语句查询的功能实在是增加了开发难度。也就是必须在单条SQL语句当中完成所有查询，不允许进行多次查询后通过中间变量进行合并得到最终结果。这一设定的出发点是好的，万一API接口被传入一些带“;”的参数，且允许多语句查询，我们并不知道这些参数是否会导致SQL注入攻击的发生。 诚然，大多数查询通过本人的努力都实现了单语句查询的效果，虽然SQL语句看起来又臭又长，外人难以读懂（这也是我反思之后决定日后学习ORM的主要原因之一）。但是若出现某些根据上一次查询结果进行分支操作的情况，单语句查询就显得十分吃力了。例如，我们遇到了这一种情况： 如果因SSL证书问题无法查看上方的流程图，可以使用其他非Chrome内核的浏览器或使用桌面端浏览器阅读本文 所以在项目的第一版中，我们采用了Node.js的async库中的waterfall进行同步顺序编程，之后的版本我发现了Promise是个好东西（虽然理解起来有难度）然后就把通信模块统统重写了个遍在MySQL通信模块中解决这一问题的一个库函数实例如下：也可以看出采用了参数化查询的防注入机制，以及MySQL的线程池。12345678910111213141516171819202122232425262728293031323334353637383940414243static mysqlReserveClassStu(tunnelId, messageId, openId, classId, nickName) &#123; var tasks = [function(callback) &#123; pool.getConnection(function(error,connection) &#123; connection.query("SELECT * FROM user_reserve WHERE class_id=? AND user_id=?", [classId, openId], function (error, results_1, fields) &#123; if (error) throw error; if (results_1) &#123; connection.release(); callback(error, results_1); &#125; &#125;); &#125;); &#125;, function(results_1, callback) &#123; if(results_1[0] == null)&#123; pool.getConnection(function(error,connection) &#123; connection.query("INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())", [openId,nickName,classId], function(error, results_2, fields) &#123; if(error) throw error; if(results_2) &#123; connection.release(); TunnelService.emit(tunnelId, messageId, results_2); callback(error); &#125; &#125;); &#125;); &#125; else &#123; pool.getConnection(function(error,connection) &#123; connection.query("UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?", [classId,openId], function(error,results_3, fields)&#123; if(error) throw error; if(results_3) &#123; connection.release(); TunnelService.emit(tunnelId, messageId, results_3); callback(error); &#125; &#125;) &#125;) &#125; &#125;]; async.waterfall(tasks, function(error, results) &#123; if(error) throw error; &#125;);&#125; 这个代码块确定没把数据库表的字段抖出来了吗。。。emmmm，还好吧。各位高抬贵手，高抬贵手。。。 前端、后端、数据库三者之间的时间不统一以及时间格式的处理问题这里由于我自己也记不大清楚当初的处理思路（尤其是小程序前端在处理过程中使用的“幻数”），很可能都是我无意识情况下的“瞎调试”的成果。这个说实话我是极其不提倡这么干的，虽然有的时候的确有用此处提供各模块的关键代码供大家参阅：服务器后端MySQL通信模块上的初始化操作，关键就是设置时区到正确的时间123456789101112131415process.env.TZ = 'Asia/Shanghai';var pool;class MysqlExecute&#123;static mysqlInit() &#123; pool = mysql.createPool(&#123; connectionLimit: 10, host : mysqlHost, user : mysqlUser, password : mysqlPassword, database : mysqlDatabase, timezone : process.env.TZ &#125;) &#125; 小程序前端的时间处理相关代码format，关键就是正则表达式+暴力剪切+暴力连接（其中用了微信开发者工具的默认小程序demo里面的util.js时间处理函数）12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667const utils = require('./util');var currentDate = utils.formatTime(new Date());var currentDateAnnual = new Date();var classContentStr;const timeFormat = (str) =&gt; &#123; for (var i = 0; i &lt; str.length; i++) &#123; var start = str[i].class_timestart; var end = str[i].class_timend; var date = new Date(str[i].class_date.slice(0, 10)); date = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; start = start.slice(0, 5) if (start.slice(0, 1) == "0") &#123; start = start.slice(1, 5) &#125; end = end.slice(0, 5) if (end.slice(0, 1) == "0") &#123; end = end.slice(1, 5) &#125; str[i].class_date = date; str[i].class_timestart = start; str[i].class_timend = end &#125; return str;&#125;const dateFormat = (options, that) =&gt; &#123; that.setData(&#123; dateIndex: currentDate, ateLimitStart: currentDate, &#125;); currentDateAnnual.setFullYear(currentDateAnnual.getFullYear() + 1); currentDateAnnual.setDate(currentDateAnnual.getDate() - 1); that.setData(&#123; dateLimitEnd: currentDateAnnual &#125;); if (options.class_content != null) &#123; classContentStr = JSON.parse(options.class_content); if (classContentStr.student_limit == '0') &#123; that.setData(&#123; studentLimit: '' &#125;) &#125; else &#123; that.setData(&#123; studentLimit: classContentStr.student_limit &#125;) &#125; classContentStr.class_date = classContentStr.class_date.replace("年", "-"); classContentStr.class_date = classContentStr.class_date.replace("月", "-"); classContentStr.class_date = classContentStr.class_date.replace("日", ""); that.setData(&#123; className: classContentStr.class_name, classIntro: classContentStr.class_intro, dateIndex: classContentStr.class_date, classPlace: classContentStr.class_place, timeEndIndex: classContentStr.class_timend, timeStartIndex: classContentStr.class_timestart, &#125;) &#125; return classContentStr;&#125;module.exports = &#123; timeFormat: timeFormat, dateFormat: dateFormat&#125; 看着相当的难受啊，这x一样的代码风格😂没毛病，（下一版）会改的会改的🙏（没错，之后的版本我直接把那个又臭又长的classContentStr给改了。。。） 12345var date = new Date(str[i].class_date.slice(0, 10)); //这里得到的结果格式应该类似于yyyy-mm-dddate = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; 想看幻数的同学看上面，我把它截取下来了。是这样的：月份数诡异地被我加了一个1，然后居然就对了。。。我也不知道这个到底是怎么一回事，在JavaScript里有什么奇异的原理导致了这个结果，有人知道的话可以告诉我吗? 后续：我查到了，因为getMonth()是以数组形式来存储月份的，下标是0~11 人数上限的数据格式转换，以及人数已满等状态下阻止用户预约 你还别说，我一边写这个笔记，一边还在最新版本的小程序里发现各种蜜汁有趣的bug呢😂 人数上限作为讲师发布课程时的一个选填项，可以说是本项目数据处理的一个难点，其处理方式在本项目中也起到了一种模范的形式难点在于：人数上限分为两种情况：“无上限”和存在数字上限，我们只能利用0这个数字来表示“无上限”，因为基本上不可能开设一个人也没有的课程，至少的人数上限也应该是1。但是反过来说，用户在填写表单时不可能特别将无上限填写为0，这在用户体验上只有留空才更加符合一般的表单填写习惯。 所以我们在用户点击上传按钮触发的函数中就将人数上限进行处理转换：1234567var studentLimitFormat;if(this.data.studentLimit == '')&#123; studentLimitFormat = '0';&#125; else &#123; studentLimitFormat = this.data.studentLimit;&#125;//之后传到后端的就是studentLimitFormat 并在从后端回传的过程中也一样进行相应的处理，这里以课程内容页代码为例：123456789if(classContentStr.student_limit == '0')&#123; this.setData(&#123; studentLimit: '无上限' &#125;)&#125; else &#123; this.setData(&#123; studentLimit: classContentStr.student_limit &#125;)&#125; 同时，也应当在人数已满时阻止用户预约。在微信小程序中，我们使用&lt;block wx:if&gt;的wxml标签形式进行分类，通过条件判断来决定显示何种按钮，并只在“预约”和“取消预约”按钮上添加相应的函数钩子，这里以课程列表的上传按钮为例：1234567891011121314151617181920&lt;block wx:if="&#123;&#123;item.student_sum &gt;= item.student_limit &amp;&amp; item.student_limit &gt; 0&#125;&#125;"&gt; &lt;view class="reserve-button" data-content='&#123;&#123;item&#125;&#125;'&gt; 人数已满 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.status == 0&#125;&#125;"&gt; &lt;view class="reserve-button" data-content='&#123;&#123;item&#125;&#125;'&gt; 已取消 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.reserve_status == null || item.reserve_status != 1&#125;&#125;"&gt; &lt;view class="reserve-button" bindtap="bindReserve" data-content='&#123;&#123;item&#125;&#125;'&gt; 预约 &lt;/view&gt;&lt;/block&gt;&lt;block wx:elif="&#123;&#123;item.reserve_status == 1&#125;&#125;"&gt; &lt;view class="reserve-button" bindtap="bindCancelReserve" data-content='&#123;&#123;item&#125;&#125;'&gt; 取消预约 &lt;/view&gt;&lt;/block&gt; 当然，我们也在后端数据库表的设计中，将讲师课程表的人数上限字段的默认值设置为0。这算是最后一道防线吧，防止其他非法输入对数据的影响。 提交表单前的各种格式检查是的，以人数上限的数据上传前进行处理为范本，我们普遍采用了if() { return; }的形式对非法输入进行检查，而这些非法输入的多样性之丰富，远远超出了我们的想象。例如：有时间的非法输入，直接用正则表达式替换掉时间中的冒号+暴力的数字比较（new Date说实话多此一举了）：12345678910if(new Date(this.data.timeStartIndex.replace(/:/g, "")) &gt; new Date(this.data.timeEndIndex.replace(/:/g, "")))&#123; wx.showModal(&#123; title: '提示', content: '开始时间应小于结束时间', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 有人数上限输入非数字时，调用isNaN()函数的同时防止将留空代表“无上限”也拦截：12345678910if (isNaN(this.data.studentLimit) &amp;&amp; !(this.data.studentLimit == undefined)) &#123; wx.showModal(&#123; title: '提示', content: '人数上限应输入数字', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 甚至对是否产生了无效的预约时间也进行了合法性检查：12345678910if ((currentDate &gt; selectedDate) || ((currentDate == selectedDate) &amp;&amp; (currentTime &gt; selectedTime)) &#123; wx.showModal(&#123; title: '提示', content: '预约时间应大于当前时间', showCancel: false, confirmColor: '#17abe3', confirmText: '好的' &#125;) return;&#125; 我们在合法性检查上花费了大量的时间，但也只能够对非法情况进行枚举性质的检测，若有一些我们不了解的业界最佳实践，欢迎联系我们探讨这一问题。 程序测试程序测试确实是开发过程当中的重要一环，由于团队资源有限，且微信账号确实具有不可模拟性，所以我们在不足以拿到足够的微信测试账号以及测试机时，借助微信开发者工具和自己的手机号，建立了一个仅有两个核心测试账号、一台安卓测试机的测试体系（后期在发现iOS独有bug时，我们也找了临时的iPhone测试机和测试微信账号）。 两个测试账号一个默认为普通学生用户，另一个通过后台管理网站通过讲师认证注册为讲师（在后台管理网站还未部署时，其实是通过手工向数据库表加入记录实现的），两号均在微信公众平台上注册为开发者 一般情况下，在PC端微信开发者工具上登录其中一个用户，手机端也登录这一用户，以测试学生端或讲师端在开发者工具的模拟器和实机上效果是否一致，也可以通过远程调试定位实机上的bug 若想测试讲师端与学生端的数据互动效果，可以在开发者工具登录一个用户，另一个用户在手机上通过微信最新版本的“切换用户”功能登录小程序 若想测试多个教师或多个学生产生数据的效果，可以通过后台管理网站同时认证讲师或取消讲师认证来实现身份上的同一性。 若想在临时的iPhone测试机上进行远程调试，记得先将该机的测试微信号加入开发者列表，如此方能远程调试成功，测试结束后记得再删除即可。 小程序最终界面UI设计上大量采用了腾讯云一站式小程序解决方案小程序demo的配色和界面元素。（其实就是没精力去设计UI啦。。。）基本设计思想更偏向WP式的平面风格 第一版小程序主界面（此时小程序名称还没改） 第一版小程序主界面（无预约时显示的欢迎+提示语） 第一版小程序课程列表 第一版小程序讲师端主界面 第一版小程序讲师端编辑课程界面 第一版小程序“我的”页面 项目第二版项目第二版的迭代原因是十分偶然的。由于微信官方对于小程序用户登录API的调整影响了wafer1一站式解决方案中的腾讯云小程序SDK以及Node.js服务器端SDK通过信道服务器对用户身份进行认证的正常操作进行，导致了SDK提供的信道全双工通信对于新注册用户不再可用，最终使小程序的大多数功能处于不可用状态。（据悉，wafer2的SDK信道登录方式暂未受到影响，估计是腾讯方面在wafer1逐渐下架的情况下忽视了使用wafer1的老用户，测试不全面而导致这一情况发生） 为了解决这一重大bug，我们团队仔细研读了微信官方的登录API调整公告以及腾讯云SDK文档，最终采用了“添加首次登录用户认证界面+全面弃用信道通信方式并采用原生通信方式全面重写”的改进方案。值得一提的是，在重写过程中我们着重采用了JavaScript中的异步Promise编程，对小程序前端通信模块、后端服务器MySQL通信模块进行封装重写。在开发过程中，本人收获了更多的JS异步编程经验，并对Promise为代表的异步编程解决方案有了更加深刻的理解 由于第二版着重于bug的修复和代码的重写，并未对UI界面设计做出太多调整，所以此处不再展示小程序主界面截图。若想知道第一版与最新版UI变化为何如此之大，请继续往下阅读，感谢您的理解！ 开发难点及笔记微信登录API调整后小程序前端后端相应的修复解决方案根据微信官方的说法，若想像之前那样获得完备的用户基本信息: 必须使用&lt;button&gt;组件，并将open-type指定为getUserInfo类型，用户允许授权后，可获取用户基本信息。 而另一种使用&lt;open-data&gt;组件展示用户信息的方式，就真的只有展示功能了。。。可能也是我太菜，根本没办法在JS获取到组件内部加载出来的用户信息。 所以就相当于只能让用户点击一次按钮来完成整个用户信息获取的工作。根据我们当初设计的数据库表结构，用户信息，尤其是其唯一标识码openId，在本项目中起到了相当关键的作用，若不能获取这些信息，则根本无法正常使用小程序的各项基本功能，所以我们在小程序的首页设计了一个遮罩层，若未进行用户信息授权的话，用户看见的只有遮罩层上的提示和用户授权登录的按钮。 我们具体的实现结果如下所示:wxml代码：12345678910111213141516&lt;block wx:if="&#123;&#123;!hasUserInfo&#125;&#125;" &gt; &lt;view class="auth-page"&gt; &lt;view class="auth-page-note"&gt; &lt;image src="../../images/reserve-hl.png"&gt;&lt;/image&gt; &lt;text&gt;请允许微信授权登录后\n继续使用小程序&lt;/text&gt; &lt;/view&gt; &lt;view class="auth-page-button"&gt; &lt;button wx:if="&#123;&#123;canIUse&#125;&#125;" open-type="getUserInfo" bindgetuserinfo="bindGetUserInfo"&gt; 授权登录 &lt;/button&gt; &lt;view class="auth-page-uncomp-note" wx:else&gt; 不支持授权登录，请升级微信版本 &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/block&gt; JS代码（index页面内的钩子函数）：12345678910111213141516171819202122232425bindGetUserInfo: function (e) &#123; if(e.detail.userInfo)&#123; var userInfo = e.detail.userInfo; console.log('用户授权：', userInfo); wx.setStorageSync('nickName',userInfo.nickName); wx.setStorageSync('avatarUrl', userInfo.avatarUrl); auth.showAuthPage(this); wx.showToast(&#123; title: "正在登录", icon: "loading", duration: 1500, mask: true &#125;) //说实话有点蠢这里，设置了一个硬性的1.5s时间，主要是因为貌似有点bug， //我如果设置wx.showToast一直显示，然后在用户信息拿到后再调用wx.hideToast， //经常性失灵，很绝望。可能真的是只能在当前页面中的js调用。但是很奇怪的是，wx.stopPullDownRefresh就不用这么干。。。 &#125; else &#123; console.log('用户授权：拒绝'); &#125;&#125;, JS代码（上面调用的auth所在的auth.js）：1234567891011121314151617181920212223242526const showAuthPage = that =&gt; &#123; if(wx.getSetting) &#123; wx.getSetting(&#123; success: res =&gt; &#123; var auth = res.authSetting, nickName = wx.getStorageSync('nickName'), hasUserInfo; console.log("授权情况：", auth); if (auth['scope.userInfo'] &amp;&amp; nickName) hasUserInfo = true; else hasUserInfo = false; console.log("授权标记：", hasUserInfo); that.setData(&#123; hasUserInfo: hasUserInfo &#125;) &#125; &#125;) &#125;&#125;module.exports = &#123; showAuthPage: showAuthPage&#125; 感觉上小程序的底层应该也是像Vue、Angular、React那样写了一个有DOM更新之类功能的前端引擎，基本上hasUserInfo更新了之后，那个遮罩层直接就消失了，DOM更新的速度相当快。也有人吐槽小程序的JS风格就像Vue+React。。。 第二版小程序用户登录授权页面（请忽略那个远程调试用的黑框😂） 前端通信模块以及后端MySQL通信模块的重写和Promise封装有人说，你们不是又重新实现了用户信息获取了吗？为什么还是不能用原来的信道通信方式？而且再不济重新写一个socket类型的通信方式岂不美哉（可以实现全局广播，这样可以及时通知用户是否有数据发生了更改）？ emmmm，技术菜，只是主要原因之一。（我承认我确实还不会写socket。。。） 关键是那个腾讯云SDK它就是用原来的登录方式（划重点）获取用户信息的啊，现在微信方面彻头彻尾地改了，你不去重写它，还有其他办法吗？ 第一步，先别急着把采用信道通信的代码全删了，至少通信时数据的格式你得看看吧。 然后，我确实菜，所以只能在前端通信模块乖乖地上原生wx.request请求了。。。真的，我就觉得这就是AJAX啊。首先还是先写一个简单的post函数，把wx.request定制化封装一下。 123456789101112131415161718const post = (obj) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; wx.request(&#123; url: config.service.testUrl, data: obj, success: res =&gt; &#123; if(res.data.results) &#123; resolve(res.data.results); &#125; else &#123; reject(res.data.error); &#125; &#125;, error: error =&gt; &#123; reject('网络出错'); &#125; &#125;); &#125;);&#125; 为什么要用promise对wx.request进行封装呢？理由很简单，依然是我们之前提到的JavaScript的单线程特性，需要使用回调函数callback()对一些可能阻塞整个JS代码执行的操作进行封装，让它们先挂起，让代码先继续执行下去，等需要进行这些操作的时候再回过头来执行——这就是异步非阻塞的编程模式。而大部分可以调用的函数都提供了回调的使用方法，以及你自己定义的函数也可以提供回调。 回调作为一种异步编程的解决方法，看起来很美好。但如果在这样的一种场景下你估计就笑不出来了： 例如，你向后端的一个API请求一个数据。好，数据拿到了，现在你要根据这个数据再去请求后端的另一个API的数据……如此下去，你请求了3个API，OK，你终于拿到了想要的最终数据，然后你还要将这个数据处理一下才能展示到界面里面 这样的话，你写的代码大概像这样： 1234567891011121314151617wx.request(&#123; //... success: res =&gt; &#123; wx.request(&#123; //... success: res =&gt; &#123; //... wx.request(&#123; //... success: res =&gt; &#123; //format your final data. &#125; &#125;) &#125; &#125;) &#125;&#125;) 如果再多几次回调函数的嵌套，估计你自己看这代码也差不多要阵亡了。没错，这就是所谓的回调地狱。后端与MySQL之类的数据库通信也同理，你输入了一条SQL语句的结果是下一条SQL语句的内容…… 那么除了疯狂地筑起一个回调金字塔之外，还有什么别的办法能够解决异步非阻塞编程问题呢？Promise就是其中之一。当然我之前用的async也是一种，但是那个写起来说实话更加别扭，至少Promise允许你用封装函数的方式进行编程，显然比写一些蜜汁有趣的函数数组正常多了。 好了，我之前提到了我用Promise封装了一个post函数，现在我就展示一个使用Promise解决异步问题的实例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102const initUserInfo = (that) =&gt; &#123; wx.login(&#123; success: res =&gt; &#123; if(res.code) &#123; console.log('获取用户登录凭证：', res.code); post(&#123; 'msgType': 'wxAuth', "code": res.code &#125;).then(res =&gt; &#123; console.log("收到消息：", res); getApp().data.openId = res; return post(&#123; 'msgType': 'checkIsTeachAuth', 'openId': getApp().data.openId &#125;) &#125;).then(res =&gt; &#123; console.log("收到消息：", res); if (res.isTeachAuth == true) &#123; getApp().data.isTeachmodeGlobal = 2; getApp().data.teacherRealName = res.realName; getApp().data.teacherAuthId = res.teacherId; getApp().data.teachAuthStatus = res.status; that.setData(&#123; isTeachMode: 2 &#125;) return post(&#123; 'msgType': 'getClassDataTeach', 'openId': getApp().data.openId &#125;) &#125; else &#123; getApp().data.isTeachmodeGlobal = 1; getApp().data.teachAuthStatus = res.status; that.setData(&#123; isTeachMode: 1 &#125;) return post(&#123; 'msgType': 'getReservedClass', 'openId': getApp().data.openId &#125;) &#125; &#125;).then(res =&gt; &#123; console.log("收到消息：", res); if (getApp().data.isTeachmodeGlobal == 1)&#123; that.setData(&#123; reserveArray: format.timeFormat(res).reverse(), emptyNote: '', emptyIntro: '', emptyUserName: true &#125;) if (res[0] == null) &#123; that.setData(&#123; emptyNote: welcomeQuote, emptyIntro: userWelcomeIntro, emptyUserName: false &#125;) &#125; wx.stopPullDownRefresh(); &#125; else &#123; that.setData(&#123; classArray: format.timeFormat(res).reverse(), emptyNote: '', emptyIntro: '', emptyUserName: true &#125;) if (res[0] == null) &#123; that.setData(&#123; emptyNote: getApp().data.teacherRealName + " 欢迎！", emptyIntro: teacherWelcomeIntro, emptyUserName: false &#125;) &#125; wx.stopPullDownRefresh(); &#125; &#125;).catch(error =&gt; &#123; console.log('发生错误：', error); &#125;) &#125; else &#123; console.log('获取用户登录态失败：', res.errMsg); &#125; &#125; &#125;)&#125; 是不是超长无比。。。再联想一下刚才我演示的回调地狱，用回调不知道要套多少层了。。。而且一个post函数可以反复使用，因为其传入的参数只有一个obj，就是发送到后端的json数据包，除此之外其他的操作都可以快速的复用，并且从后端返回的数据结果也可以由Promise传到下一个.then函数中。 除了post之外，我也仿造了信道通信方式，搞了一个emit函数。信道通信方式其实更加地先进，它是将所有的信道监听函数在初始化页面的时候就规定好了，也就是说把所有接收到后端数据之后的success操作都先写好了，之后再到需要向后端服务器发送数据的地方调用emit函数，这样也更加地灵活，发送数据时只管输入数据的格式和内容就OK了。 但是，本项目基本上除了用户在初始化数据或表单时需要将后端返回的数据进行存储和展示操作外，其他的通信操作基本上属于更新数据的范畴，也就是后端返回数据更新成功的结果后，只需调用一下数据刷新函数让服务器将更新好的数据回传即可。既然emit函数的功能如此确定，我也就直接将它封装好了，当然也得用用Promise了，既然都写好了，再多写个回调版本的函数就浪费了： 12345678910111213141516171819202122const emit = (obj,that) =&gt; &#123; post(obj).then(res =&gt; &#123; console.log('收到消息：', res); if (getApp().data.isTeachModeGlobal == 2) getApp().data.isTeachDataUpdated = true; else getApp().data.isStuDataUpdated = true; if (obj.msgType == 'reserveClass' || obj.msgType == 'editClass' || obj.msgType == 'classDataUpload') &#123; wx.showToast(&#123; icon: 'success', title: '数据上传成功', duration: 3000 &#125;) &#125; wx.startPullDownRefresh(&#123; success: that.onPullDownRefresh &#125;) &#125;).catch(error =&gt; &#123; console.log('发生错误：', error); &#125;)&#125; emit函数实际用起来也就是这样的，多传了一个this指针而已：123456req.emit(&#123; 'msgType': 'reserveClass', 'openId': getApp().data.openId, 'nickName': wx.getStorageSync('nickName'), 'classId': e.currentTarget.dataset.content.id&#125;,this); 既然后端MySQL通信模块也要Promise封装，那么肯定也是要先定义一个用Promise封装的函数12345678910111213static queryProm(sql, params) &#123; return new Promise((resolve, reject) =&gt; &#123; pool.getConnection((error,connection) =&gt; &#123; if(error) &#123; reject(error); throw error; &#125; connection.query(sql, params, (error, results, fields) =&gt; &#123; if(results) &#123; resolve(results); connection.release(); &#125; &#125;) &#125;) &#125;)&#125; 当然，我后来也发现其实大部分的操作其实都只需要一步回调就能解决问题了，所以我也写了一个回调版本的1234567891011static query(sql, params, callback) &#123; pool.getConnection((error,connection) =&gt; &#123; connection.query(sql, params, (error, results, fields) =&gt; &#123; if (error) throw error; if (results) &#123; callback(error, results); connection.release(); &#125; &#125;) &#125;) &#125; 然后这里也有一个比较模棱两可的经验，就是前端传到后端的json数据包内定义了msgType，可以在传入后端的地址是同一个时，根据msgType消息的类型进行不同的操作。具体操作在后端是怎样分类的，我这里用了比较原始的switch-case语句，但是说实话，这样会造成代码整体的可读性下降。因为消息类型一多，全挤在一层switch里面了，修改和查找都相当困难，这也是我需要改进的地方——代码的合理化、层次化和结构化。 最后用Promise的效果就是这样的（这个就是之前在项目第一版中用async写过的那个操作）：12345678910111213141516171819202122case 'reserveClass': sql.queryProm("SELECT * FROM user_reserve WHERE class_id=? AND user_id=?", [req.query.classId, req.query.openId] ).then(response =&gt; &#123; if(response[0] == null) return sql.queryProm( "INSERT INTO user_reserve (user_id,user_nickname,class_id,submission_date) VALUES(?,?,?,NOW())", [req.query.openId, req.query.nickName, req.query.classId] ); else return sql.queryProm( "UPDATE user_reserve SET status=1 WHERE class_id=? AND user_id=?", [req.query.classId, req.query.openId] ); &#125;).then(response =&gt; &#123; res.send(&#123;results: response&#125;); &#125;).catch(err =&gt; &#123; res.send(&#123;error: err&#125;); &#125;); //不要啥都写res，想啥呢 break; 这个“想啥呢”的注释是这样的，Express框架本身有一个回传数据功能的对象参数叫res，然后我写函数也习惯把数据本身叫res，这下好了，相当于我用回传的数据去调用他的成员函数send()，这一个数据哪儿来的send()函数啊？当然前端就没有收到任何回传的数据了。我纳闷了很久怎么Promise好好的就不能用了呢，最后登了服务器上去翻了翻log才发现问题，这也充分说明log在debug中的极端重要性。 当然用回调的效果是这样的： 12345678case 'cancelReserve': sql.query("UPDATE user_reserve SET status=0 WHERE class_id=? AND user_id=?",[req.query.classId, req.query.openId], (error, results) =&gt; &#123; if(error) res.send(&#123;error: error&#125;); else res.send(&#123;results: results&#125;); &#125;); break; 那么既然也在服务器后端弃用了信道通信所在的腾讯云SDK，我也采用了Express原生的路由方式来将请求定位到以上MySQL通信模块所在的文件上。 最终效果 别看我，我就是凑个小节数的，要不然就一个笔记太尴尬了。。。 本次版本迭代，通过添加用户授权登录界面、从底层用原生请求方式重写前端通信模块和后端MySQL通信模块，并使用Promise进行异步编程封装，基本上修复了信道通信因登录API调整而无法使用，导致整个程序无法正常运行的bug。 项目第三版 小程序第三版主界面，更多预览请直接打开小程序或阅读本文后续内容 项目第三版的迭代原因是需求方提议加入普通学生用户端也能够发起一对一辅导预约，然后讲师能够对此进行接单的“辅导预约”功能。我们开发方也趁着本次迭代的机会，对小程序的前端界面UI进行了大范围的重写，从而能够彻底弃用原先大范围采用腾讯云一站式小程序解决方案小程序demo的配色和界面元素的旧UI。 在此特别感谢Jason Gao同学以及他的“有通知”小程序对本项目UI重写提供的设计参考和技术支持！ 在新UI的开发过程中的技术难点在于： 取消了微信小程序的顶部、底部菜单栏后，小程序界面对于不同尺寸以及刘海屏手机的适配； 取消了底部菜单栏后，自行开发的底部菜单栏的路由结构问题； 取消了顶部菜单栏后，下拉刷新、返回导航、页面标题等顶部菜单栏功能不再实用的情况下的自主开发。 tab标签式导航栏的实现 同时，我们也修复了众多之前两个版本未发现的、以及在本版本开发过程中遇到的逻辑功能上的bug，例如： 预约时间相对于当前时间已经过期的未采取过期处理； 未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况； 对于人数上限、备注等留空项目的前端数据处理不当； iOS系统下“我的页面”用户头像被背景图案覆盖的问题； 还有其他的一些细节小bug； 开发难点及笔记在谈UI开发之前，我首先得回答这个问题：为什么要隐藏顶部菜单栏以及底部菜单栏呢？ 理由有两个： 功能上的需要：主要是微信小程序自带的底部菜单栏定制性奇差，必须得每一个菜单项对应的路径、图标、颜色、文字，乃至菜单项的数量，全部都在app.json里写死了，而且样式清一色都是死板的文字/图标/文字+图标，无法进行更高级别的个性化定制。就像本项目这样加一个高度明显超出菜单栏本身的大大的加号按钮，或者加一点其他的特殊样式，用微信小程序自带的底部菜单栏都是无法实现的。同理，微信小程序自带的顶部菜单栏同样也无法像本项目这样放置一个可点击的刷新按钮。 设计上的需要：从本文中的小程序界面效果图可以看出，这种底色完全一致的、通透的视觉效果，明显区别于直接采用微信小程序自带方案的其他大多数小程序的界面，是十分夺人眼球的设计（虽然直接采用微信小程序自带方案也可以做得相当美观）。 UI难点之一：屏幕尺寸适配微信小程序事实上就是一种webview套壳应用的变体，这个是众所周知的事情了。所以不难联想到当使用微信小程序自带的顶部菜单栏时，小程序的wxml界面自上而下渲染的起点，应当是在顶部菜单栏的下方的，就像一般的带标题栏的安卓webview页面，都是顶部的元素帮助撑起了手机系统顶部的状态栏以及顶部的菜单栏在内的一个相当大的高度。如果隐藏了顶部菜单栏的话，就会出现wxml界面直接从状态栏下方开始渲染的情况，而且一般状态栏都是最顶层的，也就是说状态栏会遮挡一部分wxml内容。。。大概像下面这样： 在iPhone X上有刘海的话就更加尴尬了。。。 所以需要的就是将这一部分的位置空出来，尤其是对iPhone X的刘海要额外进行适配（后来在开发者工具中的测试我们也发现了iPhone 4/iPhone 5这一类小尺寸屏幕的手机也需要额外适配）。所以我们的思路就是动态定义包裹所有其他元素的&lt;view class=&quot;root&quot;&gt;的padding-topwxss属性。尽管wxss无法使用JS进行动态更改，wxml还是能用JS进行动态更改的。所以就想出了动态定义class属性的内容就OK了，代码如下——wxml代码：123&lt;view class="root &#123;&#123;isIpx?'root-ipx':''&#125;&#125; &#123;&#123;isIp4?'root-ip4':''&#125;&#125;"&gt; &lt;!-- content --&gt;&lt;/view&gt; JS代码：12345678910111213141516var that = this;wx.getSystemInfo(&#123; success: function(res) &#123; if(res.model == 'iPhone X')&#123; getApp().data.isIpx = true; that.setData(&#123; isIpx: getApp().data.isIpx &#125;) &#125; else if(res.model == 'iPhone 5' || res.model == 'iPhone 4')&#123; getApp().data.isIp4 = true; that.setData(&#123; isIp4: getApp().data.isIp4 &#125;) &#125; &#125;,&#125;) wxss代码：1234567.root-ip4 &#123; padding-top: 30rpx; &#125;.root-ipx &#123; padding-top: 60rpx; &#125; 但是在之后的测试中发现，一旦预约课程的表单变长，可以滚动起来了以后，状态栏底下会出现本来应该被遮罩了的表单。。这是因为padding-top只是把顶部元素下移了，状态栏本身是透明的，所以肯定无法遮罩滚动到顶部的表单。解决方法和上面是一样的，自己再定义一个&lt;view&gt;元素，用来遮挡状态栏底部的其他元素就OK了，同样要对特殊尺寸的屏幕做适配，此处就不再赘述了。 UI难点之二：自行开发的底部菜单栏的路由结构为什么要如此强调路由结构呢？因为你需要知道你当前用底部菜单栏打开的页面是哪一个。否则底部菜单栏如何将当前打开页面对应的按钮进行高亮或者其他处理，来对用户形成一种辅助的标识呢？我们在这里使用了一个相当讨巧的办法来解决这个问题： 我们并不删除底部菜单栏在app.json中的代码使之彻底消失，只是通过微信小程序API函数wx.hideTabBar对其进行隐藏，这样其基本的路由结构依然存在，无需另外写一个公共的路由代码。页面跳转可以使用wx.switchTab。然后由于自定义的底部菜单栏是重复出现在页面上的，准确来说应该是首页和“我的”页面上，所以我们采用了微信小程序的模板类型元素&lt;template&gt;来进行代码的复用：wxml代码的写法是：12345678910111213141516171819&lt;template name="tabbar"&gt; &lt;view class="tabbar-wrap"&gt; &lt;view class="tabbar-index" bindtap="tabbarRoute" data-index="0"&gt; &lt;image src="&#123;&#123;indexActive?'/images/index-hl.png':'/images/index.png'&#125;&#125;"&gt;&lt;/image&gt; &lt;view style="color: &#123;&#123;indexActive?'#17abe3':'#bfbfbf'&#125;&#125;"&gt; 首页 &lt;/view&gt; &lt;/view&gt; &lt;view class="tabbar-reserve"&gt; &lt;image src="/images/new-hl.png" bindtap="tabbarRoute" data-index="1" &gt;&lt;/image&gt; &lt;/view&gt; &lt;view class="tabbar-user" bindtap="tabbarRoute" data-index="2"&gt; &lt;image src="&#123;&#123;userpageActive?'/images/user-hl.png':'/images/user.png'&#125;&#125;"&gt;&lt;/image&gt; &lt;view style="color: &#123;&#123;userpageActive?'#17abe3':'#bfbfbf'&#125;&#125;"&gt; 我的 &lt;/view&gt; &lt;/view&gt; &lt;/view&gt;&lt;/template&gt; 在对应的页面中引用的方法也很简单123&lt;import src="/template/tabbar" /&gt; &lt;!-- content --&gt;&lt;template is="tabbar" data="&#123;&#123;...tabStatus&#125;&#125;"&gt;&lt;/template&gt; 其中，三点运算符表示传进tabStatus的全部子成员（这个tabStatus有两个成员：indexActive和userpageActive），也就意味着上面代码块里的&lt;template&gt;中的所有indexActive和userpageActive不用再写成tabStatus.indexActive和tabStatus.userpageActive了，很方便吧，这可是ES6的特性哦！wxss的代码也贴一下，这样也可以直接套用样式：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647.tabbar-wrap &#123; display: flex; flex-direction: row; justify-content: space-around; width: 100%; position: fixed; height: 90rpx; bottom: 0; padding-top: 20rpx; padding-bottom: 35rpx; border-top: .5px solid #cccccc; background-color: rgba(256,256,256,0.9);&#125;.tabbar-wrap view &#123; width: 30%; display: flex; flex-direction: column; justify-content: space-around;&#125;.tabbar-wrap .tabbar-reserve &#123; position:fixed; bottom:30rpx;&#125;.tabbar-wrap view image &#123; width: 60rpx; height: 60rpx; margin: 0 auto;&#125;.tabbar-wrap .tabbar-reserve image&#123; width: 115rpx; height: 115rpx; margin-bottom: 20rpx; background-color: #fff; border-radius: 50%;&#125;.tabbar-wrap view view &#123; font-size: 25rpx; width: 100%; text-align: center; margin-top: 1rpx; font-weight: bold;&#125; 以上操作的教程来源是这里。 UI难点之三：重写返回导航、页面标题和刷新组件既然隐藏了顶部菜单栏，可以说也相当于在打开新页面时也失去了微信小程序自动生成的标题和返回按钮，然后下拉刷新也别扭了很多（尤其是在iPhone X上，你下拉刷新的时候根本看不到那个刷新动画。。。），这就意味着以上功能全部都得自主开发。 我的解决方案也异常简单，返回导航直接使用微信小程序的API函数wx.navigateBack，刷新也不过是在图标上绑定钩子函数，这里的主要难点在于刷新动画的协调性。具体怎么说呢？wxss本质上就是CSS，刷新动画的一般实现都是一个圆形刷新图标的旋转，而这个旋转一般都是CSS的效果。但是若像本项目一样使用带箭头的圆环，则会出现一个很尴尬的情况：当你正在“加载数据”这一状态时，圆环是不停旋转的，而当“数据加载结束”时，圆环需要处于一个静止的状态。若将静止状态设置为一个固定的图片，例如说刷新图标的箭头处于图标的正12点方向，则你会发现，”加载数据”这一状态结束时，箭头并不一定处于正12点，而在切换到“数据加载结束”这一状态时，箭头突然就跳到了正12点方向。 可以先看看“有通知”小程序的刷新动画实现方法，基本上就是点击刷新后固定地转一圈，这样既避免了上述尴尬的情况，也可以让用户体验到类似于“转了一圈就加载了”的“快速加载”的观感。 那么我们是如何实现的呢？可以说是一次很成功的尝试吧：让“数据加载结束”这一静止状态不再是一张固定的图片，而是在下一次加载时箭头直接从之前停下的方向继续开始转动！这样给用户的体验就不再是十分突兀的，反而有一种很自然自然的流畅感和美感。 实现方法也很简单，设定好不同状态下的CSS属性即可，只不过需要JS在与后端通信的加载过程中向wxml里刷新图标的style=&quot;&quot;传入不同的变量，以启用或关闭不同的动画。 12345678910111213141516171819202122232425262728.line .title-wrap .refresh-button &#123; font-size: 45rpx !important; line-height: 90rpx; padding-left: 10rpx; padding-top: 15rpx; color: #6d6d72; animation: spin 800ms infinite linear; animation-play-state: paused;&#125;.line .title-wrap .refresh-button.active &#123; animation-play-state: running;&#125;@keyframes spin &#123; 0% &#123; transform: rotate(360deg); transform-origin: 60% 55%; -webkit-transform: rotate(360deg); -webkit-transform-origin: 60% 55%; &#125; 100% &#123; transform: rotate(0deg); transform-origin: 60% 55%; -webkit-transform: rotate(0deg); -webkit-transform-origin: 60% 55%; &#125;&#125; 可以看到这个animation-play-state相当关键，就是这一属性支持了我们的刷新开始和结束的自然切换。 哦对了，貌似还有页面标题没讲，这个其实就是自己添加标题写在相应的位置，如果需要动态标题则往wxml中添加变量。注意给返回、刷新之类的按钮留好位置即可。 UI难点之四：tab标签式导航栏的实现这个说实话网络上教程相当多，但是这里仍然有一些亮点，例如在高亮标签下的“下划线”。这并不是简单的用CSS的下划线属性实现的，而是使用了CSS的伪类概念。说实话，在后来其他项目的开发过程中，我才真正开始理解并有意识地使用起了伪类，给某一页面元素的正上方或正下方添加一些附属元素。 1234567891011121314&lt;view class="navbar"&gt; &lt;!-- tabbar标签式导航栏 --&gt; &lt;text wx:for="&#123;&#123;navArrayStu&#125;&#125;" data-index="&#123;&#123;index&#125;&#125;" class="item &#123;&#123;currentNavTab==index?'active':''&#125;&#125;" wx:key="unique" bindtap="bindNavbarTap"&gt; &#123;&#123;item&#125;&#125; &lt;/text&gt;&lt;/view&gt;&lt;block wx:if="&#123;&#123;currentNavTab==0&#125;&#125;"&gt; &lt;!-- 当currentNavTab==0时显示这里的内容 --&gt;&lt;/block&gt;&lt;block wx:if="&#123;&#123;currentNavTab==1&#125;&#125;"&gt; &lt;!-- 当currentNavTab==1时显示这里的内容 --&gt;&lt;/block&gt; 12345bindNavbarTap(e) &#123; this.setData(&#123; currentNavTab: e.currentTarget.dataset.index &#125;)&#125;, 123456789101112131415161718192021222324.navbar .item &#123; position: relative; text-align: center; line-height: 30rpx; font-size: 40rpx; font-weight: lighter;&#125;.navbar .item.active &#123; font-weight: bolder;&#125;/* 伪类的使用 */.navbar .item.active::after &#123; content: ""; display: block; position: absolute; bottom: -20rpx; left: 0; right: 0; height: 5rpx; background: #6d6d72;&#125; BUG解决之一：预约时间相对于当前时间已经过期的未采取过期处理过期处理说实话确实是个败笔，因为这个东西本来应该是后端完成的东西，我却非常不厚道的在小程序里面加入了这个功能（不是在批评某些“大前端”思想，但是这个确实后端来做会更好一点，毕竟数据量一大还不如后端处理好了再发给前端，某些过期数据的体积也可以适当压缩一下，况且我到现在都还没做分页，感觉药丸。。。）。而且这个过期处理确实挺重要的，在这种预约类小程序里面，所以我也在寻找更好的解决方案，希望（如果有坚持读到这里的）大佬能够联系我提供一些建议，不胜感激！ 我的想法是一拿到数据就交给某个工具函数去处理数据，处理完之后再返回数据。这里我直接把过期处理添加到了时间处理函数里面，具体工具函数如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859var curDate= utils.formatTime(new Date());var curDateFull = new Date();const timeFormat = (str, contentType) =&gt; &#123; for (var i = 0; i &lt; str.length; i++) &#123; if (contentType == 'class') &#123; var start = str[i].class_timestart; var end = str[i].class_timend; var date = new Date(str[i].class_date.slice(0, 10)); var itemDate = str[i].class_date; &#125; else if (contentType == 'course') &#123; var start = str[i].course_timestart; var end = str[i].course_timend; var date = new Date(str[i].course_date.slice(0, 10)); var itemDate = str[i].course_date; &#125; var curTime = curDateFull.toLocaleString('chinese', &#123; hour12: false &#125;).slice(10, 18).replace(/:/g, ""); var itemTime = start.replace(/:/g, ""); // 过期处理在这儿⬇️ // 如果该记录的日期本身就小于当前的日期，一定过期 // 如果该记录的日期与当前日期相同，但时间比当前时间要早，也一定过期 if((itemDate &lt; curDate) || ((itemDate == curDate) &amp;&amp; (curTime &gt; itemTime)) )&#123; str[i].overtime = 1; &#125; else &#123; str[i].overtime = 0; &#125; date = date.getFullYear() + "年" + (parseInt(date.getMonth()) + 1).toString() + "月" + date.getDate() + "日"; start = start.slice(0, 5) if (start.slice(0, 1) == "0") &#123; start = start.slice(1, 5) &#125; end = end.slice(0, 5) if (end.slice(0, 1) == "0") &#123; end = end.slice(1, 5) &#125; if (contentType == 'class') &#123; str[i].class_date = date; str[i].class_timestart = start; str[i].class_timend = end &#125; else if (contentType == 'course') &#123; str[i].course_date = date; str[i].course_timestart = start; str[i].course_timend = end &#125; &#125; console.log("时间处理后：", str); return str;&#125; BUG解决之二：未对辅导预约进行一对一绑定而造成的多个讲师抢单重复预约的情况“辅导预约”这个功能事实上也就是用户“课程预约”功能的一个翻转：讲师自由发布课程，多个用户预约一个讲师的课程，人数上限可以有也可以不设置。反之，用户自由发布辅导需求，多个讲师预约一个用户的课程，但是是一对一的课程，所以人数上限其实是1。但我这里没有再使用人数上限的功能了，而是采用了一个很清奇的绑定思路：多表左联合查询。 这个说实话也是个败笔😂（没错，包括上面那个在内，你在本文看到的所有bug解决的思路，都是些让你觉得很滑稽的解决方式，因为我当时是真的没办法快速找到一些最佳实践的。。。）正常情况下的思路应该是要去维护一个新的数据库字段，就是“是否已经有讲师预约”这样的一个标志字段。但是我这里的处理思路就很清奇，既然已经被讲师预约了的话，那是不是可以让用户的预约数据库表和讲师的接单数据库表进行一个左联合查询，然后如果某个字段联合查询后查询不到讲师的信息（例如昵称nickname之类的）就可以认为是未被讲师接单呢？反之是不是就可以被认为是已经被接单呢？这个清奇的思路事实上是很差劲的，因为这个涉及到一个查询效率的问题，联合查询总的来说肯定要比单表查询要慢很多，数据一多肯定影响性能，而且这样返回前台数据不可避免地泄露了讲师的信息。 当然，还是那句老话，安全起见，后端数据库表结构以及相应的SQL查询语句我是不可能公开的。所以这里就只有描述，没有代码了。 BUG解决之三：对于人数上限、备注等留空项目的前端数据处理不当这是个相当玄学的问题，什么叫“处理不当”呢？这涉及到用户体验与数据库管理之间的矛盾。用户当然希望这样的功能实现：在填写的时候，“人数上限”一栏留空，就代表人数上限为无上限，填入数字再表示有一个确定的上限，“备注”留空，就代表没有备注，填入备注就代表有一段备注。但是数据库管理的时候，一个字段的格式一般是固定的，我不可能为了存储“无上限”这一信息就让一个人数上限的字段同时支持整型数和字符或者别的什么，所以我只能无奈地让数字0代表无上限。同时，备注也可以存储为一个“NULL”来代表无备注。但是问题来了，当上传到后端时，前端至少需要对数据做一个预处理：把人数上限从undefined改成0，把备注从undefined改成NULL。我当时就考虑到这里，但是后来才发现：等等，那后端返回到前端呢？不是也得再经历一次相反的转换吗？ 大概就是这样一个逻辑：123456789101112131415161718192021if (classItem.student_limit == '0') &#123; this.setData(&#123; studentLimit: '无上限' &#125;)&#125; else &#123; this.setData(&#123; studentLimit: classItem.student_limit &#125;)&#125;if (classItem.student_sum == null) &#123; this.setData(&#123; studentSum: '0' &#125;)&#125; else &#123; this.setData(&#123; studentSum: classItem.student_sum &#125;)&#125;if (classItem.class_intro == "undefined") &#123; classItem.class_intro = "无";&#125; BUG解决之四：iOS系统下“我的页面”用户头像被背景图案覆盖的问题这个确实是个意想不到的BUG，在正式上线之后才发现Safari浏览器的渲染引擎存在着这样的bug：当一个具有transform的CSS属性的元素作为背景，而另外一个图片元素在其上方时，将不能够通过z-index属性来控制它们的层级关系。 之后的解决方案是从网上搜索得出的“以毒攻毒”法。是的，你没有看错，这个方法就是用transform来解决transform带来的问题的。 12345678910111213141516171819202122.avatar-img&#123; width: 140rpx; height: 140rpx; margin:50rpx auto 30rpx; background-color: #bfbfbf; border-radius: 50%; z-index: 99; border: 2px solid #fff; transform: translateZ(100rpx) /* 这个就是解决办法，“以毒攻毒”，简单粗暴 */&#125;.colored-top &#123; position: fixed; top: 0; left: -35rpx; width: 300%; background-color: #17abe3; height: 40%; z-index: 0; transform: rotate(8deg);&#125; 其他小BUG这里将会根据项目当前进度，及时更新一些其他的小BUG以及处理方式，也就相当于一些后续了~ 小程序最终界面 小程序第三版主界面 用户课程预约界面 用户辅导预约界面 讲师辅导接单界面 讲师辅导接单界面 讲师发布课程界面 “我的”界面 “关于”界面 结语 先。。。先容我吐槽一下吧。讲了挺多的，确实，一看发现上千行了😂（至少在markdown里面是这样，1.3k），我打算以后有机会的话拆成两篇文章发布。写的时间跨度一个月吧，因为各种事情，写写停停，甚至在某几次提笔重新开始继续写下去的时候，都发现自己都不知道之前到底写了什么，现在该写什么，写的初心是什么。都快被各种事情给搞忘了。所以说，要想系统性的总结一个东西，很难。况且我这个小程序至少前端代码是必须要放到GitHub上去的，要想再系统性地整理并分享一个东西，更难。 首要的，我还是非常感谢明导和郑导、感谢搭档王云程同学（@fafnir）、感谢提供过帮助的高亦非同学（Jason Gao）以及感谢计通学院学生讲师团，给予了我这次项目实战的宝贵机会。如果没有这次实战机会的话，估计我也很难得出如此系统的经验，并写出内容如此（冗长而）丰富的文章了吧。这是一次从零开始、至少是从需求开始的一次系统性的开发，虽然过程不免因为个人水平仍处于成长期、个人其他事务的干扰等各种原因有着种种波折起伏，但是所有的过程都是在从宏观到微观、从代码开发到客户沟通再到界面设计，几乎是全方位地锻炼我的各种能力。 所以，再次感谢在开发过程中给予了我各种帮助和指导的所有人，谢谢大家！ 最后，这是本站的第七篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者。本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Environment Configuration for Yolo-darknet]]></title>
    <url>%2F2018%2F02%2F20%2FEnvironment-Configuration-for-Yolo-darknet%2F</url>
    <content type="text"><![CDATA[Just do it.Just do something new and do it yourself. 记录一些关于yolo-darknet环境配置踩过的坑。能力有限，但求指点，欢迎交流。 搭建环境 OS: Ubuntu 16.04 LTS PC: ASUS K550J (EFI enable) GPU: GTX950M CPU: i5-4200H RAM: 4G DISK: 1T HDD (no SSD) 配置过程安装Ubuntu 用UltraISO把iso文件烧到你的U盘，进BIOS打开EFI引导，并选择EFI模式下的U盘为第一引导项 安装Ubuntu到一个空白分区（可以通过分区压缩获得，如果是全新电脑就直接开始分区了）： 注意根据提示划分那块bios efi的小分区，几十K即可； 划分swap交换分区，一般是你内存大小的3倍大，划在主分区后面； 剩下的划给主分区； 选择安装启动器到Windows使用的那个EFI启动分区。 进入分区界面前有几个选项要注意： 让你顺带安装更新的那个，不要勾选，更新的源大多自动匹配到了国外的，网速你懂的； 让你安装第三方闭源驱动和软件的，必须勾选，能解决很多开源驱动带来的问题。 安装，然后回到BIOS里面你会惊奇的发现出现了Ubuntu的EFI模式引导项（准确来说是两个，估计是那次我多搞了一个/boot）选择它为第一个。 成功进入Ubuntu 安装OpenCV安装OpenCV主要是为了使用外置摄像头进行图像采集。 GitHub上有自动安装版本 12sudo su git clone https://github.com/jayrambhia/Install-OpenCV/tree/master/Ubuntu 进入安装目录下的/2.4，提升*.sh文件的权限并执行 123sudo suchmod a+x *.sh./opencv2_4_10.sh 然后就会开始极其漫长的安装过程。 第一次安装到某个阶段的时候卡死，硬盘灯不闪，鼠标键盘没反应，我还以为安装失败强行重启了。然后又开始一遍，又卡死。我绝望了，但是冷静了下来，想了想——怕是自己电脑配置太渣。然后在安装前关闭了所有无关程序，唯独打开了系统监视器（即Windows下的任务管理器）。之后就非常惊奇地看到卡死的时候：内存+CPU，全部占用100%然后过了大概一个多小时，又全部降回去了，没过三分钟，又是内存飙到100%，CPU反倒正常了目测过了三个多小时，还是这个样子，倒是命令行每隔十几分钟跳一次字，系统时钟已经卡到了和实际时间存在了十分钟到半小时不等的时差，只有某几次命令行跳字的时候，内存占用下来了一点，系统时间一秒刷新了十几分钟最后一脸无奈地睡了。第二天打开笔记本盖子一看，装好了，老大一个success。 安装darknet打开终端123sudo sugit clone http://github.com/pjreddie/darknet.gitcd darknet 用gedit修改makefile文件令OPENCV=1然后在终端输入 1make -j8 安装NVIDIA官方GPU驱动首先禁用开源驱动 新建一个.conf文件 1sudo gedit /etc/modprobe.d/blacklist-nouveau.conf 写入以下内容12345blacklist nouveaublacklist lbm-nouveauoptions nouveau modeset=0alias nouveau offalias lbm-nouveau off 保存，重启后再打开终端，输入1lsmod | grep nouveau 无输出即禁用成功 正式开始安装NVIDIA官方驱动了我这里选择的是直接到系统的“软件和更新”里的“附加驱动”选择安装NVIDIA的专有驱动（不要管他是否显示tested，安装就是了） 等待安装成功后，重启打开终端，输入1nvidia-smi 正确显示你当前GPU的状况就OK了 安装CUDACUDA下载地址：https://developer.nvidia.com/cuda-downloads选项顺序是Linux-x86_64-Ubuntu-16.04-deb(local)1点多G，然后找个下载速度快的地方下了它，推荐迅雷等下载工具，虽然并没有加速，但毕竟服务器在境外，浏览器没法断点续传，连接一断就得重新下载。 然后把下载好的文件包拷到“/home/用户名/”目录下，在终端里面输入（注意你的deb文件名不一定是这个，这个是旧版的了） 123sudo dpkg -i cuda-repo-ubuntu1404-7-5-local_7.5-18_amd64.debsudo apt-get update sudo apt-get install cuda 安装完成后输入（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）12export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATHexport PATH=/usr/local/cuda-7.5/bin:$PATH 再次安装darknet再次用gedit打开makefile（注意你的cuda文件夹不一定是这个7.5的，这个是旧版的了）令开头GPU=1，同时令NVCC = /usr/local/cuda-7.5/bin/nvcc后保存退出然后在终端输入 1make -j8 测试darknet下载模型+测试模型到这儿下载*.weight格式的模型：http://pjreddie.com/darknet/yolo/ 终端切换到darknet的安装目录下示例命令如下：12./darknet detect cfg/yolo.cfg yolo.weight data/horses.jpg./darknet yolo test cfg/yolo-tiny.cfg yolo-tiny.weight 使用电脑/手机摄像头采集图像电脑摄像头：1./darknet detector demo cfg/voc.data cfg/tiny-yolo-voc.cfg weights/tiny-yolo-voc.weights 手机摄像头： 先在手机上安装好IP摄像头APP，配置好地址后，先用浏览器访问以确定视频源的路径(因此这里的地址是你配置并确定好视频源的地址)1./darknet detector demo data/coco.data yolo.cfg yolo.weights http://192.168.191.2:8080/video 参考资料 http://blog.csdn.net/samylee/article/details/51684856 http://blog.csdn.net/wjbwjbwjbwjb/article/details/52125475 http://blog.csdn.net/u014696921/article/details/65626751 http://blog.csdn.net/wuzuyu365/article/details/52469131 http://blog.csdn.net/zafir_410/article/details/73188228 http://blog.csdn.net/u013832707/article/details/53438574 https://www.cnblogs.com/jackchen-Net/p/7954138.html 最后，这是本站的第六篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Some Tips of Web Programming]]></title>
    <url>%2F2018%2F02%2F18%2FSome-Tips-of-Web-Programming%2F</url>
    <content type="text"><![CDATA[Why did you hate tips but not so now?‘Cause I don’t think it bad to become hateful. 作为一个新手，分享一些毫无技术含量的小技巧水平有限，如有错漏，多多包涵。 工具 · 关联性如果需要在线编辑服务器上的代码，你，或许有一百种方法把文件下载下来；或许有一百种方法把文件上传上去；或许有一百种方法让项目本地测试；或许有一百种方法让项目上线测试。 那么，作为一个（至少没我菜的）新手，如何做一些事情，让一些过程自动简化，哪怕只是那么一丁点呢？ 所以就到了让你使用的工具之间具有关联性的时候了。虽然我也没走版本控制、自动测试之类的正道（哭笑.jpg 好的好的，我知道了。以后会改的，以后会改的。。。 此处示例为：FileZila+Putty+VSCode+Chrome Dev Tool 在线编辑文件（自动上传下载） 将服务器上你需要在线编辑的文件格式的默认打开方式修改为VSCode（或其他你需要的编辑器） 重新打开你的FTP上传下载工具（例如FileZila），登录你的服务器，右键你想要编辑的文件，选择“编辑”（或其他的类似选项，试试便知） 此时你会发现，你的FTP工具自动使用你之前设定的编辑器，打开了这个文件。 你编辑了文件并按了保存。 你的FTP工具提醒你是否要上传该文件的最新版本（你甚至可以设置为无需提醒） 你点击了确定 完美 是不是不需要刻意下载和上传就完成了更改？原理就是FTP工具其实是将服务器上的文件存放在了一个临时文件夹中，供你设定好的编辑器打开它，与此同时，FTP工具顺带存下了文件在服务器上的地址当它发生了更改时，再询问你是否上传或者自动上传，自动按照之前保存的地址，回传并替换了它。 好处？能吃吗？……当，当然啦。 当你需要同时更改好几个不同位置的文件时： 你不需要记得哪些文件是之前改完传上去了的，哪些是还没改完的 你不需要记得这些乱糟糟的文件各自到底存放到了哪里 你只需要找到它，修改它，保存它。 一气呵成，和操作本地文件的逻辑高度一致了 在线备份项目（打包和下载） 使用Putty输入命令对项目文件进行zip打包或者数据导出 使用FileZila对打包好的文件批量下载 没了，你就备份好了呗（不放心的本地搭个环境再本地测试下有没有哪里不对的地方就是了 简单吗？简单。 但是大部分新手想备份下所有的东西，肯定会纠结这么一秒钟： “噢，我的SSH工具下载不了文件。” “唉，我的FTP工具下载文件夹的时间全花在打开路径上啦！” 用你的SSH工具打个包不就好了吗？ 所有人最初都有一个一无所知的时候。过去就好。 在线调试项目（开发者工具的应用）当你想测试一段JS（尤其是jQuery）代码的是否正确应用到相应元素、达到相应效果的时候当你想修改一下你Web项目的CSS属性同时想直接看到效果的时候当你想直接往在线的html页面内添加、修改代码并看到效果的时候当你想看到不同屏幕尺寸下、连续变化的窗口尺寸下响应式界面的变化是否符合预期的时候 开发者工具的重要性就凸显了，没错，按下那个你有些生疏的快捷键，打开它。 有时间多读读它的文档或教程——经过一些简单的配置，你不仅仅能够实时预览的你的更改，抓到看似平稳运行的表面下各种奇形怪状的bug，你甚至还能实时保存你的更改（例如Chrome Dev Tool的WorkSpace功能） 多了解各个选项卡的功能和含义，它们存在的背后都是一个又一个鲜活的需求：响应式页面、加载时间、性能优化、bug修复…… 出现错误和提示时别怕——它意味着你仍然有让你的项目继续优化的方向 低能预警：之后的就不大像Tips了……没错，我在强行凑字数（哭笑.jpg 知识 · 广谱性是的，我用了一个医药学的名词。只想说明：知识不仅仅在于积累的深度和广度而更在于应用的深度和广度 善于使用搜索引擎善于使用Ctrl+F 这段话永不过时。我举双手赞成。 但是，不能只局限于 这段代码好厉害Look, it works! 而是要多想一步： How does it work?Where does it work?How might it work better?Where might it work as well? 以及 Where and how can I find something good like this?Why not try something new? 广积粮。 方案 · 普适性当你还没有到达通过造轮子解决问题这种水平的时候，选择一个使用最广泛的解决方案是最直接、最经济、也是最恰当的。 选择的方案越小众、越特殊，在出现问题以及遇到疑惑时，你能够得到的帮助是越稀少的你的问题越专一，你能够获得对应解决方案的概率也是递减的而一个普适性的方案选择，不仅能够提升工作效率也能有益于你作为一个新手的学习 所以，当你还是一个新手的时候，选择一个普适性的解决方案是最佳的。 坑总会有的，但不是现在。避免踩坑，快速成长 最后，这是本站的第五篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
        <tag>understanding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 2]]></title>
    <url>%2F2018%2F02%2F17%2FNotes-About-Recent-Projects-2%2F</url>
    <content type="text"><![CDATA[Enter password here. Incorrect Password! No content to display! ]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes About Recent Projects 1]]></title>
    <url>%2F2018%2F02%2F15%2FNotes-About-Recent-Projects-1%2F</url>
    <content type="text"><![CDATA[Enter password here. Incorrect Password! No content to display! U2FsdGVkX1+SpDMcvZnNYcabifUhdQOW8WC46/tAoxt6A38fiPKN+VWckVEAtjvOv5YdksdLPvQQs2N3qd7nDnt5FVuwDMa2wVGDOWQt36KzjnRJ3pOxsbXlhQLMLhzVaTes1R6UzDpEsj3cPwKYb0qvJcCxJnLuSgo5kESirb4t9d/O2HFGriuthiAxP++9qFMK0IkC8MMEh/Q3p5GnAyH1wS8Ud8SQBY0hP/ARUc4hxk6omqhiRVJtYnP7N4ZcGG/V2R6IQH2StSg9C5L+WvMmMRXIRAZRzIq9HHijuRfC/aF3MjdvEnoZ/X4FhR/3b3wxRcvaWT75uaipF9Za9O/2LanMv5vSaptQOgqgrCkmxr2tNN3Z1hUnGpXqpoPuPPKYZufBnjW6tyJ6HwKgiouGlCPR2zovplZNe29WhaR8Ao94nK5VH80RzXQ8pdlgnY7oyr5nOSkWslclTAXmD6/YoVWvpVfmAoy2yGn33N1OKRbrptVZgNoS8rG57UL+1N5W8HuS89BhSFvhLRom/WIsOkeOmbopDeQIBpb+p5gjYhNnkdY7yMX/Ovq9dxjldqOcwsYYdcgAXpcsXcHOjxxC7zAz9O71tJWonqHs0TV5B2P2EdN9n65Jk9uQIHodLVve5vOLJr/pCO0N8ay2bR3ggFo5lxrNms74mlAhsvz9QijdFuQtpCZ5U7BTO2VX7MirJS4iG4EK0N1vgvlvqEUpJwutin20LkCUpZhYmB+p2cIY+zviyjAVSa3NR1OvWMJT6FgVtVl+4kFaMhu/MjjKaCVKCwxoE+o2eVtPWitnXTYA5CY8Qpdon3da1tnVf3As4onraQ0KOpaJ/rS+MpySEzVNZZgein/CHHakUGcnr7xsjVWhciMgTEt56YX0JABRiTLrc6zkF9tTOwDHt1u1KT+jV4t4hlgBQMvcusC4yRhC4r9dKkXxWfiw5RacAMwg/6Fmlow9WC7PyWNNGSX44V9+U/FV8GjGOrUV8xqA9PJRsMuBJ79c8hYFbHESed9EGJcqk23ubuW81UuWVw2CwLtd3jHMQSnQUI6XpH+RVmGsIzjh6nUhQeRtm+lWkIcq92XnvYQ7l2m6jsK0Ff2LiItEkrDUVQeZmVZ9sEx7ifyBcxjcHMu8lB42h+wMk52eQ0EfIZ6fGMdJWnUS+IeSfsDo+Fpx5iSj21ygeS/IEvo/lDNQT7TDLm9K57mh2yu0z6+4DqG46T4s16uBdO3o8eTyid/IoNX+ENZbhBCbLxTOVaKJUt02HdsgPg1uc9VhKT634xt0KpTH2enk3okK8KdjM34oy5LWvJ4Zy5JongWj7KkacYeTkr7vXzJSveorHT6YV4NSX/bsjfV2GHLu7/Mwk5SrRQizs2XdpH0TBxlDMxaylWy/+BOxUUA3Wdyt15nNkEwBDjZDhnLbAKjnIVbxU31JJUw1hzx+S6w+0YDmfUalJRVwvvQTOsG2Fz6CfIJ450fKn/MT0zEFluaSslswBNcpgtGjDPiksre94Tttaj0RW44PVt+VtxyVoQVAJHt04T8gf+VP5GiXlTyLDOh/8wFmjDE5CPRA7PlG2MfK8e9IX6Bp1GoTZrbpWwX17iSlDVFzpljWabOEZWJBUgwblmOAfPPbSWzJqsDhwdkDWlrE1TdPH0fsGjRHR14c63G01lkifcN/zFKJTWTrwLQikNe7VrLGHlvz/hbLnpuK7E1WuJ1nj2e+sdvni3NTbeRcTaYjf9CZwjqp2zfEc4NCig1TJIKUGccCg1wR2nAqSIM2NsrzBAfSaFwatu92KTPgZfPuDcTrKC0djHFAjj4GGwQp99MMAW9QbuDB54qDaVrTdfnzAxWEWv5RCaYWVLMlijXLuEEnZ7wsmSSXZ9v7nknbqWG+xYICwDtiN16v3Dhnk63KZqiyRUUEofmiChun7QF9nXQwZ3jCv7ikR6aJeotpD1g7JIp5kaypcrG78AbHGT+3cHgau5gOxiAn3vktXmzrafWVPmxf+yD+dX9Y3qr89FdEROfTPUTjIzk1e1eKAY1z1+60lfvOH8PRE9I8P1acZN81c76EZWS3Qx2QdJfV7KoewCACVIdPmKxii5SX+FT4pGiK7ZienN1cvKvlD9bwkVLxnd582VObssgONjWNwZwwihJsIAKdTEjmJaL5ozLA1qIkhei0+oKW43bt5gYoNJuzE/wEBbxavFVxgMQso+HUHfu+5xpVov1HW8KCYo1/hYiK/7t/ZIkFV1XG6CkS6udERIc1InPLazOMFcVeQtuNhseL+N8iyZgxgx+JcjWkFsFJo17nnlB8Q9+dhIDvtdBG5tweSMeroJAt4at7snUrTGfFy2chM4v8Yv96toyJ7x6Z3xbrcNHaSjUpQvfQRAN/kIsycnvbqdLlDmULxt7PYC9sljd+LHPzRYtD6B8HHEcFP1upKVrgVMP5iT2DIVVSyyJXQXLQpTb3XIUs7VFgkFxdnT+ie3OjlWlprX1brlXzpOCWtByxa4WgRsdMAT3gj1lkVVNmSy9NSFRg23LeOUbu4bJnOMLT7DPFjLVGuJzwzNNWUIcsCxU3UtYdCWp0Nsa+3pzKjuF4fficDpQY4RLRYc3/UI/WlSKTFIv81bYzK6waytOhAxg4ywA39BgILTcU5/S4roFtvXkaBwFe7jhBKWC5lj+nLwAFDJHpT9c+A0MF4cb60WVvru/eiEvnSFxPU8FUdgQIVlZNUP+nLSt/ipevOHMVGIuToR/gGgzFb2liUgq9sNF+JX/N6G805X73zj30KoLgG6v5KlxYI1H5t7H07VSajoFHdKg66lyZSTZaQ1y10Rz396GPHtlE488qY/qYTuRZuPhJpfn/jM2SUyPZRA8rU3/ILScgXuBibImUeXw8m46bNbuB832tnqGnduw2OOxaMW06AjRPTghXbjaDEZL549eOm6d0mVmFa2IJeoElmzXwYHSYdXZDwj5SPJS64CzxZnsjiAv23Y1Sy+XkQdVCZOGBjdvfBnSHJ0lmfjewXIFWnlbgszvhib87jRRjy2PfzniTrTY2v8we6OjT5e2LJ6HyjJ41B9ud6Oc2c/9FKRT1VodFH2H8WvwVmCJK6ip//PDmCvrhaxt+sHdrrJzbxSke2zRr+fBEwYp0uyvP4sjDuYQ29oSz2CClFyqhqPT+qmtbLPilkBPR6ZsN3stoLP98sym6HQfY/1Kg6O//D/MUU9J6ASsH5iKXVX00/6QvskCDnsUIH6kadPNtXOLdeCaKjEOcjakb6N2QX/MpzsRCMuON8/dKXYolKf3EhXbA3aaHx+FnzwPxImohaSgFsjSpCIb8ukHh9hzIcJ3/hVxx5VJduBfMQDJRSQ6k8WAonCNLbBHtMmQ0FLytjKLHXADVO5LaZuZxD1oI6sP3qjwYPxWIKU3Msk7IMQxbfawUu5HhJN8RwRob8kyw8VpLQTdxBss1k84KQdaG2zUx4JigKZhx1OBd4aChWKF6TdhGrUkRdC91Y7Byjp8khWp8JxErdb6iBLTB63I9w4GtpgxAX6z3YXuxuX3YP5u0DQ6/kizvFfl+Uplw0aMJxSBT2CXwSwGYzDqTtOCfrC+JOJ0imwJuVabBlFZafH8kh2KT4GTpMUIxRxhnxoTafFP/8W4YkJ5fbL6uCzt8hz0ayMvuIBkzoMi0P4H2aAkGPOQtnEqtudBzZqh36RfpuW9r7DmeCiDfV5x8T22+3qm53ral2HNJHCkuSZ5hTB8JKZK916dNG5EVq7VI83Oykivra/A/bEA7IpJIaKhK8qwMi8aY0ECcO4RWll2eKSuBQfLOqMBj47N513HQ/HgwneQqYyr8oUcSle3lvKGSMQcDOIvofIXO0TFErxNJWwFqkZYjkkjsbGMwnKyFmHOecEFKoDtpcjAEIDQpSqQkBFkQWQHuMw0jhRngI3mqEPgWYrIy0irHI2OOaWVQ2neqoVrMwIv4QSBaVXxrf5z0C5Jh51w0kFTTMDsFRiURI6DA/PoHQGh+Br3IpqzO/hF01rJx4aZ79Sb541eU4LB1oRpxwIFMNkEYAvjWUKhzBhbba9Drkx4JKamIB9PRoAbFWCeogm7vSZ7mNYxF6sN2xh0yrIzYPBrvR6e70TwtigrlFBi9rj8pX1cMwxD52gP4VJekjD9Rh67OZgp3VYAm8H8xqf81qmqtTJ8Jhi8lpp2arp451Ry1ya0RU7oI5Fb3f1i287Qi4/JG6U2ZHlcY+IRFy9SgXxpo5M4s4v8I/Ckqks/xWVbzwGlm+4EXSUs9IibsMWWKoXNORrxqdf5DSCdymZ1z/QNRufU9u8aCggZRP+ADZjoEaljkAEGsMuOWLSpN/c9I+o2QQPi92fATG9FBjvnGEDTAnVFf4gcox6s/BtipoOxH7FdWME2GGrHWtZul4T5O5rfELONb2S3L5dHGdpkcHPMsIoGSuRcUhuu4SyHUMCkPOCfO6KUQrhl9pho700gzvBmfw0wxwfN+2kf81Tx1+SyzZDvKqeTQ/N/22BGtccIA5RJjKC3oczl+UMb5J+toafuwUZijFB9b3Lf9oLtnJETNvbBoV8s8n1Ai1l7rENW45zkFzl8BPhh62sfHfX1L4AgKZ8vb8dnZiIq9Nu4xEaqaCtUlaL9nWTrKdmfCKP973PBn9FIp20zKkk1mQnk2p2weqPDuYWuwUudL3+/PDgR7n9T1HqjWkW2E4T/PAD4WADpEh6Cnyeoxibo+x2tz3B1sKKhSJy71kq3yBpt25KY/hHsqZUnWhmuK9WMo1zXg45P8xTUiGZaMAEB4vh709A7E8+hN2vb4tKM6KNNbPPU+7gyJS2pIaz3yfUsCEPuBgPv2E9gBNw5OYgNZnYWnBz1KPphoIR+iLOXPYCN7fdxtRIF5FgwbWoRi+SWlPRT8nCKvSLPakrrQMFuF5xkPoT4fzteRyVlPhFGsH185IffvHw297nJFZTlIwhN9+fGJy6J5h6atDcOrwC/NcGYNZSLNyaZfmEjneMjq1Lz+T+6sAvqZ2ag1LYLgk6qgVwZt1PjvCCHR+zsG6DQh65cBv1fYZdT0mSY4et1h+GomhKNKmwxckzl/ViHiRpKqifVw7oEE9B0KtrMfzLlZ0r3x0cdtMOnvLrQvm5hbuYB0iC0mtTG0ZjlX+4I1utSsiZEHNT0zrx/Jklg5baF67OF8LYSb6xZQR9zziH942vQsH3K0rv5XYC9VA4G76Xwulu4DpA/WFM9x7WhU6T9BCB7KCsp1vXc/wgp9pJxLzLUUSEeSLdG4ImZkM/hutKS9JXmVjF++UDDYgjTixpEQPsVjLLbFMykiaG6zrt/Lm+UdQo9G9kku368UWWhCvx2fjvn1on+gbxInXncd+c/yvtBgpx/y7/kPOVRRfS3LTiPcdpdlq45fiN3nSho6vqW7yDrQJ64vfN7NyJrF8gD50XQP9DjuRUilWhFUYGgJacGrBQVZUgbszfKjf9G8u+5RGoeInJ4vbtkHG5FaDUEn0oCf/jWCVNNTGq8CqoRe48vI6ehNbBqte8/iU/Z8+uRMxrpPRLb+ib25bX1qW303ZIDouonOz76k6kONue1T8tBSR0PGtB7H0Gj9+mhMTMGFxiAbEh9aZTsv8Hwb9n6e8E656BYzFrML9ajtcyzhlNtKRCwE3C8U21I9whoB6hR2xCuxFVGTrE/VWUbwU/EyTlSkVgITSK/TcZgsBp/OUCu/uJk06j51upIYGfiWWUxCREgq8MnvFkiPp78ZNNhg3jvec6sAcuqCEHac5NsfD9921Sqzx5lQJh2URDwlq29sdE0U4w6dse2ARsdtsAggNlb82VzigkKsqPHBmf6Skx8JZElzZYPesg1tJAmNbBlrtFai1KUXnSHdXtO8q8Rh5Igv+9wizSiLlXvf4ZrGcZAY5SArFSzLQfFYiZIyzwP4nYcfJ2VCcSTImSBlVpzne7qwiCVRhVI4t05XV1jCrN5N06yE9vGI72gmhQwIWWACqtOLfeHLVnf+VE+p3Pyxo0rWaUWn1dGtp5cMi986zq0gOuyhPt7Lk8HL000SldbBL68SYPuzf4qQklX1jtLPCNbYE2iIahuaOPtpHAmPewp/HmbStQ2ZnanJ4T+bVc76vePNVieMxlyjwQs0vYyLlIt2q6p6YE84pUpstCstaB75V4934EB0Ix99eFWpU6SUza+kSFQBrTjgb5wkctecaKhE+NRoGolywYr/YCX85D8niYrB+coHHzq+Uw2vNetjwG4d1kaK9z4bVoa5nE1DqelDXBhcB7eAtLdl2/W7VyfieHYZgv1FN0nrBi+rlwuwh6KORhPu44EAYqmezDC0DLR99KchcbnB9apwYOouvzp3R8XfVDnPXAMQx7ZGSityis+TItstFjo0rclZYcBAxmULEjod76n58aknAvwnOZEFP+MT8UwrmTykUOb8BZ9Zf5iW5/5f529hP0vPLNs1tM0X1EPV4xwpsW/5Rz231Sl/Mn0BFDogzlomFrYCubkKWGjLnkGR5fkiwj7Ex9Nsh5VN13PepSB6p9annqTL37wVOk8sJQG6l7d58eBmzmVWCWssmenY5CKrR1cse0du/Ixv5dGi0KPX2UUjhdaDoWCytT91hQU9PjKFLCqrSriR3JP5Rjof/sZoc61W9EwGtFkXPq3zp1ZZMUEzIt1iS/K64yb0ehT8BBOlOAp7JVa/L+FlI2lwD6I2+DKk81Dae2LCav8BP3QW4NqBYdM9b1UWVr7SHF7WIWVt6hPBm5ZHFeb45JSlyJ2pvKrM1JHr27PDdPS+8YMb7oHyKLVowWWW/oqwGsLqcwD1ZSTONYzFuEU+qKW5NcKuyaxUWRI/OS6JhOiaSx5ijXVbVp2i/al6qjeIQIsDNPcuzy43cKwbkMWW1H4hOhaJduwelvJWw/7cWYtJ3Fo7HyHQGw1DE2NmLvNnhl7N0dJnp0UQo0y1eBPzFjBSxg6RNOZqLuJxgu88vuANSTrxu5LDsDc7wsLf5pbdDeajEZ1Qt4D2CWM7nwZ0JPrQtTyTuZbAKdbdtXsn4g+iA5ZjtSMoKtM0pLYH1P7LJE99EPVY5fAQJaSuXJeL2pM0LBzlADcH6KU7IjuTDH4zNvtstu/BfFSDXgypsnMbpA3G2HSKYINYT1Ey+F20TE4tSXYl65KljgLLxF273ytWzXRTO7O0y8+m1/XP2UVeAUmpJtivZN9qHJhlwZNpVa/d8j1rUXWyidpIFfSrowbJ+rhCBIfbD6ccj6oq/kG2/6EfGYX304J5avM6vXck7oMKtrjXbKISqO7BQfdQBDrKwXiuJig9rhTMe/YexQVyiiJXRGEK6woJL8xg6WZHdCX4MbMCsemGOaWCxHXHflT1OWErYmc87ysoOpRkpUcQhpDsZOLwOyWl4dkHoWqlz48w7zaPR2/XzUCXDoNXHSx60Nifik9DOalZ8qnriBFRC9M5Fe8zE2rXjbJ1Wk7F6rXNqBlywtu5/ShrVAb5hN6qofrdV0k4Yg1Et1bG/ocYeTg2o4WL0Fut25gwGoVRrTNpXpxEecNat14HlIbAbikgiiOtWf1A1PdrRKkiDWAFw7Sif2W39hDkDjPJpfRPhD58jhalcf8zmVTV8pFXwDnvBY+lyXRnnkCFrKnp4KMpyjgf0E4PH8FRnBKl8+r8LL7zb/IBIOSd6RRiQ5noqozRdBoy74BOwExWlfHOaC89EB9aINyFoOFWkt2sg9GESCid71LPh4FNulrBMdojau6LUKIebrlmQVeo4UMxCuHzq4CSbHxqA3gUgQlgPJk6xRHDT/9VQc6Gb+r4W8dp+GBEmSyxsnplTMDt1nDgf/M8bTriSOh2UYHPYD1o3YErm8Ccwzo6dERyLw5p/I0OZt+5HiHIdRifPa64vGpRYb+UMYuvww0kTZU07h7FgJsPhjf6X7dbbbjMn7y+uI6HpdhK5W4ltC5VQMvDLZaes6DWru//11Qg8rig3Ca9lL6qe3z95uoooRIBTeYIiv+GjKjr+uWBS9Z2kAfb/3b8C3GGE2c+5+48G8gQKGPUaB4l7anofsGnPh9S/c6x74rgH7vOdCe/7Q14NdY7QgN7+W0yPTyIQ3gHAEiqyi0GN/XRUVkq0u3MISs4QON8h7tv+ATE/8g5XTODsXWqGseclxJMB/4kVrPYSLl5cxSbekuuFhvm6lZkFGE8ya4dfPSblzgKQAncxqjqzkTgEwkQph/eD5iPiO/GQWMpUOe+JxeWn6iBSXrx7xUBcggkxBKIxkR5Q2uvVYRNgHJsOgtRlXDC8LLOugab5IIy1lCR8AF0guC1TZIUOWw6cUy7gv/ngWXWISTfqsiRil7Vj2e2XGkd84Ad8G/iOpXkvyfIbsVPW8J1GrWu3j0DytAhgZjQDtPkuRorHscr/eSmsD275sqH9Py7BN3udNz4vf/OkUQqS5HUejdX+wAhvIzCyZpIXY67lVzgX9qBi51xVMrtzChbbYOKc5YsjHA6/UFcqS9b20yExGjZAniySw/sxJ8jVfTcs2bxcWESz2I+7hvZLCRfVxS8aRilQ4Cthi4JlplAioSGps+EuKdWUMGwK6nK5nwyxwVq2bcoR9mC47Iw2t9/RZf6uskgy7Re11qCbIf1Wmk1OeQ3SM4ZJZwsjp5O8cmEQtsZn8P+swWChjhVtIgUvezBMOePldmSS85OZOn+H5uab1ayT2cV1BEoRhIHUi3v/uAJnFTJ+R3mp21IdEdq/A/goHmXrvbnUlV1BY1k1w0hF9hSQKEw9ExxFjkver4Ot4gYIFePP02JOgptcuLCvFE8QyXx5qonDqW+OS4oBItnOvRip4irJ4L+cBVy0I2apeSM8H9DlcduF7+kiZC2UNG6w+gAyMtIH0oII7sXGpOpXj+uHhvFrNaD3JR/7yK1UmrvPc5l4X6LAQoAaUebFNoK0QSzq3Cgdd1FdIv8R9Ckd+8InW7Gqc48Sitc4U6+zTRkoDA+U/LvtcYitmq+qd0fV+VPWX3abmFnekomqeXNJd7z6PRLHrCE84+APGX19FIE7DTFMFTcXLzeZgup9bDims9yccfDI4JIHuksgmeYiQTNtlireX10otGT8trU6Xrcs4vEIe04xOYoevzrrqlWQhFYmA01C8g3JbYAJ90BVry/HruptlBqyRecL6JiUvbsy89bHG365A9U9fThT9vx/GwqiNeb/gj4wvILobnydNKal6gH4XDiGOITSX/NGKt+eUbKpKR0R12gGaECS9sZgNro+8I/7d4dFT4eK39x03l8ZY1djCf47Q3JEMrYMnUEbX8ls1xSQ6Th5k4owCQuDkdvl1HuhA/pd6EJqt4lKlkLc6or2rHhbR9bRMaA9yANpfrHoBCQ7hXsyzox3JY4K8zQL5PJ7lwA7YuV4ae4rYUaSnE6wVv5SbZPQIxV8B8kcOb6KO2y7Tp+TIEPnviiEc8sbwltfWpIfBLGi1wtyLeTnMX+8fjJYR9pfrYib2GxI8C9LQKd+3jH7EaSHgP9RRTOzNm6R7T9pceeHUUPHZboKqAF2jFWZ97lSYLssncTvfcNZi4TfOXF0h3f5epyAA2xb/WtptP2SrWt/e19RkMI8Rszm86sSfOJ8B0HBq8chJszX02eGmXHriTlFWG25m8XnCqi/wVKLwICgJEDvSF9XpfQlaxueLJL/hDRcXWVYykcYwh/trEshSDnRRVrZiNhWtXm1RvXJfUPR10kaIo/n+YNBnc1wWTnS8tu2DTYsyRcNfn59CBnVakFCjm5C3QYKrFW2j2zQnuk66Q7ADYXGFP9AO6PzCqh5pO1tHafck6j5/bmwMgx9Tyq4xSW9wydAnsHidZViKViazHMI5DklazrnruDrb/1UDokEJXBVz4EE9hE93kSBmu/LqopUZ1PgfYnSGUYsF7SWwncuHGoGXrYbIZRwWcbP3hSpoNsYhZGL7YEulsYPDm3RUz7X1AGf+4bve9ZtXP3u80XnRwuqeaqV1YINt11jfBMDydGFN+PipXgn62Nv4hFjpBJM85lhB97QEzIZ1DGPt63MrX3Nft4syy2XrG59fVbyR6NAXG1udyjRezmx6UEHA5JJbmUKujqXs7D2imT8aiOOVHy7z5mt1N/Sf5VtCYXNdc6Tm+Zu1+ilYSG3VvGNDcambSU5jpMFlKmMC36JBpP8m6SH0anCazdq45NEbg5Q93T+Vj+KYKcGPDK371Figb4W0vXZ4zol/HdEeUKB+NaY3Y+lYxf2Z5MsRrrIuxUM9l5PAXuJvdUzHafWMCrgR0fgXMzeGEoG9USGwUVFa/YEFo2RUovu+ERFiOGKbca5hA6YLBDGwFuTzvS9cdjSvgC5OrBExeVuOTqXQNQKhnaFPqAKnYxShCFnpkF0Hh734wF6ufLf0s15328SotoS5EIq8GckqzfLHJgKqkpAv/0fIkVTkTGIPdYXofPuPJ22PMnbFOQ2uojrlTFtFOqmVq3KFYchmVBubEmOE3YMYuURkKCkiMPUImOvfDMrL712eXYDiS10SNqdYhIssKN/zbpKQEeSxw5RSRp2RWdfBUb+mhmwCAtE1cYpLBDl3FxiAMADYnE5NS5W8zYzAPQLllURY0wz6uchW5tkAINIdH4iIvl/c8XZ4u1iNpjVp3kqtZSb7fwvblHGipKSecPWqEUhUxcNUlNZIJ25ugnEwaV3Hv9qGDA97hHvitF+uVP8SzqrDMteuoXxEAtt6ips2R85zV2RTiEOyebQYpj36Wq/ovr0Jqw9Ko67PDKTZaClYK13M4iCj/297V+vHY9UOU6Wttgoqy8tvJWLYDtqp0t3WuTKF5mTklcpEdi+47HygOf9PhggvUVzf5zLEAHljVj0D647n2HiYUVJaeD+bUWBVH0AbhAeaZzH+UQZe2InSp5Z4R6PdiZAp81MX7U/qLT2nfr5m5O6caY9MLU61LDdPZNotKyGcpHDyLFMW2T9A2IM+c/ha61Z9XoXyJ/4nX+tkA6qUnuRXeDHK/y2Z/mTQtJUinQ71AbuJ+uFWFm1fYIpQa+c4Dqh46cpFaSm67uM2arrxR+s2fdVDfmIuqSj3CRv9AHhcXDtrfTVZ4ieh73cFe8jaVL3OIXsfRyF3LIlkezusIK4m5FFrlF9ArRnsBTntfHF1Gr7Hi26aNIzncDT6xuNNJQBxQxmHjAfOfrqVnHAHD04+1M+xyEAMup9ptnJ+YuZ4zzl+CtWGqvuPOWEhdv5rQE8Z5x1bkVKSaUGQcymV5c+mkuAgvxIAZ+spr5McxXnZMODSWFNX7478Ol9VNFHqvze5qjgsBb6nYRG7dxAU88HCIlB9f4XlYkvWQMH5IBZH/p8pjT4NbsR8nkn35SlK7dEY7Ricm8yWyWJuAaUgZx3RtVZniQqYB4YOMlvH4S4c42/ug8Abpmhr2lr6hWoNYwZuNNdQ7GXjmnurbHv7p4s9Au/i1UMArSgqoHrs2UIIGHIpBPt/MMsjlEoruOl193MQDU9D3wuIYXQwQlrgAMjjW65rBkDHrQVKZjz0PSjzl7oKz4RhQWA/Cn+wcccjAOtf7uXckAaODNJ6cXXN3oE5AQVF4Xzhg8ZGWvi58BJSsWsJ7SqLpMFbceTzVmoXh8mKxgZAWoXu2S90l6qqdJIOVmLGCIwgVOPhkNfSOXEWOvUKMXcay1ktYmgGGs4Mn7Vimq63FS6s+j8Y3FiyLKG3OkhhnauT0EyHRvR/OC4OFbfJqaclT3rni7+Xb3oy18GKULb7WDhLAHcyv1u63mERCUC/zDIibBah9UDw8fwHAFKtx8ePh9PhywVSKjtPeHme2mAnF0GoHu/nWd0zocTgy/xWDykvsQ4DgqIo1H2oxdPiHgeCN0V/zL1duKxNdaZoJfjU6W2Ok9tIngyic7GWz+hRYuSNXSh0GgukA2COcrQiRglAIRJDS1TodRmQshHJH30DzGUK99vZKak76KFBmBuFfJbASPLpOVZ/RAlg31Etrk22gZaT1S2+QYRcjlwj62W8xeWrXuxuYwahZrCmUKLwEjWf32wRd3ud4+ppzy+UpYnQGXj5e4pFQCIecOddsbpl/qr7BxBQ2JFjexjUf3s8eeN6z4e0SO69eQWP2P9OQDEn0pOd2GmuJxAX1Nfp5ym/UsSKxbvgYTrAMTMofFd9ZRUF0S3BQ4fqjB/r7CR5I3cscEWvYJwg1eD+ol3xZC9oYxj+mnciMGjRdhPyOtrwUF3y2XYAHmxsuwnYy+Oc1HeV5KFAwcOBcjJYicK5cZEzbKkN0fzG8mLDUlRD7bICz5gTdKfPPEaFsCpJZCQuYYzGM5TRyPI/O7u5qo8OIh9Tcu5EG3oF+mg2e39FLV9D+1tmOmSX4KIUUBouMbg84Um7/w+Xw2BtaMlzml8rwlXzmJXar13gfj91o3PQLsQZPrLcTrJdYktsAWje9JTJPwVDCqBh7w3OOA9FF98I1t3xsxgMPWgB3FzaOvgxNm1quNhEnpsmeemMJblq/Xhobq1lAxXz2Ngo8/8lVUIbg98Mc/uxJyViWlNe6eYPAyr6uNPFyBvHYMXdwunUOc3TMZdihW3D7DH6ojeHMtMs6g5SOnEFuw5zlMIeCV5lzhN1a9X6OMlMYSsDY7bNI7HVlNXfXSo/3wtfEYdQVK3606W5B6Nt5ejiN0Eyj96k1gWa52rEyxjw7sEYtI56O5MN65FPM+7e4qYXB30lOyjnbivpQMMCgZ+RA9fpImwoL7+utRYyXkEp5IcTx8ea2x10YmogWHStM6I7ygpSLtJuRXgSlCS6mnBn+1gPFzmBey5o6rSj7BfqCUTBMQHFo00n+kbQppgKImsjUyGY9aMWTourfivKIn99I/ryTQVC4wVRXHy0VfCiyorKNUkX0Eu9uhRe02LIb6uAapo05CQzynTx6/uMRauAVHRrnLvuhfAQT83UbY7kRkRBNWCCZDCKwe5F5JXHp08COqcIxpsgO5idW+SsUAssC48/HK2aN4fgo1ikuwCbB7KiE4fX2w31LQ5XoysLdeJi6bcWf6cdhkPunqJ4W6OHNbTaLFiTqmBUnB0Do5kHsMWI/CxeZpY7tzyy71nih+FEA78Bt5j7WEToVmQ/Dx+IZc1zCuEyOvrkLptWw2XbThvjL6gkzJjnhnjv1S0qAkOAzE4MvoUlebJwfV10VhH3u0MKfHBv3xGoUQJ5BvN/Esbb1la7Z5tK4/KBruVDZvztXJeKXE+E7PM4UuKQ2/A4moqz9Zj7QwKhWcdPJzAt/oEqgR3kRQk92bHw6rFed0W0+e9uqFwCleJxmJT17kHfKuBLY8D4b9IMbyNoHPyEkezW8ncyIooWOQu5RoFQc40liXWI9N9XZJGPe4Ov08tOkzZA/r/O8TL2SYkzX0MQVhnO2JWJnLNeC3PVdz/9hXytldRXlffAbdUx7gYEHOTeQ/ehA/dVKYbkqxdbdlCD9z+hpDVgWocCHta33R5izvjYze8bAWgpJeE2DD3obKViuNVtoh/EYLW/qqYxussWFdakvUNu+/q6DmYhKK7drt6Xc1PTmisA4DcoRSqJSWp5hw7cLrGLflxO8HJih+OqyRMipx6Uf048tc+jVPtAojpG8Ehq8KHE/79oQ+1PvQ7+7b8VUixO4TeFfwOsudNBh0seranuTo/ltAhKWNWBY8XJvVN+f3DFA29IN965obMjNAQMzdzQDCXh1ULPsqUtZvilhw7BhXqF06UgSB9zD3KRbdd0O56LWYy3245SG2DWFjd9a7DadUmkNCBdInHeMlalDuaOsNHCmLtMpopy2Jr2XfM3YHijqmre9Ivkw7ZwN5MiYoTkSGxw8+asLU3HkCQZGRszrxPvmNlx/FacGQ6nYnz/7oyVQB8F254O653OGJRMdcXF3NadhJwlTnu3TseucMxP4Ux6xe+qBc5N9UBr4OQgXIUS3u7B2DkrZ2EeocelEeSaWdpt6KN2FId6090VIkAD4YJuLp7RFpevNBejn3c3DPdtsADGlxDzJptnb6gNHTSj1mvmjJVBsNz5aG5g8x3dzHKlv4UKmSbZrchqpCgczEC4njCNuaEKM1W5w/suEjDHaZ35HjrtbA8u6fovW6uV6gvjSiLYOQCLxz8FcD4mGZXOtqK9DoMseaRGBQwq8kXQfr1XphhCJxVwAn8gNzipJkEFozjEh9HBoDK1zgR3Hq4cHkoQndSvyDd5elDoFIL6mc3O5osCmk785wXp2xAnWGPs+3Ctzeqbf7PduPwMqL6SaCLClD4KPUHLx8t+omoNXnImFlqAlCfObbHp7nsWAmu0IxxfvRBK/4NGkLmHFgr05R+tZLhEsievW/+XrxClxlPHVBTFfswCnIWiszQ0/EGa/IyKsfj437SBaNunljIJ6ciNZrcyjIIOaqlww4dl2si3F/cQrp8tqY2vyktBH5Xc/KumoqS8kzwATgiIWKlclDWn5RnOnkATXk0rxg04dj5VJn0zjMg/RdFEteDzJrDIUHFf1TGiKghlrLc2ZrjAB2zuUrqMqM+6HjztZLpIO6XmghFHtdzoXC7wLH2Fxj2IUZ4ayU/sObroE5D8dMIHrDC8OZE6SKAf037WNcjokjSi5nHYywO/ipkN9QABxW7ysxetqKRWNZ2qpLvbA8b5LQvRnJh8wiznLVJqBeSXveDsSgSzQzkBsoz4jWoI1oZEk6TBKKqVC8Ci4hFNP73Rd1uZ9PtUgWwbMCKUrE8ZbZP2R7eu7frenTbRvW3VmPLiARvxO098MYB8V3Kylc1KtgfdelUQmEsX/YN5+D4G1pK1Nkt3Cvlsw1b3hsaLjggK8fI888314ylcWaFUgXW4eeUpYBuQT89aopiG5Au83Fq8GVujKG+fyUQXCuVrqfb0on4yffhbQIj8xPBTs/maYVbXrLnBsBmrXyJ+pPnA6cBeHuqBsz9gERX/0jHjoeNvXpv7ALBMkFvdSPIQLig36l9nFB0YJsczViMUzIad/2054UynL1bRAlsWE0RWcOCH45uTTNTB0pxdjkBfghZrkZYIiUJTDUEoDvQBG2/1lW+Y+6pY0XSFIsq+BSo17WEdfMjF9xgaJfOGADgywlhsFK9ToDZtJfT+LFOl7KNTPlm5LFMv1q9Yj38i4VQePNcPN0VhoSjbYnMyR6usY+p0U0YGGd145xTaqg4OQ/B4azbZBClNLUNXhSXj83xZXE5zHLjhyNiHtxXsDf6xiSfWmABeGmGlMAe8EH08p80GyZUQML2HC5e+QRnDW3mFu93bo00ifMKQrKqP+0c2uYgTClgxBm2MyyJStgGI6nxsPtoGiqnqkPEbZ9Rj3f3tH+Fuh19N03D2vYWa9/Pp9VAure4r3bpQ8HYQmHp1Tfq6tbU5s5G0TlbKNwmTI1r5eSfoE9IabYicHE8gR/upCDuRUdqxlTEiTLsxFQhDi1ktz3MeeOg8DxP1X5G2CL34TgpXnYzmgpj7hEYvMSekpjdvPQP2Mo5DEb7IHBwcVxqdFTpJKleWuhpS/+RsBzBDLuJ1x1m3iqalmNyQC1AF4HTqcBw8CKSIuBarM4rqe9c+lapeREU6TaIlHL0FJjg6VmA4IJruhUwcrbnReOnTjqNbMw1HupldlcMRlhFBmapccVe7LTVB1CiVlA2Crx7zT/UnZzSIFX7Vq0oFNvvf9vCCWEyK7qpe/lQsA+ylFKveL+C2btZNcQEO/NT/QxogGkBefaB6HYxIfewG3NVuoFB1l2ANWKUA+J2qTjHE16yL5L8GItBs1ipBkl10I/HvAYe9aZvtgGj/7hnNNEHRhvv0HqxoJN2yq//2uKqvv1PCadNSN/KkLzWL6nMazfm+OAY6AdhAQ0FnhD6nCwPlPh8NHXJEqnPV7OIhI14dNmrq2QYizc3c8PgUa5wgBUYri6SNcLmUroiu0uirrsEcTMvU+Q6OclIX4+DsZR0bJ9uvqPIdTcNQcaQp0OAuChYpheDGSwzkBd8G0NzBPAbXjXhdUmlSaG+jTdUj3Yo0QszYr/FmibGLTiCHbwbupRuVFxX2EbpojcTVTxzdJKB90gTYYTMcRMNbu8y2svxIK1TL0tmjWoYWEHR5++WLZLMrt8LDtt0c+nJEo4pFOC9CcJKKltEOXmbfKRQQvjroOMIR+WVefJt54rVk/4kBpOuPditZw8449zsn1l3Rocyz3OVsgvInFMBHRzTB7KOG9S8Q/Vw/6J860iXnYm8huZ8h4OlMsDKl9HJrQNfdhKoeUVOvoly4/qgxFzi93iG53bTI6WhxZBQ7qH/9lQz4kuZ5XHpi/CnxULTZjbjiQD3T3Q4YiwHsG3OMR6MfmxYbB8p4Hsq5W/2OkR1o120SLb34umnARghEKrs09K7s+Es31eLggvULey2ohD88AZ6WqT9kcaK/m7d92iBLGudAx7GWyEo3OMNF/+OK2RVwAmoQE873ldO2dnqfK/1jEG0cawA1HL7/sU/jt986noeZtCKp64JguGjBvZF3tVP/oir3kNUKQI1T9qeCZrlFz16N3mVpqtpZ9tg4OLIhYxfSBxqnLNlLywT/mF0sc/oBQWDEnxO8YIaJuolIU235HYkrB6tMS7nWN36HKqA/A6L94wu3NprE90vZpCURNt+kemnSM4BUb5/L7IvAaLz663lb/V1C3kIkDrf+EHd48VsofFtgJhWBvJ7EzkK81ZZ+5HqBzReag6Af5AGTTyzNTOGe6/JMKiKWmp4tJc/UziZTLhKUx0XC2x0cBWz1eDl/pzPssXP8tQqczymGC36TpC/sGZ7pfrYdO8cQZYRGw2/GzzznLrFjgTAq0+df5F+JHi2jo5GHhM/kPQEdcETesizK4U1w60hyw6gpZc1HU49zm8rfsehJC6yN/Q1PgqwWTqNXKKQ74P0wy8D9+KsSJ/bng5R504rxHorihuhDFmZGyUGQ7xAdo6VeED59TmmBt4UEiS/aW5Ht6VfV3TiDwjMk9kkaNLSsbZGJKFO6JNmWtKzGqMD8C8PclsTW72OzYonujB+3VjaGLdKPBkMumrDFYpqgn5H5Jo3Hpo+cTftsoA+s1YX1zTgCIXo1YJEyRA/xtSlpe4JIYpwHI7pgo0I1N4BkHCbwllX+ol3dKFXLfwsMA5VFPztGb8zOpWl/4tBzd+i9RiFl1SPbBeemcIT/NammSd4kJrFtMJfZe2EkwkL8Iym6JP9DTmAk8GJ7a3u7WT95IqRNejlMCwjJxbz5WdrgvquWN/posswXADGSSarE6rGIZn+wV/BHMlzRozMfNg0ZbFcRBdT2brDrtR0OyFs+GPn3/eo2Vd7+Rtorx5I4eyjTgTKxUjY7uGaATLTT//OMFkLDaKPp95DcmORt/k2K5Bn23RmahBg+Xhmk/UngblELjdVSE4DJNrMtlGOIc+RW0EGuRxhzBf7jCnqi7hxq75cVa+2axr9no/zi6BYOJXMURs8wV72eNZ9DirOZUlb79G+qMc5j7lyyQLhKdLaDaTj+N2EtDv1TV1jbGjzv5RF9zOkaWZs5GUoAv8y/i+IoPRxOeXgiimc1KJnvg0pgoDNqRfm9nHyJd/pjSZn7iGr1NTNJzHKnI8qEi2H41cIqIOdhBm6XCTvV6A5/XZqNNVKgjzTjXatF+305gLLABUt4SSF/Of0PJAWjmx5wWTTv2W17qkSKlEbofugP8n2TBRjf6P54QxmsCOznHugAOWqClVC59jYMP7UXs8Fmth99/5ekcnvf1q6w5ejAjO089chUy7g9iYxzAV+SWTsP634I1lKC+Jg0KHAJ0ocQNni1HlG0hnN5rzTTsxc7m2Qtz7W/NVHvsbpw3SvSit3eBznLJrItZKRTXKR1PPSln73/dTLpyLUeUTZPBV6HBonCtN0d7a8XdGvm6yfanHqfG/5IRZtc5ooltXjEFrWsndkZHwuhnghHdH+A+LzItUC3U9kYF7SWQNY08Iy9I00IxeU0g6ZMt2hBQakiYHqISilGgnSSMoIeZjOkDoTdwUSNFB1GuFZXt6sVyAH6ajR/yO1CkfNHnVCofhKBUpQVQZTFmbc1V/xatduWF7WzYhvD6/O0kiKQU8pSo1FcuhpEbBLKYKPNgPPRfbvPuJmVcXcAJH8z/giKe1HZJzmlNSC6cs934m0iKI2J09NCNNM+GWDpWeq7fchkJZ5AAfZkHYEihaVxM9+4dQgkW8JwR2eiatH/j17A2AGhF8SUWHnfgUliH/r7uM7ybp+jkYupjwXJOLWYSQ1jN7nYpG7+Xunh42ZbEZw7lJ4LAhAm4PIWEko1iK6IKfA5FEqsl2WSsjhLp2rHQipQ1HwRmOQA9T6vqlA5Ej/0BZzZyiwkek5GDrVrS9GQiFSUmvq3FI7DobWtNOILukrDCFpsEUKK0lmtBY1gLPiRDSz/ivQruQoqtBzoMF7Ys+zN0xhqff/jgWJCUw+eBil4pjDHf/fwVsXdl8Hv58WH3nnoEkqqAy8KuoxNbqqxWPd7NzwxcSkNHEOJEDiRpjJ3eMPoFi2YFMxhT1WDxTVb8yh4ttWQd/g4F9DKY8dcYhlou+6W3Ahcr0aRDU2ztbUNGsKLko+pNMClF8qkJg74NKgaKS4Btz0KnvfH3pTsd+BsVG4OsrAgy0NtkQtznxp8mB96u8C+EvAg+B8JxLbm2G7uGj7kTPTXhZ8N2Ab2LhBoI2sw/+cENIelFWfT+U+HR4DaJXh6iNGIxwVxlwZPcwoEYBLG9Dq1Iyfc+106O9wY4TGC962PnPfVsWKmGhzcuFU6mEjVU9d7HN70S9ledsUsNXyrwRUOC3vvdIbb1ZEEnV6/COqaLchhSjeCp7MJegSEYlrS2XaxEvDfMekW7PIL0PlyR7/Xpt+ssRijoeWwlzhvR0+ScZi9KDDqNr3jUx2ga0zazb1lsJvlpz7M8phT5dB+A8bdB65aSQrl89zf1ggnDG0hbqodlph5c+1DNhTA9U0NlT3vg/du91gGhMyH+0R5u0D7tw1V104lUcAJTRticzDVR6D2zvVYPf4oIBbi03SljMOo0ozZ/T8OicJnNW7jnJ6oCiZAkOcipAaoSzrXf7K+g4QG+/C3h2Q9HCnVavs8NkxBSNnB1sskg4j9JHrm3L2uadqqY395+pLgKmgSaQyFr8sPAyHr5QatVqht7Z9zxw5dC4yWghc31YdljjQ756Vp23Wb2HbE0iwI1O/gsCPZA5SRVvUBfkvTKjVK59rz9f4xIow5hJ48sypJYd2Wb2W6NsTWBkcyiPY80GXWHx6HbleMwYJWFh1uW5AFnaloxju/zdjI+hno7J9uBRAYLFUXY1X01btAkN/O3g3+NzlRPvnTzvYHwlSZIIzqx9XPYn37cO0vnCeh5pRa9NlEv8aiZsALwMKjf/OCX5xCxs3M0Wsaj8XmWmdeNtUTZUXaDRYOsN76VVMPDCMz3COuVmS5CdvHqmVDTHKFf9PVkaaElJwj5pYxdBwAXQ0guoGqcujfztE13Y0bw/ROu03mHvcdGEiKjpWnEshANDwt679YXP2BjHP82BJ+scVtcd1rHZRlyYutiVmPwG4dCiekTJQ90+eofF1lzyp5P7v/Cc2/LT6CJ1aAw9dG0IgPY1tuUVtGnb+SiYv1Fqhoicv3wl+9VzZidyBUp374Qk9m/0iXxufjzfqRNrvvrvpzlNl81BI70rAL5DWzBU85uCkwfTUg2p8b2Nsclq4ZyKiuciJ4yk3WmwFuVpbY5CnMptK6oXfasfInIhla+KGryI8wPnnDzdTQAa6gzvccecEq6XyNLKmLIy/C9HrkEadovw7v5YXyo2m6VKOfrmgQsz8tZD5ODFiDohYRhuLBRfnrLrdoXLe/3NnecKQ90kExGk1LpQwt6TGZWSGpShlSK6wmBmK6+f5wV4vR0uPuzb3iW4Go5D0vKN6DLJgsJtJb9GvsJbMkGmF/3UyQEjMcFaRKOrWd1kBjFfihjjStcXfvnVG6U8hKjBQ/J6ykjFGlKCXYCucRLgIbOJln23Pi1bQVfznvJFgOLlCkbqNj3BH6G8UN18Vx0k3ENsivwqczzr/nk6f+z9otlx+FJxEqRBHXVsaH6XVfxDvAoPSITsMu5+JF4faR+20Xyc1B5wEsNoBPoc9E7CkWysYcn72jAxWxVrTBpe5K9whm8V902g+k9TRj3cIL4plS35B4NeWCOuOgv0sOf6F7e2dibJJL1GSH07ogiHsF5uUZ+nKTEzGgJU+ktT80wH1qp1O2LKgQtbTK42iJGpdfg78Dnj6ovQCDptv4DCNdhDaJCNJaUIL/t8gGYNZal3awj48Cga1FG6qD6IMDnWc8sP2tdK92klujY42m2VOfwZVOA3fTUNzclJjgys6RM1cI2uJ+gDfpc0GPLIwMLtOiu/whc6VOmPOLcbPi+0gvV6ALKIqWuMLSv8KJcP+YR9C7e8s2NthaVLTDRvn3pA2I2EjOLlkJ7zTd3iztrsqZgbenxwt4lGzNInMSTdN4wOnbZgdhXU234ukdcnoUr8rp9Qf4/Iv1x2QuBrx6Wn2oeluj2T4X6Zhp6hKZ4wXF7DARDrMomRSqS832VyxyPEIwMxI1Z9IDN17V2TbmsiNLGxthbiJCAVhTtWbvTjNJmUcRpSNsfEHSUSVUeg4qOUEzM5lHtMxwIJ1z8JNyiON0/KQYsJOZqZPAJ+HNdAvgRgRaRdXRw2gDnrMcrtrw2q2wbM+Kbm0N/ayIgfMiVQeUGA02Z1QtwRdQ1ZagSIQ+alFeNtubzNWVjm+Iu636B/a1E2RYqq5moJolwCun3Md/3a+hAPazxBFomyisgPlkSchQpYgAVwcMmHmfnw1jPckAauB1KxJV7X/XDWV6/jfWa6ORpvG2GqTBRwvboGUg7N/sfbX4AK9qHfJEZQ53N0muPUhd1mIrDzrxSHWEH/xVpCnsbqyrkmzwEv7WuQ97JI/0VOqQbVqMUeJKKu+tchsUNMZJwjwu352s4UOUPx3k1PbMz+LdIcdY234DFAsQmlUcis/9LNnXQNk9/bG4xDlqmAEBpgIbOBFwyNAd4SySgDWLGcKnDpotSEerjx5KOFwTafbdYv1Zlfv0hQsvpf+oSEqhEXkoUbnNU2DOU6cA77CAIPh3MtImQxXu/Ma++sPDpwtIOU2z5XTrjq/fZ7r/tPWZMiheK53d+HEwSY+HLOZudBUclYH0Z1WiUMCfY6WAIF/Ps1hFRXAwEdseW/dy6iiS7f286Td1sSttri1a2Zbh9pFnCyD3EOdMrbSTDVSw9DmdMCz4vcp1I+QWLF/WaPFabWoB/yi5c9d1keQz3Y3QMjdH2b0SSWxl+riTFygxJSOUeH3fswtGT1GBN7JW/EdGW1WFIQG5UqLfFmpk8qcB4zPgY4yaWvkR/HjuMf3FGpPD3jiyA+9aDHMwRiLT13IX1tUw9ftN3Ix/zJ+QvFiiKPpu7BouQ8d2nxn0K2vQoV25h7cy4rrYeJBC/aA8jScPFovottr7OicPVxHNyzzrpAlUoxee6J6v8GGW5nOiKd7XnU9WIiyqZ2pgBCZyXacHOdg95giyDf98HT4+gGqCTW+Jf6XaVLkoFOVMXHuO84DS5KHX8X/YHF5yf2iGD7srGzsgGn38hxZ/koTk4dlQ+7O8UxdCfTwdYCPbfvKamAtCpGUX13IOZmaA9tlHvJsIKTsPjs1wf79H79PB/5xcwQ1ab9EcfayyrurXiWHAhe+JClvQsGslHIbdrqH5zCQWv6OtJz69TSXL6ugckkH+caDQ6nw0863GVjmPIdad9MLqJPpk8yi9mfVDJZHAJJUuK9mbLV5OJ8ehWLRYukyA4+ew2Kf2GeMtbYEkEVNfwoGUpvtkr1y/8AfvdY878iNICHGvJHAhPwzIOKttf/POpEM4wN7yQ2Yyn7INUlU4yTjcAL5Oab/XHFt2t5koTh0kf8/azss5rORyKvyK9cTXYCyzW1zRkbaXnmUvnU0zmVAOE5VEBpgI6oHJKQ3RTjB5sjUitg7TmRkagXcQG6Ya0Cx9pOsYpbg4GjGLlNwmbD6wJjraoALkuyE6jDUchWi7RMm0YLHaecio4KlQkmMc5lRV6kghtiyr5I4n97/QXRz0qZkPWxxoJbcZYLbme4arpnwXl/HvVOPNabAqkQyCjgoFLEjmlayKaY2ByO6UmQ/HuKtt1ycdCtCEcBxJYVCT5Go3NEZpExY6PLXMbbEBV/KASf7UOX46GS3A7iOo77L80o5G84v++yH/4oqwzGsmo/O3cyRNBX/XH+HdxHQgqFkcJ1JKZJ5r3CoOyD9O7PLHggxniRzSg8b/7p1+lpLA9kvVE3EfKLqOl4xIzR3jIjV5yZsXuBNJKRiYzWPrATWSaLPI39vYa9oXSkjjYqVQGOpNDAoegd0TBPUmqTKf09KzzFTWAxIi8cBpgyxr82l03IhSMRUx+hZg6VHxsyHCpmsx4d/bki4WaiToS12ga9loq/9zg5iSmUYDjWCrIwdw7SJW+aBd9d50MOvggYiGnegXMUFOwNxKmOCrfbhygW6/dPd/ejpI1uf81QBnjVPlmr84DIn4ooiA4oa8pLw/yqlZYxeSNlSc7Z8jzSrNbqL0Qt/uyWwgtSNoleFLHzS3C3v1MvB/AQiTPv/pSjgLdNyVZOShHm4gqqJQbfxGKhIe5A4icIhGs1PgoHNTthfVJU6+Cm6qten8YvH/+4kx4n61eMi8Ed84AT1dq2oM4be+gRMbPIwZX0WInBvwMlDjPc+KpN/FToYub4iSu3NzlePBGsY2Z9RvVKzHanezRFQMoZUdndL9SPDXooa1Icb4Fb8W6b1BTnhxZn74C7DIymYlcMRg75SWHBW85MFz03CN0aPJPyH0QaDxJtP3PWgL4HgFl350DeoF1KX446lnZu5RqosFZ0wRY07adra6rPZrgJAY5o0u3wwNFeBX5E2D3Flf4N+Ter3qqn7qnJ+uC3HEJILMCG1mV+vNR0FEdV/qRIHZYrM3v/feb2RMewDSLvO1kAKf5vianWQyqLQPrtsr5Ent6qxM2AscxQZeQKGps70F6xTs6uJTObGMaf136UXH4Q9IeeGhtlbTs7t8OOLJpAzEvuXKzApOj1ODdWlQMc/6NTnEwxB9um8aEnsN33nTprWpf+eu8t7qkIdXbsFumOM5EXzJyqyv5SM68b6/xH/f5uGMVOnszJhYm46Sde84P8d85kAxmw4BLPL602LSnkKMiXBgx9btNxHc+GYmsT10TmiN8xbcxIWSjZp9IwGquDUbDb/jkF0q+XS2PPMvB+jltS5qmVTTufezQbAO90EwjKgGbOB6JSd41RpfdSXlrrvCdb96FD+8db0AjQ71oumri7bjwBSjZsdVmCNUGZLX86SadTRwk6TyS31dnXnwH+CjYazwbm0w9AIPKRwFjnl/hRd7JA9nmVwBot5W0UL9C13VDHcxLtkSngcJAp8u14+4KseoxclByDz/mJqfeAkjincbPXWEl8se85sPRF5LDgz1b8RKrSB69Y0uwiTSr6NgqJeOuDhWYhJHpuv/fQyKhSqblMrvjNtmGf7Nudm1sCuf/l8Z12BbYnNSej9ZKCADlMzr1TN6Q+cOc8A6jXlkk6XiQHeNNQyLtYPJq9TBCFnjqgAjCkoQHhz7Eh60+GhnLSfmh1wzfi4tnfs6/BdQFP7Ps44Jd4eTEdZYNsCsE3inOdw5qan/BiRlvl2G+d2pAl7quRhnIS31SjKa0vgtNgrhDfl8r8WkH4KuvYOgKLmclCTLsqM8Iasvy7DD2UyClplvJJmgN0PqJsQGpHFNgGAJ2vjjlnElYVifkBqJ3uZeZd+iDekqEZmlYm6nZExsNyreNuMP1FouK5lnAkdpsvUEtkIeqxI6byUA8FD/T3PSbb3noqsGFq5bExN9XRchscD3rmiWqVHFRt+vjqgR8Jvne090gjDs5ZQ7TWN6oFXbq6xhh/HrOJ1m9OgRzaIZWoB8Poz763P2E4kQ8VCEu3VpNDYP3DqdOD0FHZOSUB9P8hno063AAhyakkLI2X4Psa3ZrXNTaL9uTURmuT510FMICMDbLgHXY8R2v9ZM7P5DIYs4OI3c161kzpa5UpN3PfQMyQ3EDD20ObRxnddpw4YjKZNs/v0qXFxfn8St+HMapV1jOChf47oe+V4plCw1g8iDYo8bzi1u+xL6z31ZMhtXta8gdFC0QWyIufNfSk35HKrFeh5rIiwQwvdDFhR/T9MsqZGP07doC0FM4NUosSfc2Byeu9UCk1dTqI6/BcnkiTbgonAMiUNxjSW/Kmfiff4x/Ce3Iuaayh2xkNdKjoY6JONCdFLsbwHnSwMeuP9oLy5igI23q5AheKzJthunYqRxP5V+FPPB6feMBZMr5XZ5IvuOB3O5Fl/lq7OwnJ8NSr9BwTz0c4bzjBJPXrLWPefzbSkZ+SNzxzsR11zXl8C9mA3MBBFkQqXXAzYN9qppM84sicBj0MbrQxJTxJseZRqdHltFnD2ZqbomACRaRZSIyzqivHiYRdqM8qeWnLJPMNcV3FquknvjregtLFVt8wLSYEEj/KzgQ195RqxbJ54X4lb3oObWD+9dgnYW8pYJUAVwA1noHDCdYlLYlUkfc9Ll9dPLxZBeRJ43t+oGAmbDWBtYM2TmkCtNTnRZlGdn22zoinJ/Oi+75GQ/hU18ZeD01j2xOH5pl1RPGBFxyitPdPs4NW4o7+rsfIKHLCvYPqrwAXcQ3LwXCedH9s7Nlxl4Wx4X+8ALhmQ4lJ1Eq/WRQvAREfOpayc9yawBv8GR5V/ZTXNVEe7Q1z44sijc5oliuq3y/rHfUL6V9FF9BJgNDs8w/F2NXQXVd3xnxOiq1NT0LK+ouT3mOu5MXrBQ2e/iGx9t6NBVEsKpUx5DuxqCx3B/4TCKFp3u8GDnXdVFiXntYsbXO4N+b2xo6SFo/iWFQGLf6zp2UOILa5KmyocesQHgbJ/NyeVYN7cibn0a5ckqS6E8mmWN3eVmIzeigbKCRM1p6j0a/vKg48rK99Xn2hWFVt+O30+vgeJSVAv2vcFt5fz8CB8iIGZlPBE2/hdFZV7oNS8NTVhDznJtsPbRBOoGqupx9sh4JEuuGuU2fKHaNYRtlbmMWslH5pHU9Z8u6vVCo80056L+yTd70oDbenhAkrYEfRhJAJ8tN6xLEQ0HEYQrMHHZiNk4c3GdAFEwn8YtfXLFG9zfuGdC1enfWTtFrisBa0pGIxy5p6fOcTETJtVDNtmo/KTuomHGJX9+yLg3G4yNgIfVSJQVmZi2/bFGegbFio4zUmwBSIBpx0r7ukimMp03DGqsNb5COHISy8Z5lltb6JE+P5+9p61/tCCxP6/nnLTtJA6B5kiRFnq/lpV5ypULOinp+PSIovoink5vXf1oGsAkW2A481IQUit+TLZY50TpFkJYLz8pWL7ZewZZZjvtudZx5+o5P2+oWAe6X6uhMbt5Lo+Ss6juhAsRm2qrWq5AVPJUZPTeXyttcgWPGd35wa7R6iBfLHR7y6JMiFJ+yuDNc4nKagfQTYJDSgVRRvBa0E76UMIUGv8rA+ITStwo11Q5cnj2BR+tTMzNy7iGzbU/PT6l9sif4xOT2d1GIddUIG+9y9JHgvUxV8wLe6NOV2CKhvyETjQfxHPUwOaaP+WZI5w3rJ8KGcPT7W/mJUQjwJoV54jEThEM+3PT0S919bD+KcdL1Aq5nTIeTI/fbF8/zA2DmTrOEIqpflUoGi8ryX0S0hlQH9USc9hQn9xgbA0GxOrE+uqJFiCQc6Bj3fx5+RU5nrMoBQp0wkt87IToaYSYvHpiLjZh/n/ImYgHAlR1eQfXv5fbLij/qGWwqon33px8JQQp2Zryfu9+WDCKGi+hfAc0DR/AD+MB56SckgGpPVR0VkDq65mef4jz3wn1FIdPphD9lgw7G5kD0APHYhFo3Ebi/rSKrH62ykWEnMVgPsy4YR9m5gaJkXoI1G7gZV4SI1mruD2aqgX9d/XlLhp1hIw5XYMYFS9f74wE9YFVuoJULCZFSsxuMTqyb6hL4vFTybqWzkXYhferutyFKkESNKJEMKZsY/4aEdABaOeWEK52XRpqJwChKcOx+enbIBspP7B8H9sv4+8cEKyBhYNDeIbOn3EoIE41nRR/I7zEmgHY5i4hi5mRamMbe68W0z1GIfUwvIXYLmx3LFs6LYfp7ZfscjwfweYBjHRNgvafrItbkFUNd9Ge+Sl8sugXcwkK25DWg2ltKk2y9zJz6vZErioNXTPXkWHn1rnf2MgzkjGVv5Cs1lrg5v/rpov8hQF83hisNGvgO53g9NePzXlypFDA6H4mjBUTyOR9XCheecfii6Tkrv7JQ1SSKrYtUokklR4jTtOra6oUQdZwxxU70RbPEeeC0j8HxyMLEMI8n4mRU/uBPoUI1y3GTVPCfmEy2x/g2OzNLHEwdT1Geu6QQQaO83sK4F+aI6XV8x5rp/KRxsh8sfaBNB2W6GY6ino29rLPpXM57DJpovY8jiqWufsD9vmLYLBQxV0KwB1g29qJd+E9pouUF+vhpyNxNbLROUEjTI4NYeEs0eYxqadMTy1DmsJfOzNujiaMb//JpnTjPbqkJxBakkdJahuUPhJOqY9crtcZYI/z5ee91sD8jRxGyxgsZTMiekAh3YGJ0zi0R/0J9dOoppd5qIQzrye7lxJXOPmsysGhb7s3mo/Qrb5xokJ6x+Gdy5Vv25qoTKkCmFmc6Cjv/61m940lSeaCpQBEq2kMh4OWu3/aZ3C19T+Qq/O9PhaL5n2xgZKZ9gvn5B6T3mTXaoDRLNyPBA3LUR41PvrWs9zUJ+HOGDNjvci0U/Lh2PHqeuAPovtCf2hKLre8pi+llzFds+NW1rMKE267oPEshE34RM+vmRhBp86rXuNsd4aLPxIcQnhvIuTZtHuH9tSMurN3T4QGg5mmozTYaBYIjb0XhSZ6pwPveuM56X+tuMchmaJCyh9yHydZPE6j4i5zoEwzmL07erTdncMpqQ3/wCug14cy7rKxVyB8xCKpRxuhZssNxANWM161TRkmGmkva68UpgXfWn2iBYCNfdMtLzdrD5+nOn4324ry2uWt7sO/qcM2ijUfr68M2eY1NmFIK3E7YQ73UpXzsUYUrHAm38mryVkD/YkQBvA9/Ramp6rDCqSIXUa0xm/d25f3HiO+2ypPCqY4rGTlqGfVFczM85iVyqgd2ko/ofWRiDFfmYMMhDstCtRrMJZIzOCfyQXjLRGDAubI2xCQMd2QH9vLUPHqRp7dSWhQUB4vjbC5h01eFxH1yySFTyChhf6CoVHezSPPURs08F5HTNU4YSv0/tKfs6hb6RwaxN1mXfKkFGjHPGfYuq/6TMvfQRa5/e+WJutpnENaxxh97Jjb5AydgTZQ+UpBzehyH4EETVo36HkTohxiLL3CL1SmjAUyVo2ly3zeOPaXQTWlN4F3y0Ee6LcGUkZLIHwre87BsfnnhNsV3OVVjlM55N2sLSESX4+fmm1nU7wbFazzuPXVn7fuHmVV0epYYr7FRl00nwU4ElxsKJkn5fldsQ9A7ak+lbMnekkVJgZz+Hyh6IQCAfxsC8GKjkb4xNh9EzgOeKTsL3zEcUpwg/nQ6Sfzuap28jabnAZ3b5M6eY+I0MW84voeuEJ/QNxfl6inz2fIa/5hIUGawDuEthQS+GOLeX+YDIHbD2t9E44RuB980PX3sdfkb31sUz2NOuAyyk/rpE6q8imuq08nLBMsc1iKiInbn/In+vznk3fKp49wLWDwOhFetcXX65mn1WMKm6zGInWmakHXd8d7wXrvIqHXNB44BNmeelcYuj3vCRm/a2i8vuECHp06gX7FnuEaPpSZ0Ur5vMXyHUQtFuO+mKTfGbU4gQ0qL2RVBJD5zJiEIJs51VloGVt/Xn+l/ETHE3HkaDYZnL/BYi9j33Ho+k0VJwRsWUYqPaEXx0X+jmkyGRHN/AyKr7o3LMjKnBxDGF+xQdS3lzfLhZS3OT1+C2TtMC1aVNl1K6ELvsvuizN/HI251AZMYV8Me6nz10ikFAjUu3QHGfOE7AdzXhseOaJIFuzcJvkzTC6Y4X/B/yoeIV57/SdzdUla3Igg2ueReNHmeIUmfwBLTfeiECO5j4TzKfFELBLZ6CxFjScISgsMLLpwDq8V9+xmymMhrjDaNSYNSLg1mpIQz4AsXKWM8I3rnoCzKL+YxCMnnP8ahKi1pxxAHkz1xjVZIrovLrkIIuF3IR0Unj2akWa00jIOzI+WriXmpXTkr1wuhZwoBcpMnzGodchtIbba8lcrLFwSmV/6oSW+0rFnKc9XStARthvYO7ylFO7DcggnjbAAYgHVldyTrumz9OaMntimHR0KmFibt/cOtFQtBXfRoL34A7MnTIKQxr8edocOT6P1vKauLfqzblu26XVF/h6by9ktkyYc8b13ZD0mVKzdW/f4KbYi67Cxqw01PONxT6+pv4Y1O/cRVKZmHD2wjEhEX56EemYfVJcJTH1LZz7v3Cw6SnrCTQEPbBqiXckQrgIIGzlXgCSx0QoqjsGBKE0NVkzMj67rdddwdBkOxt/+24JX2fOC6dT818LZb8sSVun+o+9TQcPnPHanKtDPMV8n57G8qbz8+BhIZSXLEdOqzL35r8Q83JtnXFU/K38gDP9b68mncuf9ChhZGXpF7SmzIVGhDXTneMTutJJstG88tB3xQ35abIENDkgxkfq2LJQFZokNZK3yo541DjSYE6te5Lr37nJXbCInaUyyvAUKPY34W6p1JmJTtMK6TXbAYuCBAl2ITQ5T5t4oq8reK09eRhsQmJ4VbUdWfh8VXjIqGsWd4XC7L1G+yGFeYKwERB2uAh2L6X9U2s/zMyoqvOlQVJcqGynARCQcCXXr+1BdQyCmtKFXf1pWQkJmYf5oRNpNMWQIcvlv8Co56ocJ8mrL4gFljNZCPAy9dYShPthhNAoxiVInN3K7/PRVXDj1M7+pE445+4+YXwFOugIIFGfCIj4EJ23DuF246v4kanEvC6srvvrBMidVEnQDouRIHs0KIzA0DDu0cUJFGHJoUCm4c9GoO+IEmZp7sN2TtFWjMYSdtOtP5zka5052tPAlXl+qqPHorClG1h+n6alTOi6RGeUntXT7eBOaE9UOF2gAGukQvLWaLKj4tTVcM+Mhf1sm7K7RDiuJ2TmebwUkNTWw/zjDN22UD/WFV+HcvBaVSDkHSo+f+QKH0Elhq9TDO7Q+bYNHQFjyFI2MzQvIHhLNJtJn0s6xcJHtpkOgQ5TsiLhIjqT+PpdJ2xCrn3hZYQnpYm6h17+QZFE1mG6KOSta4AtmuCV5e8a4K6g7TJwll02L6h/he7bSqCYxEYYej34D25vrgT501TjTPV6cozb3+/baVWhQCLQvsnaupAL8mx8RMur2VBolCnBnXrhRI6RadFmBhNSW+bSoGYM4YpoA6GUEV5drsLlrfbLPV7hfL+Svm2mWDq5r1k/o9H7E7BbYUQdcdNxCSl2KUTxPOhNWR6rKMVToBSMCSpy0jvG7mITMvtCoddLdkD2hpIz0fJHqBAL/F3srBsU3m0TVUVC4y3fJCxhF3Vjptjzk8v7x0DZUBmD25zmop1jFnTzDk9BD1Mg51DZ6MIvncQSpcHDvhAQ3b3TwaP1Nst6GwKnxbJ7kSidj8k+qbeFc5mn8WWPpaqn9Wm+DsSM44JvFifgVCmlWgeb+COxzjGuf9DqSgI+skGF8qMufJJP5mBURcYTc11j59Gu2TWtUf5VmTJ/P/FRaKXnFyIaTHwXUn8Nl5MWJgFXqUAcNEtqIVRzSlcOXZlLYmEy8F5aLVwg+wg27ekYqrASHtexuqg3FohJNaunkPdZtw9wnI2HF1R/PiquR+Ur0dMIkS6wIz4JGXClwey3Mi85De+bH5XX2NWW6yg/56h3KKRk0C7qoBjpBbZR3k4f+ah4mJqJ5u9BTb3sElkofWfMaN+k2uhh6gA1kdGbeT1ZZkLjEChkdqgtFqH4E5OHsOAD5Q43BkxIqI3YgnDIx+koO2JGpNWYuTbRC5IhTQJJxLpk+swZwOjxhVY3dwMFLAHraQUVSQ15wB6M5E6JPe+9j84gn7ZMFG+cTSH2dnP27kmIw4fNf6W6hfCBD3VfBldpbn5DRlxCrkYLqxBnRanTu2mXnp/kGf0hhWr94dtDf23HtOGtlpz8u+yQeX9mqfp86lmV0dyi673Fgpq8Pv6qk84aEGr9PQf95zV7gZlAybfP8eq/zVTp9wWHpx3e3sCWTZOCfqwiq5HoAqXyiNDIDtrYXI9tGGzOJCOvHdG0tasMFGM6yRScyg6oP8KQ36r1DlUbzps6zCcf34IK4H6mAzjpZ6+FzZe/mKA694VuuJPq820HlMDDTBe8+Souk3boHgQ7GMK2nfLJsE2CAePmK67dINWlAzyONdaec5sY1KAo+6NZAlGzvsKUovOoHKrRjvhnLPDz9mBVXK9oHueE3cgXhcZniWZqek2aWHjzh6R5BcDHELzNWbViafaWCIrQekORWAegEXn9lBo41EykXLBRNiVC5mgP8D3EQxYpZ14ylJvXsnZ7sdQ2JY0ISzvB3xv24wqOoJbs8myL7bMqA3wGKAPdkKah1G3Jf0BfwCcCC2f5f0mC7zicKrYNIRQXoyFKkXcgqT2qi5yJwFSzxrN1760Z9p5t7QU2WEfnQMSx2jXT17WhGJjoift+wHuHk47Tinhrz5c4/AQ8XJ62/VzEj/q8wORHkpF0kenpDjGzmmAcohVskvtT3Ha3MeTSmBr8nuJStvOjIZ7i//Y8TuglTO0/UG5Xp1VMpFxOw6k1WvHbx+AHOtH3a5wi4hKxMXgJmcSMXqYtTr89PY6a4oippsEn1ustHZ0bx9kTdmhGJDKg2o/YWkyYMlau2G3ClKxxANUwJxuvNc+nTjGO8TAPtBErAn5Xccc5QA5QM7wlGqM7lP6sEMNQxu/UCOyjsvF2mDs3M5CQ4mEFTHYHz0iHF3GTi9AAybK7rVIkGgHmbryqp6DRrQ0/cu+67tTxKVHytOw5aiRFNx0I7m+Nl+dBz7mcw0CF749IO41rUjGUpae2RFkiKVC0lAK1evSH831rcolTxDxgQONm1tysHwMKCPFG3pi8DAgkhT4Y4so/xhCdKKUARCKE+Zt68KyzJGWmEmcTK0CaDti2h26IIjH3g1V69Pyvr/9ach2+WkDQsbJAlkpzeiNkZDShIuTAsNb36gx4QNV0OLMEwLBHrMOaJDeJRTuS5wXbkcwHDqZRkYaA27ijeKDdYDSYZR8Wd/OaeFxDE35KwD/m72wbC7pCkcElHPJ/fWq/kk+SylYCifJR64t1eZZHM4W9MKffmJ/f+AzrpCXqtZCnUBK7iz0I7C0y957/p9A50P5PODm4UbPUFy8agJxy0BBwLDtLtaRIjpmt0J8Nc44h7pkUyq8uyS4VIjoL+6Ft/oawFV+JDpizQg0La76lrveM1x6mh9/64CA1St/rp6+vf3kRtFrSbWjp6j+sId5mNaOJbeKVHpuCJIjWzWc4IuO72JRW9BYSdCcxuNzPdHjxL0AW50a0rmgw20Y45ll8IUG3kdr/86Yyvj8Wm1GVITLDVtPVzmQqNv0UHlRDII5i4FD5EdGSJKWM6at8vPr8TKNLHJaz9DfU22JwJKboCDmi2iSvysLvYfs3mKKTFN94vgvpX2w8WzmAV9jiKos3KfMUTwuIPiIZWN5h1teqX4RoNX/p1qWo8QSXhtODceG8cNZ+WQZp5ahVckPoTfm6bvBCGkmd0dogFMbq9+jGKLFJIvr6p4nD4EsyerKjAPDY2l6zGCH4rjT3jg0bkZYdP2c/PWkZ0v/v318Ma8ONMfKxiegeQBs9QHrXRg+27cfDOpOqozL3Af//CeA0yVXLi8uvXpjDAfXsThir0XqVUibzAkd8oEHnFd6M9uJdHuNmloDX0itt+8s+91YUYqCnffeZAa5aSKuasnsCoUirG1AC3eWw7gZZU0vQHfYjBm3/e6Uthve/X5XOSRo/akmkujYvzbBahmeWsgI4EQ6AqKB95xTNOWLV7Hrg9m3hs3EbzxyGcsPOut8LVfoVNQSkUyLfcE40XCgPNsCJr1R3Lqg6m9KAbHpbBmWl08t65lQz6jtS8DsXY0lkeiPAZMIlOLKKJM5tDCLFnl7ZSO2Rtf4A359OYGjrdJOkJP/nwMTc4RamZ+tb4U9t8A0LVf3yaTD976fAPzd80E8roFz4AsszUjh+BhvMVFaDllIq5HNmqtKGJP8jkSEhJWxov4Ld/6hTgF7vk0++SF0lJ64vZ/oMgMoS5Zh9MzSV67LA2JgbhHWfawMUV0TLX8baRiZ0vO7njSsBqU3J0/j8z7KrX8YbWbH1yH4k3L8i1ZviZ/cvS4MZ9gl6XeUfgz/xKySJPsJbmD9oXtUXthtsE1Cix4f1FezIvppFfy9GklAXOfEDlHvDhq3kpqyJQhYe3HdWRr8QhQYY0BTjLcLRILBVTomYipnlkkYtW8a1A0kBjQZuadyOl8EfPsgQED5RkmOPAwr+6xV8/MnxB0utH4i5mBGkRBNwEg3hzwOmeN7KvG0ECrJSP0ZnCmNpofVOA3TMln5licgik+Dk3Cw4s4lFmuJmNnX7uaa8BXf4wdKpexWx3qWw9EvuyuF0jKjbXYYTXDgVMxXJCTCfiH0KR+uMN4snSA5upG/aqMk0vQr7cRoqwi+JC7isM5pb4oGVDDvOc2HPKHddebkAaL6NLlB6EwD2FoyBwIvx5nvdHqEvm3QXf2YxTKUQGQSLbAo1Tn4x/wYlyMtnMSjK00hadUw6piq1Ry/2wjwzaCYJZiMuMp+WTu1Ogrfvry7cn2c34ON6IHwqeWhgSwlZ70AGuohbDjwPDbwPSOvqu440/+S6nQMullT+OBh878NEGblbjehvevr3m/tTahGAbAaoz9LLdY5DM9bIJz2gvW9v9xOWDeNtlnSsQ0xrtjpJGqZiwYV2DsAS0EVfbhTanzq2gG07lnYUucSt1A0+uTt0f9uaJLLwfk2KcFOlnLSU2mHmgEX0uNH/DvunnaXZwcu0ArIL4Bafitdj5HpihbzWR4MdOFZLsSKMCLefnZf5U2uv1P+M/YWK+iCKIs/4dgFB8PrPc1tpMwT7n8/qfb78ReGfX1ItOK4JzgdPz46bW5/7sNEOANDpqjoE25lUic5VLFjTMHEgWpCTolSoK0SG/O/aIwJY0CPRwm3+k4zKwoKXSc4g6+N7Q3dQp29BSYLMXB3VJoY9W8IHO7Bb4lT/wI7WMJwXXHn6hchFZtHjWiaWWO3lZZeYBlRmDMBitwyDLOdELnl+v9WfQjTr65kH3jTyy5Kos3Y2rOJ+U04v5AlVAACH091KoQmTIo+TZIXcOAO5dL7RFvPgaAhd3MiYs/WaKh4QwSN/VUm/z6V9C8wiK5IQkSK65j7Aawt4K+Qba6jBbZg7jN3e28AOrRkMVo8I4k6QKfdq1qIL3pWgFXiIY/FLgoC7Mu5HVzLn+qYJh/fvvEXx35SSQ3NaOM9hNhF7Gvr/Q1G1NUZufl4cokETT2ZaPEV3vdmyjSz2gaCcR4SuMyVY3Aut6IObINPXGdznyIPv7QPGZJ4F3OkDX/ds9XLGeEFRaaT7QNok5sJ1CpQSucFCLtCV2WQ/F6qPJ+Cn388FNuIbPpNXXthjEAL3OKHFCedep3Ur4QkQgs5/TDHwwQSRME4AOtQHqR/erI4xL96BI0Zv1g2qEFSwUEsvmsdbvxsUbfXlkHzf2T8Ow3JwckgubMf/TC8PQyTxOwqjFFfs+0IikrpaugVkQ+7R42R5ORLHj6NsvSn9cfBm1i6uAPLdaXL3fEueAlXUNHZf8BouD4moLzAdBy8BvQWZnY+R/2Emw/oYhHvZQgzARvSFv9motZ0DrHu7cb1BDwmFerqHPUA7P/6F0lULYphtxwpyH0zsaRUKdWk/nmyoqjXQrWKF7ErhdNIIrZoOOwA3yxML8FAqzuT9P/wBHvpMPJ+4Cp/rRxG9OGZmhVdxxhRQboRDZe65Klb4fVbKrm7M/u7kTVBvR+KCNGQ/HR524yO8kDzqIsJp5ARZFtxeGeYg96m5vVB0n860NEAsj9P6w72ItMQjI/taZcUu5Oa2Orc+Za8/bB5qLtgOkTE6P09IXug3FMVpiMBQONlQz3T9uCDjNoCzj6jGk6ZP1f6dgzmGtLvmMJZ1IZkr0DXVgss5ayWETWJsVMHsoiptnr6bfeUphg/I5mPta78g9NvozGHaIYi7V50O91qZ63s+hgzDjlEJK944aYwr6kjyX0UdFK0nIR+Ju4/03yJdNCn4U5iYTGFqc00ao7DLRXIpmTmNDvcR7BGe/sy2EA3NunRIJYBf3HjVEuQoIczGeI09AahSOgSchCQ7JDAKvtp8ZzE73hUoPcUifozy9Gg0G7OFFCWuseNCa/HXOaxo3dsfYRvogp2XRUq23ZQmHYknp/SOtEZWYXHDyDGH7O2vZvQziFcNCG8lyj9f42idYefEMtgmjpdOW/YrY1QKgoQX9cR1M8ceilg8hCu4SjFjndFzQVX10CiHsFiSc3cAEBVZlcdz6bOeM9xnKTD/UyW+S2byfvZEujVbF1jS/fthzCKfXRIjKIrK+T6wP7j/ybF+NOhOT+Atv6K8RIzL6OHV6eCVwSqXeFF+LlELs63nr6aER7a/XaBHBSOQUgZYHRgCeDMT+kZaN17ogC1xoFCYgNA36YO5qlh4PjyIg9FIPU8liZUV7cO0Qs42s4rIJEDLd2JlLi4g9H3iChiikL8TIY1mqhWiIudfZt8jQqdxiy40v3vgrN2bCVAIa0NEjbEcsRtD+GszNK9ZHlJU9QZCtNH86kDKgYkJCwp4Wu1S/4bBQF+n6BLjPLPr+Y5BxuSVQWCUW7yn6vB2YXd3bci4KpFAtrH0Jo842LIIt1JuHnb33i+s/F8th9GPRMRFPSX2Uo6fwmoDkHuHfykYDvpQNTW2cmdKpFKV7qof6PhwBRZw8Gma3llNtB7nvvj6aOASHC6qZi9NitvjJg3QIjPE1EQZP7ERY8gMmdKmOGVRg1zUrk9X9MMeT1S56vmdRJk8MGZbAUvA20zkPA3xvcDma2ODeURld6ia382xcJjNX9R3yIlYmzlhJnfRat8d/PwTc5ZEV5QY8HXw6aHZQGSfgtfJ97i03GW+znm86ILgO5IMzXrDHcXER2VUgjhCftPN0NVtGW/L6YnoNFekglpihKR6bZz4EraXUYcWCzYupAB/iQEPOurYpPRP5UL3UCP4bwRAqCCYIwGzQTewBsY2EIqIR/7rAEmfa7t1ADwtnoILDhhcmvXgI4SZ4UfquZ6UQ67b9H8PTJu/SVVrIYS6q8KAv3CB6Yf8pFMBHeQD+JK3KFXC5VchDB/IU1YUtaJPTqYC4Rv5zbSNaJslXiJI0wvaiN/fjijjRnppqozDXjzGzPRY6LM55Xm2mDl/4uwXknQocuDpca7TzLgPUoc2rhtLS4UoKZxXFlL1VQkNEmyXzUBNirCTfzBOjt+/mxfd+K0L50DnxYBHTgw4LcxReB6p8TacWg/n6SacfzOWdqyme7cdqlgAADa125KdwBkxtENwqjl8lest4zCN7wV31wVtN2eDtyDZwX9nMCV497dzMtrrHMPaVvwoA1dhFYLRPPDmt/MWqTqUnjJU0+EZxrPaCHdI7WggVmnq/Dnr+kSImwuD2Bi/Z9VJBmkaTlFYizIPXxGEataABYYSfpms2NLJAvPgNvhkyDqYAQ1sKO21fJdd9iiqoY/4rOuYiJa9sSnYJ/QaeBhal6WKNbpUiEbX4fxAsiqHaLQ1j01Ir5uv5mDnwxurueBUeNpFWJogp5nnGgNvZ/5gYaB4C3Ibo81marl2beADHT4YRyU+C8zCpIeNzqQKZEKiCGBOeLMq5voYMBi6WyAA6t/Rz0JBd2XH09bSRBUepXt+U+Q+xzwVte/8QUyA+iHEbvmLaEWcfM3lSaMSUErmZW5VOKbLgfXAhyZkK/7GUMUjFPpTuAwEjL3f+AeCH5ueF+mMsvj6/v/UCRiwQp3gCrVpkgmYgRwFclsuCWAw85Nw2dbzDmcyvLCnqV7F0nk6EPknVAeZO5BMiv6f96VW36vUmpaqVXvdF66MXM3ZdkCAKMuIlAtYvN1HRnUO+iHa6+I0Gd53En8fTeejpqXYpN8PK7lgb5mi0QkAayWNYAqBz/sRgRiliYyUdC+89jUfG84jTu+81QW87QF/Mla4QgpnEiAx+SsWl4hLFoz5STAMKqXp+SAZA8DTsZ+OG19ooXAsXxE7/GTkljNtV3K1bfyWXnhn+Uqd+r6sgityKKzp7rX7rud4V+JX4VpimttSCaFQHEuhDd0LAjThslwtPUSpMyqs/WdWuaSyM93QzqUqgGyWiGZKaevZUnVw4IO5dc+Sarb8THnij1cbRyXgIb5UO0bumUJhTxVaZCzC5rkQZYKT3QKNKSLPgLJNx3b4PlnIYOC+S5PDVEL1r+qn3kU41radiwJsOImz5KvtQ3Hdg7y58aihHaf9LbGKkJRgPz9Ec9dqlsg3yj1ldkU3nl+IWl6FJA+GfFnkNJA08NrJCZOtneY9Jsh6mopaMmuo906/b3Ap7VXsWeKHAyfqoAZrS3+/PAMsd1AMvgWGs1CuDgI/IPNdHkzJCHsrws0ZFmCeqSF1dBwzIUFt6tr2UKgBcX1dnCI/jtzFynpm0ZbkwTP+e1OO3WmUJIgy6dya3p+EJ9d1nreVNHYI6tIpShJ++40tLUcz9c8eIvelrV5u/cM0Z5GGpzBbm9CRM0HfkvX/Gh7mJnC73VuKFH6ymztZ6m+FbW6HdOUxW8oDGoa1kaMERnSjjw46vPpYLURTCOnBjTLMg92cTv2aWntxCTFrSRigHHtx8Sm+wAiJMhqackUxEhCNFtt6Ycro+fgsDAYnTaP23SV+Q3zuQ/Lt4WZ9wnSJrz+i8vykqCJSF4wXmC6SoDD51a0M/F6Exdq/z2VLs1tG1keTOK+lltdKQj0fGRmSPaFbqAo7BBYy99NnsANgdX27Jehjlt3/Gds69T7jVGsWzw/rC/AvFI/NKm1LHtmVPN87B5IcLRygOn684jyPlfu4kNaYm4cTDD3N8VzxGUwZlFJ4scbxSKJ+8zAin2ll/ZO6lExZ2Xz5ZfAsTZ70qDAVskaVRwMEwvgeNW2NHrWLxmJWnT/bgSrLzWOSrNECFmSDscb5QZw6GC+NxbQx/XL7jhvr2Zx2QQ8ftsQgvQ7LR1S+F3lJxWMSGD46Y4C/rRvt5HpJGD96nlVO4ZD9ke7WLLMEUkd8WzYzn5UyDZA/Ooqbga6fm8BwB6EcQa5o6ehzzytzoaVOPC2TlpFV4YgY/fHY/Otyl0XTH7+eGtKOG/bM4xQG54G3qc7S+ka101dxaFGapZPAMSHM7la35GnjTz3FHBHWQYSgzwlRnfDL1Yn7nJpMnAMQ0sCYrmJShGR/zzb0cqv+hjs2K/6ieCmkyJ00bmVxGZamdM59sZG9S51bPFkMaHCvrxG0tf0W4e7DnS/SXQ6zi8DqLZ6+ij4Hk3d5cpNNypdwfj7A+G39vNxJQO0lgrO9jpzYEoykEI+FFtVh6Oj5Odbpq3hUB6waj9g7tmwk8VAHjM3WUyDgaBTjnZ46eSiLzU/oQB8oumbMK7qIt/lc6cPBz3bObbrMNSGDlliG+ekMkGm+9kQn7ckps+QSc7D+3JgvZfJKNr7RxQg3y0VCRTpY9Eqs6KEk27C/6G2hku6TPqcottMdkNIFta4QqgiyYrdrRgZb08LCAZUiE4WZtEG6K6OJS/xEfTkn2+9PKhUfOSsPK7qB4DWy6RKcthZSEGGevhgIlTQodUfyCE6f4NTjRajC9q2QhUPU12fQtJJ7X3o/Zk9Z5UAGFVqtTUj6+Le1o3QTBbbEnmymmKCwbwi/m+8kyQzMUr+oAOEwqnAoEZCDnK/hpH8KjYdfT4KqYsjMad38uwK0/cYO8Q8LY/JmY1MCrLb5jjTGZ35fnOBWWsVu/eMn0yp6v5lkwp6mN0QlnBZrcioyumWPidoCZIvisA32zHUovtzX8hODTQbwh+yS+Dp6ECSxsLt+Dt7jyqSZKePD+e+hpf0awJ/hGUNt1huFCPIgKDL0ek8M6nWgLvFXNfljymQjbG+WxD7tHq3qED++8cXqZgy15be/OW5mXCeXN+mOvGgg/QcYTrto2teRxFKL/VUkM5b3ANebYZp3KK5rSfO3QO06fKSY6gv8ihm9rOEUzCyZ0IsfqOyO1FaO6NdZD/3rmnxmR7S/G8vLaxxTQ0Sgq3B6/1vwKzfFpbTs3df2RHTS1SvnwqmdSNOdNgvI35SnzXcbp+XXOPeRut+JNSHbjvDvHiwG8dN43Q7Q9aQLMvXss4/dq63NzRIBWJ8tEub9W3eXt0qrQ/c/27YwvWWDLNXsaT5coSMdTqQJlFz28Rr2+mLPP4WzoGgXrDIdA5iz1uqLf2W0y9Q0nvoEHJlmyw8QC4ZwIXkcVbOY4Q6Y0RYu3VawdOaECP62Guv+SudkFF8C0rGKt286IraNhL+E981HOzPY5aU2fvITCnumMmB7u/e+F8yHfG9vY9LDPh0GQFl0rX4eSSG0etUFwiqRFvCZXAbPyMlvJFYZBGoSHYUfdCSCxyGLa8OQ8l1wSCl7cM1Y1f2Z0W5n3EqeGBiGCvNn93a9sPVr2/UNVO3VCid8YfeVLe6mtgWHpQG1G6JlLnS4uxVjJS0ORAoHBJdRl1+TBsWR7uH0S/U1bmB/5IzOKDK/I7L3wPyUQcGDPUEStGRniAXGkkg5jYyxNAjc8sYHwbcarhBJSMqxeqValJptcS1quuBwFGPzQkI7sTlnQxogipSYQpq6O6JlwRLR+7P+3somlaF6H6lHCdKYeagdIpn3b6EAzWKEFFT0NYZqBHrXCaGI4worGgFgLpUtHeMWBwKhtpzSoLNtY6LLFbhdc1jrds/VzE1fUka9T1CB7D/ZhQe5Zmgq1Ccve5tL8Gm9cmwRydA+UF/Cf2/HmR95sSXDEetZmTvRiJzT+OIt9tTVQg/+aWGKRh0DZateFOk+q+YhzymbcnFsK+ToUOF8D1r4B/1rCzABebstE4y+ZGB6XJmnixwC+s0qzg5TuLHkLj1OzVbnolN1NqzVEKg8841kEIh5liLxHfMYFlXBQqjgV3lB0isW5W4mvCo1dDLCHHvculEUGjEohhBF0riGphcSWOaXCOaILXf8qTEoprguzFsLyj36veDZhMo2UVzFafIFRXEdVBYYoWz7P4HGoo0//cJ3CDGesShCvEjs+dp8KTwRhEmZHKwybqmPdNi90rbwGEoQzisGfyVoyvjRsqPX9BZu8EYbaKgjt/enZk+NtNb1QzCOxmSnsMGGiE995zMqrTfFTRKRY/R+fYFiFyQyn5GlJVkaDgcKk1/tWRad5TeYuGYcj2LOgR51SkF1PZxmRZB2vvr+A96kpeIOFyNJ5uszltlJuyFT2IcCvT0ceoLiN8D1jSZ6hVS0WFIcYZ37mU38qWQsqZv712pkNuMgQ/Eueg8haqkswZKB2u/aN58NEYC0dMekK7mAO0sGUMkwzCt2bO0bxfoJr0F8GfdwtDHFL8QpmYL3A1stK4MGTHBMHrMrq2w/kZyrzLk8YC3bfhd9Fk3L78a7Ki84yl5gs2ltC9VcP8B6kYiyNv80aS8GqOfnWDvHGDlz0Yzul0tBavYx25y9q+zEa9ibf03phfYsCnsmbiI+jCEyYnEJ61u4ALwYqP/qRj+lxR6lUwdBiU3FcbEuZOlsglrcuZQgbchFtzTXBDXP4r1bEa68WCaIPzZcj7Xh5CzLxkBu/uHZmykRa6d+llqkLveIVnQN1pVtt/vhUGyTHUUPIvFtUKcGP5ie6toyFF+KFUpAuPvINYp4RbRCTT/2FhZT/924Dcsv7UkIIFThijT6tpBOSAE0MKY9So1yfF+K4mMakQqvWHp2KoEhVJOhCd1t6PAcfY70exSLrHdLJ2oEZAuopJOE+000+xLQ8MwWTj8pIMjdFrUuFgxkD6T1IE0GXns+ls9425QSB8KQL0N8Cx2G/6YLHiI2uJqw9hlSqlEmdXAQI5MvwmPn7C3gL8pd/rPOKs7KZ66BQLM9+r+K3JniP9c6cpF1xfzAbrjLK+4cfuGPW9pHi1HY0oeg339b0wX9shHjOGHdECOl9LUp80W4hEPY0M3pSljUia/qCMFVnz2wHwYmUdEU/8O9wQDClcmFHMXWQ+Don51hZJ9zTp6pic5b6nOuLYvE8rUfStJzk8Lc6lDX9xYbYphM/eU+Ujv2KXfJeekI22eVmjTbJqt2FZkUau/iboycopTDnWeo+0YklfMedrkXPfnlKFAil/qoVWQ49CqkQdyVPozCGB7CQZBrGHNSxLwvcwREZs2Lc5R4vNDxD96mqIXYcK5jNfPsk107M8Kqjj4Yi1nnH5HQsoMOTZSFDv+24rI3U6j6jIRQ5ow++kzaMElQWs7V/9xm43U7A0fLtzxzi8WFwCVDqKOT1w1ESUjSTZPsYuDTTnYtAoQ9jizPCwPmoVzYgnSNuJsFkpnqDWUC0sof2ilBPu719P5iV9Psm/atJKjCm7poGm/cgLNg9SiiuRaIhdzraK/iB/3DWKJaw2EoazTItYH8FRMZi3D6wLf16vQ2c7U7qev6DasYN6j+DAPyh9jLqz/HqlaWeZ5Dk8ZLfEC99dydUqSjXAKcLNRZP3cR5XrqWKniinXSKAkQ/MGzvnjFeOv3I6GTEzGjCf2n2CdCQQ8bNpulBI6XqvJ6golhb2spwk6wDV1Z4Q1bdoXOprRd+fHikiqab0tvGxSr1lVugvQRyN26QQ9HZAlWh9BmplTVDyrkeTGcHLN7HljPRmHgC8esN8L6vQhnTYPmcFqG+beL9lRWDYsVtpyomJMoB/mHQVJxAOlh8nV3QTKXLsPDAN2MqgXkKCczrty5dN1NQbflBaV63rfhtBHnhkheLYTAQTXPmvBgNIB+vI2StKyoBof0oe1HDWF77GJzxSDqkX2F/LzQRKPYNxZqoBOW5ZeLZXVttuMLxFaQbmqJPVZi7y35NlOBNWNQUR4dA2eWXOiOJHt2OBBFEpgqFWxuwbNO7QJrOUi6rW+z+Qko6lDu80oWNjksNNpctAW9n/258Mf1CUwQ9RQmcIH4CwK8CSaW6r6TReeviPxF/OuEHXGu4q+kJNSV3DfvcuG9TsGRne81A4DKo0Fz04Yu+bhJYt2oQCrCPCo25LVuZyrg7Qlwx5A5/Eo2pdXUsImNw9E34PoUjb7tBNi9QZgyHCCtHstgELWgdTkMmZ4uun9FvnHK2j4I7vNiNZkpZNRcXEX3BxG1OyyaZbJzgEyKX7Xk7eZca74eWgCCMVAaGuxS5X/lsgIZP7JOEbwSwxP9V0+ppFcYBHYcPR70YKJIJOXXqDMby3Sb38XS05AZKdmpGSp97qHbdJ2JmXXbwYB6jHK72gFZyuPi2fYIb21ctvHC/wX3u4JzihOIHKjYWrc2VUdWetGr9Fa6UYkg2cveYXFSh1UHtNHQ66ZX+HcHntMeHBdYsplZk0egMS4tPZ5/4qd8MdNunnueqloAi5zpOTHs4WDNWBtaKxWOyoKqDckUamgP8HVkVYTCkMgI5+Sft34NFYioz26A5dGsd80Rx7KNosKowEPlYkvcx8hadJ4/vsYM7wLO9tji+kw5txeT1MDdP7KSmyCmHyjcp1RQdMURXxICdpuEHgOHjaHSmvydfO5Mblzdr/ZmGVGay+ZFhlITFUY+oXrMOzP/kUs3kfDBaCdy0s52Fjrstbw2mH0Xm3UsHV+JpeekFOShMjN6mUxSDcN+pyvdS6MT2a29Fy0EmOZ/96Mf3S7Xiuj62ydFG4ITt1v+bt3/KKh4L5DriimB7IKHrw0eEiTTROltS4SyMF0kokrbF+JrRdtbKw8Igy4D2tvwDLhhzqBMs//l6qnqemo10iq7cl3pKSIQoTvQE4ntG2YaiU3PYlY14pOzNLSDBINTiW3O+UZGDvVM1vFaI9V1XH0uUvFuImFaYai18ArTKR5tNheYMjzaRW5GZsk3SbpipvaRJGgXOSPmkQ04qMIYFgAhHXXdYxgr+jJERRsaHAbIDPfoTSPsL6BVi4BREZI+pXEVeiIXxoYyCvFPBEmX85vetWh/865LE9Nd/gT1bSfmfdMt6BZ7/u9e3uMkTNdBZvXl3T39NforIMet0Sf5FsKHVAAB8C8wwSHVJM7L7Nvi8lVomxc+H6ukjnyeYMamSNBNgKsTfQ+zHbvD0b3sXRGY9+0MVOAooNjHUxfIRLBLCSe/73ct8/ulwTNOaFTDAovnn1hXzkevQ/jtZH6o86qGaSm9G5R0+LbOGGrtPcyxrTPMVH3BiCLsThpep22su3H5A/UjMGHv+/B3rCZgn59kOlxOcZGcH0sR+EfEEuqEadNdQ2GWN/bWrQz2/TyeW+LZEyBEkHtVC5ePwUAtnzrsjv/D9tHq3HbWSCJhmbjE7KsfUkNzpXBAcD2b/axKu8DJPd5xvux+Edzp8GpGOIntiHWeLY7wB5iH99ARKBExXdeCxtWgaKkAFTqi9mk6C8BPDQ9qkDd7FJ2z5fZKJ1gzxIx8dqcTplvY8iXltp89ZHJsvl5Y8LZ5xJgzOkVHHce7EUvAQVYQpveqcNoKFsgi/y/QhXuMyuETCpFUhPmajBmKpiASowAhJWR5XFLyLd2vvxt/iZNCNDQ5V3s8j12Opf5F29ObM+F4DZynTNNwVAFrTdpW8waDMAZ18I4z1nUhd/jwGHH6QzOa/5TXgzRZuGZky9ICIAw/kocSuQeIjKOcbEmzhcVzaRI5m19Bqnuj706OCcLesP1AJYKjNV8dzOU0rYwWvyb5u/O1BRI+1jU+xasomQfPEneFsBFf1A4ZP3uPW36pVWbI0JZv0Fzb58HBroqXxE3d22xsXy3Jb6PY+5SDgNpXkzbTHw/dGb3MwJBm0+WN3HGrWDkGkJhaqRCsyyTAT2cNW5q31YROrUh4gHZdJHTSbj2XfykslhQInL9R5Yns1JvG6NlUfZk6UFg84cIQXMRcY6vpuMPq29uHknZd/ztUMSnr3Okkyzjsrveq7GlLVixhbwBOng33vIYfXF3rzyFdkEbXuiUKzK8ZP/yY+of6oKRqUEwBFEQFnCMh9eD5AZbT/CCOqFXfz0HTj8W6xtpzQRNgF3svEpD2LwhYRViiHzh0jK8o2yCCgyk+tIwQjHHxNPE2PKem3gZf1lgmw6Po7FKZQDYzWPGVUfULUbbHQVQ8dFMNsqkMSHJofX91rAi26DujDIBVJC2tA4/6gR7Rp2bMI5rOrozFLzeI16mdA32lbHb5PbNRXCloQSO7gvq4aZZzCEL9VM5E819ZFmnqDYsaPw7PwO4On1+WdvIm+6Qe1b7M0vqb28fNkeQdUNi1MuRFYWlCfEv6k4kFrIcqNzREo4e/teRH1Gq1zP+DD7LivC971c8LWoY2j29NcQrzP1pEIUXU5HcUfXUkM+WGJLMkuZZSQZQAwHccFSiJce09N/9fdPyKzXwAvPeJrgiRSYIHbGW6x4dD1o8CeU9s9ABoT/CPG485QWowK7dtQ71BQRhioOPEy1WOnzpSOz5DURQHmR6WLbuzlGd/TqnCT/nGfe+XCZf0o8Pe33WWo5/c2Agi4IG+MRYtpvDgCkjcsEGYo2GyFjMfUrH4pZDK+iHPdYjxUQZRH2/CvxEEXxoqozqCHCsmS+UuGC6tiqNkqbCm9gzpNzk6JlkT68CfGQdUeZ65cY2/qpR+lxsLSISNNt1LhxCnYwKZIr5i7gC+ANwBGCwKLImXDKDpnS740h2LnRx1FeVxEAK5oQh7KXvWw7s+3weg4RmDw6mv5l1HKApTRPYJbLxzcNbM22IzSIfUOAVO1psUUmod5VPePBkJKX+1kjknvfXbqgltNkOj6u6D6T8v3ysZiIVseTciO39kQekbfS0BeuK2siit4sTTMroQJbGpTIIemV5IgkABSquLZHSivOQdctwfgR3BNejnKL26LpcZVClFDy4Yh2CwJGmpZzggQOdOnrCk1tLNR+nxvzjzAzJnu++lOjixCtEOHPSspuc/vVbwbBpnu9ybr0sLBqP7gC37uecYu6pCeFx8o8U22O0oEG/mecEYRwqfjHTITJPOGOjQgRsFYm+2HJg/td8wK9J3U0wAzMG8dM5TJpbXvpO0FNzShAX6howDlDvXcBl6uWTezt0XvB0c9IMtyTlN68rr/0hzmK7LEeLWOv9VqZCQww1NCfPTn7xH0P3UKOZtUAaPBN3IgrVKsxd3AN5WLCOGnwT80Fk2E+WL2tAaaWQkrQGcOv1zM8+mBuBt0bfPBrGTfXDk2OeBGaNrBav8bvsk3BGu3nkJQAPCc5yzrj6OuUEEhWipsr7BQ4gBHUB3WZY5RgvB8HwfhcO5sJJ5LGvMKOgFJ98oKtjwNSzpIpMgX4C0TJxLp774h5jSRccKz9y4U3bM12ZgI3ITqnSIyQ+RF6Wgd0v6vv4cP7mVbcPHa7sPyijMw2AFbbqvQ5K8m2DKHEJWhw8W+hC1lBr5uU0LlaaWK2pScJ6U9ysu+5UwshCPgGmK+mvGUNLdgT+iJDGhfqaijo18w3gUvGAlrX1Z0dOpgrGOMpdFACLK8AQrndDuZrDIvbjC4X21YnjoyTgPUDO1zaaIYIMD+BhaGPUhFuPpz8J2R0AJBIiGAzzSEnbaOKN5ZqKKSDZJuguZZdbMeZ0R8zbKznOToVKqIUbw4MXh4PIdi5361hKyPMftAxnLGijI1fT2zdZI7MUe59VNw7gAN/7hdyltf2T903dhYc5AXWA+CtyNIfw1J/U+b1XlN5c3Xws7Rw+jYx4lvtDGXY8FDNIlzJh+P0OxWc7h9n/lItOwb3DCz1yDoHFGF9Ie860CcXiVOdqIO1yCyIQpMDVdNs9qANjN1aIxv3zIowHzvB0DVQfmslGXffDREJi43GsfvH6fH/DDXRgniTRr0uBRXU9pElIU4/kzSGDnpCoB/YYKravUmjL7M5TfDC3ZNLKQhJe579MLCYW7du9413ZeTPkxdishMQ2BNCAYYMRFLVLaG0tMw5+dcph9d5rQMRucL75vR5fhVXzgEqc1HRBOrORrvRvFxecXRaA9PX+PmytHSRMjyr2ZGhKBOnJmBU7BVUp/tJ9Ey0ZtcmUejv0qctcm94igbYfYzW1AUqk/+93s2X7I59INIdAzst8Vbrzlu8yji/YXmNxQrJbbZYRN+ZjMNS0NCTZdczf8epSje9+wv86pH6jDzZknCaN/W0iadrZIqdizfltgi7i6hSGYiuJvDkjb04wLAygig4kDe1wroWxtkwR4caACMbLYWEC+SGpHrvciCbU9bPAPubwS5Bdq3oOwapc307/9qAaoNIJ5cMnswjLNi6z68rOS6RPkIUcLDhMKiLy+7oNxRN1HWuf7QonhIRlU0pMxScEc2xRzepiQrwQjpNarqazb3yjZVa5nPqxjaQy6isRz4eBK3psQxMgIN1ylSJ9m3hWrziEQgtU0Qm07AH/Y8GdTHJi80XsbOEKzwNd8dmC5cf44RkDd0kLhXrKk0rB5PqmomHxFQimUatMtqEP4x70ErSa9UMgLpp6zULOMAgqjU36DF4+uOnUug8zh7+ITTdW9ZEO1dC6WLXTrfxAZ88mjyreRpxyDLoL4nxQL2PlUWA409l0xiQUGF/jUj42rMO/iKQDgoDatHQ3cPa6EhHG6bj6l7yFCujg8BspCABdzjyRVCL52ytZa936Ppcr3Ns2aQvhYx/I/IhnoHI08hgo3EELwWKOiqo+pAxOSOC4uxWyOwZt5bucPFQ6Bj3XSqo59TF7r8F55JSt4ZON/ftCno1VtOAWab1zcjYpkWJQtJMkBa3cKMoCKGXSuYleAQ7MP6qKFGEX4VBlv/kkAByLoF5XbVEZbJlLW+loncltvAzBHgA+lFAABIggvkUW0amBqg+Bpf8NwhE7qistCtwK5LVhHgxtEzbkDf121fm/i1Oxr+2QKkKSqlOdzb7Hj7WDkCuViAOTB2s7E7jIzKt+WRlziAXsczOxD+xRJk6JOkj+ZwBCUHkGU50TXrybDBLEKn5sXGvOmroet+oCexN7+dYhQzW28g9vPX/nLdJybYcgsd4keJkl56eZeUuUlmAe9OqfByO+SF/R/K6AzA5TYcK3WUC6eNnVfZQdaJIyJCDRSCjuicHTtIkzhN8W9x40gh2GoqSO2sokxUajbHzlU1D5Tph5HrX2rUic+RANgamDsLejKZUC9UGQTsVlqzwnFPymu6/mV++HH+ZkyDxaMum5H0ZzWFecI1l7BJUjepUvYcb2M94pMlW5co0R8xK1EPo9edcxVi648HKsqXid34VQ9y7TIUOTbvvnt0jaRFxmqH/oDe3LKrmAuHe18gRB+ViKERjNPhZTtSmwA3f4b/NKPlCl0QO3w1RoWY2dJlm5IA/I05jinP4s8mklfj0Z3KOXObI48mE7DqUo4MSgVGPmaM9LxqIXZBttQ2thHUe5dn5YPRIfjZP1pLCDOSTjYmlWvlotXuy/4qEs0BnpohjVJHy5J4mhL93kexV079GIAgjJj2QSBVJTvLPeJrzUC96BF8dKm3Ttb0Y/HocXg7OnTgLcL2ao35dTuM/3s7kmJmVjmCruy4RoNu+wHE/WDPCbfLln2iuNRpzaiKKYa1Bb83q+f6rCkPjb9sJZf5xbxuIitFVOSRlZhLQk/R8nx5lZ4X8zRqOmrV98ge/2CMmofLIDrTw4ryidg+EKGq5HO+SawuzA8BPdLSgtu+5ypsNDq85u3fX9k9DF/SXumJ9unCCHF2N6uUOyE/mvxiQNfBGEd/U2SN6YTLebSqo3Ltv7v3Hv1wTLKwgtQKHF1ufXoeRNjQ8cRK5sNSpuqIbmc5ARspyTOOz3WzKQzM8CKXwqZt/7NGoUWTMIDt+kImglhHxLforK9B4d5Ex84p506OoGdVYrIBlgFJ6d4gLaxs2U+J47zjoGPCbF0T33C6ztss89txe025yHFB9WQhkx11tkyT2rKXtkwVTTD9ikEo3gCUJqLrGLM/m7wnwn/pumxcqEjW2K8819RzybW6IcNPCFdfay8E7OpxR9U6Swjhog3EsILCBMhYtpedw8grMfP404AvC09uwYqsSNzrZQTmNiL4lEAX3wBU7iprSC4e9w6xgvZZdZiEoaqbWv/80E1KJjdMShyVdxn9seNbFrHlzIn9ZLCQUslML8tZcxY66raqNT8rAFptqrITylHj7q2MF6Vk+VjAh7tVhXpAMa0NoqdEIPUbe0MATucMfk/ITrtfyrfb0iGP4hv5X+lYZaiQAlO1VJTlXIdjcdXgwj+ZHBlmDxeBnyEVuWLGw10ixKBJaXh0GXAH5ga3JXhtYhXBLr/b4rNZrsbixevcd0UeMkoopwEcLvSlJ6iCifxoscv56iEGl/MkfLkstbiWTF9h8uuxQH9gOkZVpxg1De4BS2AApyQtCT1r0AzrQt9Gx60vxcL2ACl/xzWbNQeb95r6cxBl4KDm8D4Wx7WVPp1Zsarh3obIUmT7AJknfVp3zQFfSV3zQjtTzZW+7onb5IGcVHqHvzi5tAU0S2pQxfaPlBnCa86iQhDkBVOMyNlw4IUg6BfGiNJ7vyLP26/CzHVp+o9rnggGWvFXGj9jHOdrdeTHAKXCMUJpNzRdHubFaOEjbv13uUdo+R2wqdjqhd4YdR0cu1G47zmwF55riWqJB9Eh6IrP1rJo849OuzZrCGv5beEgFVnrzD2zFVwFrz+fPUrNK7ZYsUBuQg+EdRvBLXJUm9t9VTbULbPmZc1c7F5Xt1QrlO2B8LOyhzR2j0hSVQC+nxfzd12OzMo5tPE3sF0iJ7+84k99/BoH04JaLklmgTsoyUKqntgtkudiqtzp2yrodxDU9rcUl6EWFMeO9UqmNOH32nNBa/6evR+cgeUJGPcY9R91K0xJ4x0y7KrwOigPBC+94iTy8M4aviJsEHhfkO6VUFmQBLl2zxWcFaw1hFbZlce5StLfnczYUQgKeX1RQsYET6o3/l7vhS5F/61tawbPAlF3bZvUFNZTPU3puA7iVKNk8SulaBmIuvUsLAqdPy/fJLXo0EvdzX9ScWyK+CPNWUYaV69fqbqw5yqcO9FZHWo/6Lv09iH3NzofGLwAMTNxYxaKeeFsONv1+z7ntVMBZe6PqnvREaIuono/zayOm5q8a3aD8kcdDLec5JxoSHuVY874aY4y197iKj3AJ88YrldYVXOl54P5rYQOMW91CLLEPuZALhdcMp/8eA3FVE5egO6PzsmdYDbYInbupeo1h+J/Nz97YwSbDhadb2CjFolMPOict7TFiROdBbFG2id5UyF2ey6/HqKPecSWQHaoAdtTxsaHC1rDLzi0aVAsLoXI6HPwC79co9exjYMnnIsl7XL+8Ab0yEXnA+Ov6AA1X7odhkBuT1Zp3RAX6C6S4qUYFVcSFYM/EWp9Qupd/eeNfu8sfddU/FstTG6Bne6mdbF9OGO1AuiFz7sEt7JJacqkxMidw6tj6RJPNV/SV5V5UbC59mn9RJK39rh0kF+RDvH0erck/DbZh1wVPXIFgNnzxj6DXFpBFOHn3l1aqK+0liPmWJDj4evG5SbcoPra1avXWee78hT9Za55+xcr/dH01D9vKJ/7bks/rR3Z49J+6NBUH3uMinF5g/Hwgu/QJoaBi16YpyVsVeXSxKLaxwMj2XAA9ZqRkTuH+FzinP3x4gypzfQ7t+EkQUMcIIfhVM878/2fl8r1tWZlIW0M8HFPuwoQdwpcRMbpIdzaxp1F+TvXynJKc7KX1sVcwj6LM1ePTfoE5pjqLPrOT2a5F650DprNEyF60O27o3v4WwWkjme1LipiIxDulvvTYCJGFHYLDcqHHEnfScUUsXuaRq+A/BpLHJpTE0Wh4nweDF611QVbKVXDgcp9eJ7+KiuYfu/u1FMAWfmBF50S09d2x50v0BJZbljAmh17WM9eOSN9cVwdI4guSUowrYzOfKhicAKfyVSjNiOiuZMvUrWihkrYz1wnpdpfrcydQwe6Z+bFHmgNvaFCv7jwf0RHJxZilWLtszjFRfg4ZOyxbbkhuEgqiLYbXw0GR8O9i6yTt6swnkT/fXzI2TmkhOG4IY5kuuuD9uDAl/mQzVra+DJA07HvKmiPWeoYSF6uPkPEbRB2jLVAx/zNi1kxuBWUg7ZQ6CGA1y5IKolW+tZmtc2+/aTjffROlGhnUr/u8fOo5nwD7fEjDVMn6kgBYBUwZ5DHTqs6ILeM2EHBTdfkQ2aPa/VycK/3awBO8Mpy1jritOAIpoTkhB3+//udEO/L39PFWgAYBB5GDkuOB6N2EIBYGccOmb7aKW/uQuDSR1rfX95VX8MoxbCr8k+bE/HA4wXk4hJL56llYhgRVvzZ+uZnKXsc5Oma5ok8MT6qc3QNME/ihlSref0Eh8VTeReqosMve4IgzXcewhJcQaLcHhNcF36sgOOozTo7zkjCKI2t8WEzZt6rAbDet7euRyNXwlGiKzBfXZCNr3+c2qK4K/Zhgh+r6ltXmdyOXUgMQ0uqP2nPky10MGy3hKwvX7ptV28NvMFuB548Jc9NTXc+ZIKExBxYTNcvO4fJqZvGU2k4S9nxnryBMLgrRmDAKb8FTPfPD+ghZffhXTiJanqpo5PWnauSJbpWhonNLI+ii0BW8uY1fMcTlTx3PmFXiXrVwduq/gb+OlW82eggbxfRf5ZQd+KmPcpjxPHpKUwi1pHmKdgvTfA9WYVfyLn0GPQeFkBO33T3H3NSckqU3WUjCUwEIvVb+1T96cssFoS8Nv19VUyCia7Q9mcKg2hR0SYzNDzxconUBBvIWknbeoiUIKd2Jtw6As4R+oHu3m9UgBN4UPes4jkwWS9kB/f49s0xhxkIcSfHgWAbNrFS3fT6/t3rSR1WuTm2p0XJCL3MisrceQUAuU8rP75wRqwm3uRzvd8CfdAKU4TCcNg7IpT/bezZmcegXpioj9pqLFYax14qiNqoxK+l742KapqK9y/bHi14qdf8fIlx/7rjXhflM+UeJuNwyGmmT2pfRB60hyYnnxix8RVrqL+Cp4rtg5APb0ShXdpASN01yeYIQ0/d6DxpsvwQyaL84ndYbOoB9J5ogqLfHhw4mgb8H/ckI0amOyK2XGy+rsVERL0n7YJKApGYVLbJmrhcaj73rEhDFL1S+0TyiQ8Zhctu0zixQIIR9QxaXvtWxX4p19SN5c6EkazXZPe9bPspdDIZj7VupUZQq122GCPwk6F3RDMLpSKtRMDG2W2kqQ/7AW9NNvvIfIl89KTsusRHyYGqpgbjxAWn2rUaVO5SszkmGQYJppRLVhGl1RidL4JO2Dn8F3S0cXQKvrlQCoD6Am+7IrmBRvxSjm5D+7ZPfzm5XDRXTDZB812A37CVqlznYWFKq9dtITyrqPw1YBmJ8l9sLTZUTO0/trahCVJHcizA0j0Y1BRdKj6Go/p7xy+noJpHmw4xBSJH4AMcpptWpZ4GV/83rVvqdj4mEfv0e3ghjWkKtKaQXoyKrtHb4FTYJlUUoEHG0SVznMHyLPqrt6bX/r8RCzioX80a8vg0kzH7ZeLN8qOI6nKvRayA5+CMhTZlBwgLgdoFEV+iW48K/LyOoKpEdZXfeSFvWWbhFNJrGWpcQXg1Tfav6rsB7YzYKG2XXDkg2D2n9nq3FtQe4SIGMZPB7vQzWzwiPj29R+ij14rruzdNUO4KaXNFLwwAup+k2LT20Vh8bKFhhCU/iSMZ3Os5Szx5rP6HCzpiOYXQlkqtwUTGToWDizxjWF2Uc8tVttc5znb5zhuurli/TEzjcA/Akr6wwUOFYK6Gqq9j2FDgLo3HS9u6lqu8UFJVu5+pKoHcVLFyCRjd7qRHircK7fuVCTGkbmSmS8WnYlu8TckizB/0xBQeKGLQm2jrJo3HBOkvCbpOGC5KQ0FxYq7c62NB7MI7H/gcz9tw5BQkDHuAO9+1CHztnVgv/2lEc+AvJFaXJBRBzt3/pgi8upAp6U8UKhYg+DvJl8f9YZWTwiIRGaEU/P5rrxxIaAPt8mf0YorTa0nvyXxv3glTfLhVP3yf/WV+TNxSkrX7zxolUNj++rVluQQzMGJgyxqFno4FX3JVPjJKo5YW5bd197oME/0SBORC1xA2V8FvJjraJmCi0iKMNnYc6WmPzW8VPHMKBXTDCUtIN94NAu7sSQ7rijHXOW6GmUhECfGpVMG+/f5tuZG29/erUSktrTudFxz0gQpeJrerbcbU+jg6xL8XT61/td1KO+NAPhGZl4P5NbHxiFNpJ2rALAjBahHMBkVYhjWNZ1X/tyoBPCKpBtEXyA9Ln2wNOh2/t1XSY6qbw0lyHVscnc3mbdjb/UFsgk1ruOhErHP+fVOcwrDkJW8TgdfTtR8LkxXdD4eCm8OlWgJwBaEkRO2njTNbbedgH8T1JkQIS/Qcp+avWh8D/+hCaM5+N7gIHaV0tbxQeu3c4f0hoW9hKRaC93jiTjfgWK1TbEhVL9zs7gsM+2QOoYfe6ZzQU/nsYxCdDykTjPMzS+Gw7ul87Ev2Jw/F5OiiXo+SRLc46KBRuf5tn633zFgFgBfhjRrd4WBZFF1uy3Q1LfH4f26JGCPVtUc6pX47M06xTwcOBde/MBL2DPB6pvwNZIPszbIWMGuCGo0iWKXYpviQCXRy8/5FWnNMzt14OXrh/CXUxiQB19rHWD4w5t+HrbpPKpFW1wtYiPgnORu4kOUlFTo1FHXIOMRHEQzTVEGasVXw1M86RXUB/3n/g5DR1YYJpGNrdNtiGHFvKcRCKItgF9mCRk+Wuk9MzMCLfwofhUzjMcwi5vj1cmxRSgAb/uS0fQeslF1fkiWXf0JYp83fOPa09SuAIz81NnBN230ooop8MM5/uo3ir8tnnR0+1CDke62xkS8faENLbKCe3leUjFNmM36VfQdP2YFaVhSwTBY9gqaTDeBsqTcXrDrJoN2LViytRqE/S2cvLKTczGU+DKwWFIvqMBBaRpvDn/rT1VPFagYeoyw3G62xmDspgwHyuo9WTJC9p3N3rklquxZuq6ngIhTD0MYw+Cbed+Q8bxSuSDt9n8KQXjr0jBVTO4Qvr4/CS8Ombnx/3jskcf6ha8WTRLCRDE1RwooK4vB9Ceknc8la3SZFl/7pOBle3+/p69KbDyZfUkdc1EG/8Claqj1U6DSbVGVZXUI+XY6ZBoxWK+7GKuHvROnjbXP+yyX/eAgZyBjVOVpt5oGSq0fHQwoJeWqAZJhVKZOI21lDn41r8Zz+RjxZRYie7yvdslnzBwSxMqbfw2tKYuWxzPnU5uPfgnQmKlzHsSqJPhKgEg8tFQzqLoAjhQUdjiDbqw0y1aRWbdLXC5lVxFQCFZGCE8f4hvDrZs3bWjmql4HgPWrpC9RqBuIWkaOd8ASp61qiNDm9MKp+A0kWtpGwah7rJxKRGCr8UzSzr9oHyvi5H8/AbSr5ZiHZ9+O4ThCszlCsf3OfiUsLVFT3dzblTL3t0viF3b9EIWel02vf8najGMCW9kYP2EqLtFrEGuokjUCV/NxThetas3yLrSatIgDZTmZ90CYnm2ItdsLNS7Ucfzw7MbNRGnR8OKardoIGTozEKHo/HxSExK4TkxACKU8om2gV7s8iJVYdyDLeM4KV+LuLlkTc/Yjlh3Ao4ktJG5vQXXa6mxvfUJmgGa8t7dbZCnFSyro1qOlrcHoON63RfbMrO+98gYKuFUK3xzV8Sk7nHNBrIlMiFinuT1i8rsBRyGDOKyFsBFLHlQ3O2j40+0b1sGccunkI1uyugZdHpkJtn66tArPO4H5lxlrVqjIBsxZwhLXwlBgTblmBIPDw1upHyMjPeKrdpz4rDUd0vjInDC5WDFVSYmi1P94Euhjq8rn4UZUGl0U3w4OpHTK6wuyaJmgc/jfGbXI1nkVpnTT7fHPiKkakCplhFqScPa4qhM+K6rdQsVX3ULN5Cr0ayxoHGTDnuTcDhiVHB+hcimnX8XTnHrMIP5uptTTcfz0BkArDOke//qCnzKNSHUHvPgS18SQQbATSlctaTEhv0PwLlp911gwU6bNN7kRxWqZWrEt9G4ffjcloRMMdnECc3QReh40tnTf163jph/aopjQqM+DcUtotppgdhmCdak1gJeb8KRPZL2ggeF0mUSCKuiI3GtBQ0UE/FbexLZLjSu9Pa/kcNMUXMy1IbeaaVUBUaANo2h/QNRhdpagjQzTZdnO45SulBwnwZQzSC6grFs9M0a6gc9hsUwF+T+c+d+Ssl31/QQ1pPLUGUjCnIuEq+ndqRhudjeqRz5ORsjUbTEaU4gpMaWI4r7YE4VPPbnVqanbvaiF+hdFSChyzmC32+g2O5mm1WiZeamoZfObQQlZ5dQ1na6Cnmm3srx0R5g8bvU8EwgERay6nXd7iAyQdRk2GdGAiC+HXHf8UX/7ySGqTdEQk4PH7hlo+5+19Qg9OwSpCtmWkbmqQv9qwlJUqgQKKGB96pEE9s8/72wlUOxleHDPNKGF3bvAhI+J7OnPrk3tc285diLa0W1wZNxcurIfxHQIZbfhalm2doWK6zZNMwPotrVWZaVhJFbYIFQOW4JeSMl9rWwLg3w8kd+TOGLOEibmQ9Tm/lJaWoahLD73Q0pQc5NTZWDaJ/j7jc3rb3XvUf5iOQe0J4uLscMZl4Br+dW5lka5fdHil4fIJnqqj8qqMLWIrLhLolUUQlQWqZI6e/nFYcS8tJK6IWPUrsbBz/wMfkGW2uNBMbXYiOz6JOn5SNdrT4sH5ffb/ApqOcWcr9LY7bEQDrMmIIP7VmvmsLx9I6Q21RjIoPsP9t3CKUPyKtxsMuBmrvTtw2qbPjn78exrGlLVoVllU2wGheJ]]></content>
      <tags>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Understanding on HTML]]></title>
    <url>%2F2018%2F02%2F14%2FUnderstanding-on-HTML%2F</url>
    <content type="text"><![CDATA[Take something for example,which seems to be far more effctive at times. 讲一些对于HTML的理解，顺带讲讲CSS和JavaScript水平有限，如有偏颇，多多包涵。 框架 · 模板 · 控制HTML，全称是“超文本标记语言”百度百科CSS，全称是“层叠样式表”百度百科JavaScript，额……没有全称，不要在意这些细节。百度百科 首先，概念不可避。此处不是科普，而是经验谈，有需要的同学可以上百度百科先阅读一下~ 虽然正统的MVC框架其实是这样的，但是我仍然想套用它的概念，毕竟是比较经典的讲法，能够在一定程度上提高本文的逼格。（以及，能够被以后前来访问的大牛和我自己笑话一下。） 我这么菜，我也很无奈呀.jpg 框架——HTML Chrome开发者工具中显示的HTML代码 HTML代码是网页最根本的骨架，也是大部分网页呈现在浏览器上的最终形式之一。举个栗子，请打开你正在使用的任意一款浏览器，访问任意一个页面，然后打开浏览器自带的开发者工具（如果不知道如何打开，百度一下）。该开发者工具中的某一个选项卡（通常是第一个）中展示的正是该网站的HTML代码。大致结构一般如下： 123456789&lt;html&gt; ... &lt;head&gt; ... &lt;/head&gt; &lt;body&gt; ... &lt;/body&gt;&lt;/html&gt; 这些用尖括号和斜杠组成的HTML标签，是网页的框架，正如你阅读的书籍，在初始状态下是从上到下，自然地顺序排版的。被标签包裹着的文本内容、各种由诸如&lt;img&gt;、&lt;video&gt;等标签衍生出的图片、视频等多媒体内容，都在HTML这个框架之下，分布于整个网页的各自位置当中。看着十分理想，场面非常和谐。 但是，燃鹅，BUT…… 模板——CSS “这个对话框我想浮在页面最顶层，然后点完就消失，对，要有特效的那种！”“给我弄个像这个图纸这样的网页。什么？两个纵向栏，报纸都排版得出来，你写不出来？”“怎么都是黑漆漆一片的，文字和按钮要有颜色，有质感，有特效，这么丑会辣眼睛的啦！”“……哼！” 是的，你眼前的网页之所以不是一场灾难，一坨从左往右写，从上往下读的纯文本，正是因为除HTML代码之外，还有CSS代码，作为网页样式的模板，批量而精确地定义着每一个网页元素的各种属性。 是的，各种属性：长宽，距离，边框，形状，颜色，排版，显示，隐藏…… 12345678910111213.mod-class&#123; width: 10px; height: 20px; ...&#125;#special-item&#123; margin: 0 auto; padding: 8px; color: #000; background-color: transparent; ...&#125; 这样的css代码，作用于形如以下的html元素中 1234567&lt;div class="mod-class"&gt; ...&lt;/div&gt;...&lt;div id="special-item"&gt; ...&lt;/div&gt; 元素标签可以不仅仅是&lt;div&gt;，而只要class或id吻合，无论这个元素是什么，就会受到相应CSS语句的约束，就像一个放之四海而皆准的模板一样这就是CSS作为页面样式模板的力量。 而且，这不仅仅是静态的。现代的CSS版本，拥有着能够做出各种动态特效、多平台响应等一系列高级特性。 “那么CSS代码在哪里呢？我在开发者工具中找了半天没找到诶。” Chrome开发者工具中显示的CSS代码 一般在显示HTML代码的开发者工具界面的右侧。而这些CSS属性都是通过在HTML文件中引用.css格式的文件、或者直接插入&lt;style&gt;标签来实现的： 1234567891011121314//引入文件&lt;link href="./***.css" rel="stylesheet" type="text/css"/&gt;//引入文件&lt;style&gt; @import"mystyle.css"; &lt;/style&gt;//直接插入代码&lt;style&gt; .custom-class&#123; .... &#125;&lt;/style&gt;//直接在元素中插入代码&lt;div style="display: none"&gt; 但是，燃鹅，BUT…… 控制——JavaScript，以及更多 “网页不错, 我想弄个账户登录什么的。这样可以让用户有个性化的体验”“弄个banner挂幻灯片吧，自动播放的那种，现在网站主页不都这么做吗？”“听说小游戏挺火的，‘跳一跳’啥的，什么写的，难不成是flash？”“额……” 如果网页是纯HTML和CSS编写出来的话，同样是一场灾难： 无论何时，所有人都只能访问通过一模一样的网页 要创建新的网页，只能手工重新编写新的网页文件 无法提供用户输入的功能，更无法在浏览过程的前中后，对用户输出特定的反馈（内容的变化，事件的产生） …… 那么如果网页引入了我们熟悉的程序代码呢？ 不同的用户，访问具有不同内容的同一个网页，正如我们打开同一个APP，看不同的推荐一样 创建新的网页，正如安装新的程序一样，是一个自动的过程 每一次手指的触摸、鼠标的单击，程序的界面都会有相应的变化 …… 那么就需要一种、多种编程语言参与到网页乃至网站的编写过程中来了。JavaScript，这个带着Java名字，却和Java毫无关系的编程语言应运而生，担负了赋予网页灵魂的工作——控制网页的各类功能。 在你看着网页加载的时候，在你浏览网页的时候，在你按下网页上一个提交按钮的时候，在你点击屏幕跳一跳的时候（没错，微信小游戏的游戏逻辑也是JS写的） JavaScript都在你看不见的地方，静静地运行着。（它和HTML、CSS一样，被下载到浏览器，在浏览器提供的本地引擎中运行着，而不是服务器之类的远程平台）是的，它是货真价实的编程语言，让网页拥有程序一样的功能。 Chrome开发者工具中显示的可调试jQuery（JS的一个分支）代码的控制台 （一般在开发者工具显示HTML代码界面的下方，或者名为控制台的选项卡内） 与css一样，它也有引入文件和使用&lt;script&gt;标签直接插入代码的方式。 123456&lt;script type="text/javascript" src="***.js"&gt;&lt;/script&gt;//或者&lt;script&gt; var a = 0; ...&lt;/script&gt; 但是，燃鹅，BUT…… 好了好了，这里就不另开一小节讲了。 JS的优势正是所有浏览器都拥有的统一的JavaScript引擎，可以让JS一次编写，处处下载，均能兼容运行。但是它的劣势也就在于本地运行，占用了本地的资源，增大了客户端设备的负担，不能在网页加载之前对网页结构进行灵活的改变，（举个简单的栗子，如果要根据不同省份、地区、国家的访客的ip地址，提供大量的不同内容，对于网页的处理总不可能永远都是边加载边修改）。况且，JS并没有解决： 既然有了用户数据交互的渠道，那数据存在哪里？又从哪里取出？ 如何在部署了网站的服务器上设定好域名、访问权限等，并且能够自动地拒绝非法的请求 所以，需要： 一个能够在服务器端，根据客户端提交来的请求，在加载之前就能够将内容做一定处理的编程语言 一个能够规范地管理并与网页进行实时数据交换的数据库 一个能够有效管理服务器上传下载、ip域名映射、访问进程等事项的服务器管理程序 是的，这些服务器端的需求，与我们之前提到的浏览器端，也即客户端的需求相对。两者的对比就产生了网页开发中最重要的两大分类： 前端和后端 网页前端开发：HTML+CSS+JS网页后端开发：服务器管理+数据库管理+预处理控制（后端框架） 两者有着很多很有趣的矛盾统一性，例如： 网页前端开发因为需要跨浏览器甚至跨平台的兼容，因此使用的技术一般是统一的HTML+CSS+JS。 后端开发却相反，由于服务器本身平台的多样性（Linux或Windows）以及对其性能、规模等其他需求的多样性，导致后端采用的技术框架呈现百花齐放的姿态，例如WordPress采用的LAMP或LNMP，基于python的Django，基于Node.js的Express，基于Java的Spring等等，此处就不过多赘述了。 …… PS：不仅仅是网页开发分前端和后端，任意一个web项目，例如手机APP、桌面程序、微信小程序……都需要有前端后端的开发划分，以便于厘清项目结构和开发安排 总结：在跑题万里之后 （以及，能够被以后前来访问的大牛和我自己笑话一下。） 我这么菜，我也很无奈呀.jpg 我一直在思考自己为什么会跑题。最后发现答案就在上面这两句引用里面。是啊，我很菜。 我当前对于技术的理解，根本无法给予我把控这些庞杂概念的能力。说是讲自己对HTML的理解，但更多的是谈到了围绕HTML+CSS+JS的网页前端基础。虽然也没什么毛病，俗话说“不讲相关知识点的讲评，就是在耍流氓”。 但是我依然要写，毕竟只有写出来点什么，才能知道自己脑袋里面装的东西是有多么地可笑，才能放下自己那些绷在脸面上放不下的所谓自大和狂妄。正如高中时期孜孜不倦地在一切空白处记下的笔记，就算我记下之后不再去看它，至少在我记录的时候，知识在我的大脑中不断流转、不断处理，最终呈现在我的笔下，我的眼前。这个过程，不正是自我纠错、自我提高的过程吗？ 为自己而写，调动自己的思维，不要让大脑日渐沦为一台生锈的机器。 那么最后总结一下吧：HTML作为现代网页的基本骨架，只有在CSS、JavaScript乃至整个服务器后端的协同下，才能够正常地发挥现代网页的基本机能，以及为更多新鲜的需求、新颖的功能带来无限的开发潜能。 学习网页开发，最重要的不是一句两句语法，而是在动手和借鉴的过程中，从微观的角度，理解整个项目的运作逻辑，和技术背后的高明之处。（虽然我还是在需求导向型的歧途上越走越远，但是读得懂源码的程序员，才能开发出真正的好产品，这是不变的真理，迟早有一天我仍然会兜一个大圈子，回到这里的） 建议 · 福利其实上面已经写一些建议了。但是我还想另外开一个大节讲一讲。 建议不多，就是先不要想着自己搭一个什么牛逼的网站，先做一个简单的HTML+CSS+JS的小页面，理解清楚他们之间的作用机理，顺带踩一部分的坑。 之后或许你会停滞一段时间，因为说实话，其实在修改一些开源项目供你自己项目需求的时候，这些已经完全够用了，前辈写的足够优秀了，后端的东西你一旦配置好了就可以专心改界面了。 但是，会有一个时刻，你会发现只搞这些根本满足不了需求，或许是你自己看到了别人写的项目，或许是你突然要调用数据库做一个新的功能，或许是你发现项目提供的API根本没法用，要自己写一个。 不懂后端的前端，只可能是个巨坑。所以你从一个大坑（网页前端），纵身一跃，跳进了另一个大坑（网页后端）。之后再多跳几次，从网站到移动APP，从移动APP到桌面端，从软件到物联网硬件，然后，然后…… 然后，你就乖乖回前端啦！（并不） 福利？福利是不可能有的，这辈子都不可能有的。就是稍微推荐几个网站把读者带坑里去这样子 学习站点： FreeCodeCamp.cn：闯（shua）关（ti）式的前端编程教学网站（也是我真正开始接触前端编程的地方） w3school：可以当工具书用，有些知识点较老，但是不影响使用（百度HTML相关知识点，不出意外前几个就是它了） 萌码：又一个闯（shua）关（ti）式的编程练习平台（虽然没用过但是身边的同学在用） 练手推荐： GitHub：多看优秀项目的代码，并且多练习一些优秀项目的部署和使用，如果不知道找什么就去看排行榜上的项目。（CSDN同理） Student Developer Pack：使用学校提供的学生邮箱注册GitHub账号，可以领取Education Pack，内含免费一年DigitalOcean服务器和Namecheap域名。（踩坑提示：DO的服务器要使用VISA卡或者PayPal预交约合32元人民币才能开户，建议使用PayPal，一年后全价略坑，现已转bandwagon。服务器在境外，可以找教程kexueshangwang） WordPress：搜一个教程并对照着在服务器上搭建一个WordPress站点吧！本博客程序是Hexo，但我依然推荐WP，毕竟越著名的程序出问题时能够获得的帮助（教程）也就阅读。同时也有助于你理解LNMP/LAMP内部各个部分的联系和配置方法。如果肯花心思去美化、修改你的站点那就更好了。（WordPress是一个优秀的PHP项目，类似的还有论坛程序Discuz、PHPwind、Wecenter、Tipask，在修改它们的过程中你也可以理解PHP在站点中起到的作用，如果你还想尝试其他架构的例如Java或Python的，也可以去搜索并尝试部署到你的服务器上） 微信小程序：使用你当前掌握的前端、后端知识去开发微信小程序吧~ 工具下载： Baidu：是的，搜索引擎是知识的源泉，（貌似并不用下载），掌握好问题的描述方式，输入少量的、但足以描述整体的关键词，大部分的问题都能够找得到答案。 VS Code：近乎万能的代码编辑器，你值得拥有。 FileZila：好用的FTP上传下载工具，与服务器进行文件传输的首选。 Putty：SSH客户端，使用命令行远程操作你的服务器，顺带学习一下Linux命令的使用 LNMP：在你的服务器上快速配置LNMP环境，免除各种依赖冲突的烦恼 XAMPP：在你的服务器上快速配置LAMP环境，同样也支持在本地环境（Windows桌面端）配置，便于你站点的本地调试（本地调试后上传能避免很多不必要的麻烦） 最后，这是本站的第二篇正式发文，感谢阅读。如有意见和建议，欢迎通过首页的联系方式联系作者，本文参考资料均来源于网络，作者保留相关权利，转载请注明出处。]]></content>
      <tags>
        <tag>experience</tag>
        <tag>understanding</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First to NeXT]]></title>
    <url>%2F2018%2F02%2F14%2FFirst-to-NeXT%2F</url>
    <content type="text"><![CDATA[Maybe it is the first.But in my view, that may be the NeXT. 名字不重要，形式也不重要，重要的是内容。这里将会陆续发布一些技术工作的经验谈，然而仅仅是经验谈而已。 更多的都是需要读者自己去探索，这一方天地下，比我们的视野更远的地方。 12hexo new "First to NeXT"hexo d -g 这是本站第一篇正式发文，感谢阅读！]]></content>
      <tags>
        <tag>intro</tag>
      </tags>
  </entry>
</search>
